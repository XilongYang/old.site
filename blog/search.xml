<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言中浮点数的二进制表示（IEEE754）</title>
    <url>/blog/2019/08/18/0001-C:Floating_point_numbers_IEEE754/</url>
    <content><![CDATA[<blockquote>
<p>前言：最近在C语言学习中遇到了浮点运算精度的问题， 在查找资料后发现是浮点数的储存方式引起的问题，在此做一个记录。</p>
</blockquote>
<span id="more"></span>
<h3 id="问题代码">问题代码：</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        a += (<span class="type">float</span>)arr[i] / <span class="number">10.0</span>;  <span class="comment">//求arr中所有数的平均数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; a) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]); <span class="comment">//将arr中大于平均数的数打印出来</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不难看出，以上程序理论上不应该输出任何数据，可是实际运行结果如下: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3 3 3 3 3 3 3 3 3 3</span><br></pre></td></tr></table></figure> ### 分析：</p>
<p>经过一番尝试，最后发现是由于本代码中a的值并非3.0而是2.99999，由此判断应该是浮点数的运算精度问题。</p>
<p>浮点数在内存中是按照IEEE754标准进行储存的， 即一个float类型的数据占用8Byte内存，其中包括符号位1位，阶码8位和尾数23位。图示如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">S(符号位)</th>
<th style="text-align: center;">E(阶码)</th>
<th style="text-align: center;">M(尾数)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0000 0000</td>
<td style="text-align: center;">0000 0000 0000 0000 0000 000</td>
</tr>
</tbody>
</table>
<p>其中符号位决定该浮点数的正负，正值为0，负值为1。</p>
<p>阶码用以表示该浮点数的指数，其值为</p>
<p><code>E = e(指数值) + 127</code></p>
<p>这样可以保证E不为负数，方便机器运算。其中127为float类型的偏移值，其它浮点类型的有其它偏移值。</p>
<p>按照浮点规格化表示，尾数的最高有效位应为1，这意味着M表示的值为1.M。</p>
<p>以遇到的问题中的值0.3为例， 其转化过程如下。</p>
<ol type="1">
<li>将十进制数转换为二进制，小数点前除2取余，小数点后乘2取整 <span class="math display">\[(0.3)_{10} = (0.0100110011001100110011001)_2 \]</span></li>
</ol>
<p>此时可以发现0.3的二进制是无限循环的，故而只能截取到精度对应的位数。</p>
<ol start="2" type="1">
<li><p>规格化表示 <span class="math display">\[0.100110011001100110011001=+1.00110011001100110011001\times2^{-2}\]</span></p></li>
<li><p>计算相应的值 S=0, E = 127 - 2 = 125 = 0111 1101, M = 0011 0011 0011 0011 0011 001</p></li>
</ol>
<p>所以0.3在内存中应该为</p>
<table>
<thead>
<tr class="header">
<th>S</th>
<th>E</th>
<th>M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0111 1101</td>
<td>0011 0011 0011 0011 0011 001</td>
</tr>
</tbody>
</table>
<p>转化为16进制数为：3E999999</p>
<p>可以用以下程序验证 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0.3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, *(<span class="type">int</span> *)&amp;a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 结论：</p>
<p>得到结果：3E99999A， 与理论计算值3E999999相差1，应该是计算机处理过程中对末位进行了四舍五入。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的声明与定义</title>
    <url>/blog/2020/02/26/0002-C++:Declaration_and_definition/</url>
    <content><![CDATA[<blockquote>
<p>偶然间看见一个声明:</p>
<p>struct tm <em>(</em>(<em>Pfunc)[3])(int(</em>)(int, int), float(*[])(float)); 一时间感到云里雾里。为了弄懂此类复杂的声明学习一些相关的知识，在此总结。</p>
</blockquote>
<span id="more"></span>
<h2 id="声明与定义的区别">声明与定义的区别</h2>
<h3 id="声明">声明</h3>
<p><strong>对于C++中的声明，比较通用的描述为：一条声明语句由一个基本数据类型和紧随其后的一个声明符列表组成。每个声明符命名一个变量并指定该变量为与基本数据类型有关的某种类型。</strong></p>
<p><em>声明语句： 基本数据类型 声明符1&lt;, 声明符2, 声明符3 ...&gt;</em></p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a, b = <span class="number">2</span>; </span><br><span class="line"><span class="comment">//int为基本数据类型， a,b为一个含有2个声明符的声明符列表，a与b都是声明符，分别声明（并定义）了名称为a, b的int型变量， 并把2赋值给b。</span></span><br></pre></td></tr></table></figure>
<h3 id="定义">定义</h3>
<p>可以看出，这条语句在声明了a, b的同时定义了它们。这里引出了声明和定义的关系：</p>
<p><strong>声明使得名字为程序所知，而定义负责建立名字与实体间的关系。</strong>声明规定了变量的类型与名字，而定义在此基础上为变量分配存储空间，还可能为其赋一个初始值。</p>
<h2 id="extern关键字">extern关键字</h2>
<p>extern关键字常用于表示一个变量已在其它文件中定义。</p>
<ul>
<li>如果要<strong>声明一个变量而不定义它</strong>，则在声明语句前加上extern</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a; <span class="comment">//声明int型变量a，但未定义</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> b = <span class="number">2</span>; <span class="comment">//声明并定义int型变量b，并为其赋初始值2</span></span><br></pre></td></tr></table></figure>
<p>​ <strong><em>任何显式初始化的声明即成为定义</em></strong><em>。即使一个声明符已用extern标记，对其进行初始化仍会导致定义行为。</em></p>
<ul>
<li><p>对于<strong>多文件</strong>程序，若要在多个文件中使用<strong>同一个变量</strong>，则必须在<strong>所有</strong>使用该变量的文件中<strong>声明</strong>它，但仅可在<strong>一个</strong>文件中<strong>定义</strong>该变量。</p></li>
<li><p><strong>不可在函数体内部初始化</strong>一个含有extern标记的变量。</p></li>
</ul>
<h2 id="复合类型">复合类型</h2>
<p><strong>复合类型指基于其它类型定义的类型 。</strong></p>
<h3 id="引用">1.引用</h3>
<p>引用即对象的别名，通过将声明符写成&amp;d的形式定义引用类型，其中d是变量名。</p>
<p>引用<strong>并非对象，不占用内存空间</strong>，仅作为一个已存在对象的别名。因此引用<strong>必须初始化，且不能再绑定到其它对象上。</strong></p>
<p>引用<strong>类型要与它所绑定的对象严格匹配</strong>，且<strong>仅能绑定在对象上</strong>，而不能绑定在字面值或表达式的计算结果上。该规则有两个例外：</p>
<ol type="1">
<li>对const的引用初始值可为任一能转换为引用的类型的对象、字面值或表达式结果。</li>
<li>基类的引用或指针可绑定到派生类对象上。</li>
</ol>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> &amp;r;	<span class="comment">//X, 引用必须初始化</span></span><br><span class="line"><span class="type">int</span> &amp;ri = i;</span><br><span class="line"><span class="type">double</span> &amp;rdi = i;<span class="comment">//X, 引用类型不匹配</span></span><br><span class="line"><span class="type">double</span> &amp;rd = <span class="number">3.14</span>;<span class="comment">//X, 非const引用必须绑定到对象上</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> &amp;crdi = i;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> &amp;crd = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<h3 id="指针">2.指针</h3>
<p>指针存放对象的地址，通过将声明符写成*d的形式定义，其中d是变量名。由于指针存放的并非对象，而是对象的地址，故需要<strong>用取地址符&amp;取得对象地址。操作其绑定的对象时也要使用解引用符*</strong>。</p>
<p>取地址符&amp;与引用声明符虽然使用同一个符号，但意义不同，一个作用于声明符，一个作用于对象。</p>
<p>解引用符*与指针声明符亦然，另外解引用符和引用没有关系。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> *pa = &amp;a; <span class="comment">//pa是a的指针， &amp;是取地址符</span></span><br><span class="line"><span class="type">int</span> &amp;ra = a; <span class="comment">//ra是a的引用， &amp;是引用声明符</span></span><br><span class="line">ra = <span class="number">3</span>;	<span class="comment">//通过引用改变a的值</span></span><br><span class="line">*pa = <span class="number">0</span>;<span class="comment">//通过指针改变a的值</span></span><br><span class="line">pa = <span class="number">0</span>;<span class="comment">//改变指针本身的值</span></span><br></pre></td></tr></table></figure>
<p>指针与引用类似，但有两点不同：</p>
<ol type="1">
<li>指针本身是一个对象，允许赋值和拷贝。</li>
<li>指针无须在定义时赋初始值，且在函数体内定义的指针有一个不确定的初始值。</li>
</ol>
<h4 id="特别注意">特别注意</h4>
<ol type="1">
<li><p>空指针: 不指向任何对象 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = <span class="literal">nullptr</span>; <span class="comment">//C++11</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p3 = <span class="literal">NULL</span>; <span class="comment">//#include&lt;cstdlib&gt;, 值等于0</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>void*指针：可指向任何对象，且不能操作所指对象。</p></li>
<li><p>指向指针的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1;</span><br><span class="line"><span class="type">int</span> **p2 = p1;</span><br></pre></td></tr></table></figure></li>
<li><p>指向数组的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p1)[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li>
<li><p>函数指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p1)(&lt;参数列表&gt;) = test;</span><br><span class="line"><span class="built_in">int</span> (*p2)(&lt;参数列表&gt;) = &amp;test;<span class="comment">//函数指针赋值时可以不用取地址</span></span><br><span class="line"><span class="built_in">p1</span>(&lt;&gt;);<span class="comment">//函数指针使用时可以不用解引用</span></span><br><span class="line">(*p1)(&lt;&gt;);</span><br></pre></td></tr></table></figure></li>
<li><p>指针的数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>常量指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="const限定符">const限定符</h2>
<ul>
<li><p>const<strong>作用于基本类型</strong>或与*连写成<strong>*const</strong>（只要在*后就表示指针本身是常量，与*间可有空格）用以声明常量指针，受const影响的变量的值不能被改变。</p></li>
<li><p>const对象<strong>仅在文件内有效</strong>，若要在其它文件中使用则需要在<strong>所有声明或定义</strong>语句前<strong>加extern</strong></p></li>
<li><p>引用可绑定到const对象上形成对const的引用，也称<strong>常量引用</strong>。非常量引用无法绑定常量对象。</p></li>
<li><p>常量引用<strong>不可用作修改对象的值</strong>，另一方面<strong>其初始值可为任一能转换为引用的类型的对象、字面值或表达式结果</strong>，此时该常量引用实际<strong>绑定了一个临时量</strong>。</p></li>
<li><p>对于指针而言，<strong>指针本身是const称为顶层const，指针指向的对象是const称为底层const</strong>。仅底层const可用于指向常量对象。</p></li>
<li><p>在<strong>类成员函数参数列表后使用const</strong>将该函数声明为const成员函数，其内在原理为作用于隐式参数<em>this</em>指针，从而使其能指向常量对象。因此<strong>类的const对象仅能调用const成员函数</strong>。</p></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">2</span>; <span class="comment">//i的值可变</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri = i; <span class="comment">//不可通过ri改变i的值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *pib = &amp;i; <span class="comment">//不可通过pib改变i的值， 可改变pib的值</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> pib = &amp;i; <span class="comment">//可通过pib改变i的值， 不可改变pib的值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> pib = &amp;i;<span class="comment">//不可通过pib改变i的值， 不可改变pib的值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> &amp;rj = j; <span class="comment">//X</span></span><br><span class="line"><span class="type">int</span> *pj = j; <span class="comment">//X</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* pj = j; <span class="comment">//X，必须是底层const才能绑定const对象。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class A&#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">	void HW()&#123;cout &lt;&lt; &quot;HelloWorld&quot; &lt;&lt; endl;&#125;</span></span><br><span class="line"><span class="comment">	void HW_c() const &#123;cout &lt;&lt; &quot;HelloWorld&quot; &lt;&lt; endl;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">A a1;</span><br><span class="line">a1.<span class="built_in">HW</span>(); <span class="comment">//合法</span></span><br><span class="line">a1.<span class="built_in">HW_c</span>();<span class="comment">//合法，普通对象可调用const成员函数</span></span><br><span class="line"><span class="type">const</span> A a2;</span><br><span class="line">a2.<span class="built_in">HW</span>();<span class="comment">//非法，即使非常量成员函数内没有改变对象的操作，仍不能被const对象调用</span></span><br><span class="line">a2.<span class="built_in">HW_c</span>();<span class="comment">//合法</span></span><br></pre></td></tr></table></figure>
<h2 id="constexpr关键字">constexpr关键字</h2>
<p>常量表达式指在编译时就能得到值且不会改变的表达式。常见的有字面值与用常量表达式初始化的const对象。</p>
<p>实际使用时往往很难确定一个表达式是否是常量表达式。此时可用constexpr声明该变量， 以由编译器检查其是否为常量表达式。</p>
<p>constexpr在声明指针时，会将指针设为顶层const。</p>
<p>constexpr函数需要满足：</p>
<ul>
<li>返回类型及所有形参类型都是字面值类型。</li>
<li>函数体中有且只有一条return语句。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p = null; <span class="comment">//p是指向整数的常量指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = null;	<span class="comment">//p1是指向整数常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p2 = null;	<span class="comment">//p2是指向整数常量的常量指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = null;	<span class="comment">//p3是指向整数常量的常量指针</span></span><br></pre></td></tr></table></figure>
<h2 id="static关键字">static关键字</h2>
<p>static将作用对象声明为静态对象，有四种主要用法：</p>
<ol type="1">
<li><p>对于<strong>全局或命名空间</strong>作用域，使用static标记声明符使该对象<strong>仅在此文件可用</strong>。</p></li>
<li><p>对于在<strong>函数</strong>作用域定义的变量，使用static标记使该变量在函数<strong>调用结束后不被释放</strong>。</p></li>
<li><p>对于在<strong>类</strong>作用域定义的<strong>数据成员</strong>，使用static标记使该成员为<strong>整个类共用</strong>而不属于任何对象。通常类的静态成员必须<strong>在类外定义及初始化</strong>，且<strong>不能在类外重复使用static</strong>。</p>
<ul>
<li><em>字面值常量类型的constexpr静态数据成员（常量表达式并不一定是用constexpr关键字定义的）可在类内用const整数类型的初始值初始化。即便如此，仍应在类外定义该成员，否则任何编译器不能直接用该成员的值替换该成员的场景都会引起错误。且此时在类外的定义不能再提供初始值。</em></li>
</ul></li>
<li><p>对于在<strong>类</strong>作用域定义的<strong>函数成员</strong>，使用static标记使该成员为<strong>整个类共用</strong>。静态成员函数不与任何对象绑定，不包含<em>this</em>指针，因此不能声明为const类型 。静态函数成员仅能使用其它静态成员。</p></li>
</ol>
<ul>
<li>union的成员不能声明成static类型 。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.cpp</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;	<span class="comment">//X, a.cpp内定义的a只能在本文件使用</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a = <span class="number">10</span>; <span class="comment">// 合法， 重新定义了一个a</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> b = <span class="number">3</span>; <span class="comment">//非法， 重复定义</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;	<span class="comment">//合法</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>; <span class="comment">//非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>; <span class="comment">//错误， 不可在类内初始化普通静态成员</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> d;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> e = <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> f = <span class="number">10</span>; <span class="comment">//在确定表达式为常量表达式时也可以使用const</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">HelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;HelloWorld!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">HW</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，不可重复static</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">A::HW</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;HW&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::HW</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;HW&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A::d = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> A::e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void AnotherFunc(const int &amp;A);</span></span><br><span class="line"><span class="built_in">AnotherFunc</span>(A::e); </span><br><span class="line"><span class="built_in">AnotherFunc</span>(A::f);<span class="comment">//错误，未在类外定义</span></span><br></pre></td></tr></table></figure>
<h2 id="类型别名">类型别名</h2>
<h3 id="typedef关键字">typedef关键字</h3>
<p>typedef <声明语句></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*name)</span>[10]</span>; <span class="comment">//将声明语句表示的类型用name指代</span></span><br><span class="line">name p2; <span class="comment">//等价于 int (*p2)[10]</span></span><br></pre></td></tr></table></figure>
<h3 id="using关键字">using关键字</h3>
<p>using <名称1> = <名称2></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> SI = StringItem; <span class="comment">//令SI等价于StringItem</span></span><br><span class="line">SI s; <span class="comment">//等价于 StringItem s;</span></span><br></pre></td></tr></table></figure>
<p>注意无论是typedef还是using，它们的别名都是基于语义的，不可以理解成#define式的字符串替换。比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *PC1;</span><br><span class="line"><span class="keyword">using</span> PC2 = <span class="type">char</span>*;</span><br><span class="line"><span class="comment">// 此时PC1与PC2表示的类型都是char的指针</span></span><br><span class="line">PC1 &amp;p1;</span><br><span class="line"><span class="comment">// 对于这个变量，其类型为PC1的引用即char的指针的引用：char &amp;*p1；而不是char *&amp;p1;</span></span><br><span class="line"><span class="comment">// 对PC2同理，但PC2更容易犯这样的错误，如PC2&amp; = (char*)&amp; = char*&amp;这样的理解是绝对不行的。</span></span><br></pre></td></tr></table></figure>
<h2 id="类型推导">类型推导</h2>
<h3 id="auto关键字">auto关键字</h3>
<p>通过初始值推导类型，故而必须初始化。</p>
<ul>
<li>用引用初始化以auto声明的变量时，变量会以引用的对象类型作为变量类型。如需引用类型需要明确指出。</li>
<li>以指针初始化auto声明的变量时，会忽略顶层const。如需顶层const需要明确指出。</li>
<li>要在一条语句中声明多个变量，它们的初始值应该相同。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> &amp;a = i;</span><br><span class="line"><span class="type">int</span> *p = i;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = i;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p2 = i;</span><br><span class="line"><span class="keyword">auto</span> ii = i; <span class="comment">//ii为int</span></span><br><span class="line"><span class="keyword">auto</span> aa = a; <span class="comment">//aa为int</span></span><br><span class="line"><span class="keyword">auto</span> pp = p; <span class="comment">//pp为int*</span></span><br><span class="line"><span class="keyword">auto</span> pp1 = p1; <span class="comment">//pp1为 const int*</span></span><br><span class="line"><span class="keyword">auto</span> pp2 = p2; <span class="comment">//pp2为 const int*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> &amp;raa = a; <span class="comment">//raa为int&amp;</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> cpp1 = p1; <span class="comment">//cpp1为 const int const*</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;rii = i; <span class="comment">//rii为 const int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> b = rii, c = raa;<span class="comment">//X, rii为const int, raa为int</span></span><br></pre></td></tr></table></figure>
<h3 id="decltype关键字">decltype关键字</h3>
<p>decltype(表达式) <声明符></p>
<ul>
<li><p>decltype检查表达式的值类型，但<strong>不实际计算该表达式</strong>。</p></li>
<li><p>decltype并不会改变顶层const和引用。</p>
<ul>
<li>引用仅在这种用途时不作为其绑定对象的同义词。</li>
</ul></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = i;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(r) rr = i; <span class="comment">//rr为 int&amp;</span></span><br><span class="line"><span class="keyword">decltype</span>(p) pp = null;<span class="comment">//pp为 int *const</span></span><br></pre></td></tr></table></figure>
<h3 id="复杂声明的理解">复杂声明的理解</h3>
<p><strong>由内而外，由右及左。</strong></p>
<p>即优先找离声明符最近的复合类型声明。对于距离声明符距离相同的复合类型声明，优先处理声明符右边。</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span> *(*(*Pfunc)[<span class="number">3</span>])(<span class="built_in">int</span>(*)(<span class="type">int</span>, <span class="type">int</span>), <span class="built_in">float</span>(*[])(<span class="type">float</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	1.首先，要找到主声明符的名字，这里是Pfunc</span></span><br><span class="line"><span class="comment">	2.找离Pfunc最近的复合类型声明，越近则影响越大，这里离Pfunc最近的是*，即Pfunc最本质上是一个指针。</span></span><br><span class="line"><span class="comment">	3.采用由内而外，由右及左的顺序分析，出于语序最好使用英文</span></span><br><span class="line"><span class="comment">	Pfunc is a pointer to an array(size 3) about pointer to function(C1, C2) return a pointer to struct tm.</span></span><br><span class="line"><span class="comment">	C1: a pointer to a function(int , int) return int</span></span><br><span class="line"><span class="comment">	C2: an array about pointer to a function(float) return float</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *(*&amp;i)[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	i is a reference for pointer to an array(size 3) about pointer to const int;</span></span><br><span class="line"><span class="comment">	const作用是修饰基本类型，不影响判断</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux安装与配置</title>
    <url>/blog/2020/03/20/0003-Arch_linux_configuration/</url>
    <content><![CDATA[<blockquote>
<p>Arch Linux是GNU/Linux的众多发行版中相对小众的一个。相对Ubuntu等更加广为人知的发行版，Arch对新手并不是很友好。这篇文章旨在从零开始，一步一步帮助读者完成Arch Linux的安装与配置。</p>
</blockquote>
<span id="more"></span>
<h2 id="开始之前">开始之前</h2>
<h3 id="检查你的硬件">检查你的硬件</h3>
<p>在安装Arch Linux之前，请先确认你的硬件是否支持Linux，通常显卡与网卡比较容易出现问题。这篇文章将以硬件完全兼容作为前提，如果你的硬件不被支持可以尝试更换硬件。</p>
<p>这里给出本文所用机器的配置以供参考。</p>
<table>
<thead>
<tr class="header">
<th>硬件名称</th>
<th>型号</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>处理器</td>
<td>Intel Core i5-8250U</td>
</tr>
<tr class="even">
<td>独立显卡</td>
<td>AMD ATI Radeon 550</td>
</tr>
<tr class="odd">
<td>集成显卡</td>
<td>Intel UHD Graphics 620</td>
</tr>
<tr class="even">
<td>网卡</td>
<td>Intel 9260AC</td>
</tr>
</tbody>
</table>
<h3 id="为什么选择arch-linux">为什么选择Arch Linux</h3>
<p><a class="link"   href="https://wiki.archlinux.org/index.php/Arch_Linux" >点击进入官方介绍页面<i class="fas fa-external-link-alt"></i></a></p>
<p>对我而言Arch Linux相效于其它发行版有以下几点优点：</p>
<ol type="1">
<li><p>极简的安装：安装完成后的Arch Linux仅有一百余个软件包，作为对比，Ubuntu通常有上千个包。</p></li>
<li><p>高度可定制化：事实上几乎任何GNU/Linux发行版都高度支持个性化定制，但Arch Linux相较其它发行版要更加方便。</p></li>
<li><p>最好用的包管理器：pacman几乎是公认的最好用的包管理器，也许还有其它不比它差的包管理器，但你很难找到一个比它更好的。</p></li>
<li><p>滚动更新：Arch Linux采用滚动更新机制，这意味着只要安装一次就可以一直使用最新版本的系统而不用重装。</p></li>
<li><p>最丰富的软件包：Arch Linux允许用户在AUR中发布自已的软件，这使得Arch Linux在软件包数量上远远领先其它发行版。</p></li>
</ol>
<p>另一方面，这些优点也意味着Arch Linux无法长时间停留在某一版本，安装更繁琐，且可能不如其它发行版稳定。用作个人桌面通常不用担心这些问题。</p>
<h2 id="安装基本系统的搭建">安装：基本系统的搭建</h2>
<h3 id="步骤">步骤</h3>
<p>首先需要下载Arch Linux的镜像文件，建议从国内的镜像源下载，比如：<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/" >清华大学开源软件镜像站<i class="fas fa-external-link-alt"></i></a>。</p>
<p>安装过程可能会随时产生变化，为防止步骤过期对读者造成误导，这里不再赘述，参看<a class="link"   href="https://wiki.archlinux.org/index.php/Installation_guide" >ArchWiki<i class="fas fa-external-link-alt"></i></a>即可。</p>
<h3 id="对wiki的一些补充">对wiki的一些补充</h3>
<ol type="1">
<li><p>EFI分区的格式是FAT32，使用<code>mkfs.fat -F32 /dev/sdxx</code>创建。</p></li>
<li><p>一些常用功能并未包含在core组中，需单独安装。如:</p></li>
</ol>
<ul>
<li>网络管理工具(NetworkManager)</li>
<li>sudo</li>
<li>vim</li>
</ul>
<ol start="3" type="1">
<li><p>若系统以BIOS模式启动，分区时记得为GRUB提前分配一个1M大小的分区，参照<a class="link"   href="https://wiki.archlinux.org/index.php/GRUB" >GRUB-ArchWiki<i class="fas fa-external-link-alt"></i></a>。</p></li>
<li><p>安装系统时建议直接安装linux-lts:</p>
<p>即<code>pacstrap /mnt base linux linux-firmware</code>这步换成<code>pacstrap /mnt base linux-lts linux-firmware</code></p></li>
</ol>
<h2 id="配置">配置</h2>
<h3 id="基本配置">基本配置</h3>
<p>参照<a class="link"   href="https://wiki.archlinux.org/index.php/General_recommendations" >General recommendations-ArchWiki<i class="fas fa-external-link-alt"></i></a>，完成用户、网络等设置，并安装xorg服务。</p>
<h3 id="yay">yay</h3>
<h4 id="安装">安装</h4>
<ol type="1">
<li>安装<code>base-devel</code>、<code>git</code>、<code>go</code></li>
<li>执行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="使用">使用</h4>
<ol type="1">
<li>安装包: <code>yay -S &lt;package name&gt;</code></li>
<li>搜索包: <code>yay -Ss &lt;package name&gt;</code></li>
</ol>
<p>详见man page: <code>man yay</code></p>
<h3 id="zsh-oh-my-zsh">zsh &amp;&amp; oh-my-zsh</h3>
<ol type="1">
<li><p>安装：<code>yay -S zsh oh-my-zsh-git</code></p></li>
<li><p>切换默认终端：<code>chsh -s /bin/zsh</code></p></li>
<li><p>配置可参考<a class="link"   href="https://wiki.archlinux.org/index.php/Zsh" >zsh-ArchWiki<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://github.com/ohmyzsh/ohmyzsh" >oh-my-zsh<i class="fas fa-external-link-alt"></i></a></p>
<ol type="1">
<li><p>复制配置文件：<code>cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</code></p></li>
<li><p>更改主题：<code>vim .zshrc</code>, 将<code>ZSH_THEME</code>的值改为<code>"agnoster"</code>或其它主题名称</p></li>
<li><p>安装powerline字体：<code>yay -S powerline-fonts-git</code></p></li>
</ol>
<p>此时还看不出效果，显示powerline字体需要图形界面。</p></li>
</ol>
<h3 id="梯子">梯子</h3>
<h4 id="trojan">Trojan</h4>
<ol type="1">
<li><p>安装<code>sudo pacman -S trojan</code></p></li>
<li><p>编辑配置文件/etc/trojan/config.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;run_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;local_addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;remote_addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your addr&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;remote_port&quot;</span><span class="punctuation">:</span> your addr port<span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="string">&quot;your password&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;log_level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;ssl&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;verify&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;verify_hostname&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;cert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;cipher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;cipher_tls13&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;sni&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;alpn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="string">&quot;h2&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">     <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;reuse_session&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;session_ticket&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;curves&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;no_delay&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;keep_alive&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;reuse_port&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;fast_open&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;fast_open_qlen&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">//通常来说除了上面三个值以外不必修改</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>启动服务<code>sudo systemctl start trojan.service</code></li>
<li>开机自启<code>sudo systemctl enable trojan.service</code></li>
</ol></li>
</ol>
<p>参照[ShadowSocks - ArchWiki]((https://wiki.archlinux.org/index.php/Shadowsocks)</p>
<h4 id="privoxy">Privoxy</h4>
<ol type="1">
<li><p>安装<code>sudo pacman -S privoxy</code></p></li>
<li><p>编辑配置文件/etc/privoxy/config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//只列出需要修改的值</span><br><span class="line">listem-address  127.0.0.1:8118</span><br><span class="line">forward-socks5  /  127.0.0.1:1080 .</span><br></pre></td></tr></table></figure>
<ul>
<li>注意第二行末尾的点</li>
</ul></li>
<li><p>启动服务<code>sudo systemctl start privoxy.service</code></p></li>
<li><p>开机自启<code>sudo systemctl enable privoxy.service</code></p></li>
</ol>
<p>参照<a class="link"   href="https://wiki.archlinux.org/index.php/Privoxy" >Privoxy - ArchWiki<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="配置命令行模式的代理">配置命令行模式的代理</h4>
<p>将以下内容添加进终端的配置文件.bashrc或.zshrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">	<span class="built_in">unset</span> http_proxy</span><br><span class="line">	<span class="built_in">unset</span> https_proxy</span><br><span class="line">	<span class="built_in">unset</span> ftp_proxy</span><br><span class="line">	<span class="built_in">unset</span> rsync_proxy</span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&quot;proxy off&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> proxy_on&#123;</span><br><span class="line">	<span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">	<span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> ftp_proxy=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> rsync_proxy=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> FTP_PROXY=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">export</span> RSYNC_PROXY=<span class="string">&quot;http://127.0.0.1:8118&quot;</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&quot;proxy on&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新登录就可以使用<code>proxy_on</code>/<code>proxy_off</code>来开启/关闭代理了</p>
<p>如果在进入图形界面之前开启了代理，那么进入图形界面后即为全局代理；反之，则默认不走代理，需要为应用单独配置。</p>
<h3 id="进军图形界面">进军图形界面</h3>
<h4 id="安装前准备">安装前准备</h4>
<ul>
<li><p>安装xorg-xinit，并将配置文件复制到主目录：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xorg-xinit</span><br><span class="line"><span class="built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc</span><br></pre></td></tr></table></figure></p>
<p>完成下面任一环境的配置后，使用<code>startx</code>进入图形界面</p>
<p><strong><em>不要用sudo来执行startx!</em></strong></p></li>
<li><p>安装一些字体</p>
<ul>
<li>基础</li>
</ul>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S ttf-dejavu ttf-liberation wqy-microhei wqy--zenhei</span><br></pre></td></tr></table></figure></p>
<ul>
<li>等宽</li>
</ul>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S ttf-monaco ttf-jetbrains-mono</span><br></pre></td></tr></table></figure></p>
<ul>
<li>图形</li>
</ul>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S ttf-font-awesome</span><br></pre></td></tr></table></figure></p></li>
<li><p>安装输入法</p>
<ol type="1">
<li><p>安装fcitx<code>sudo pacman -S fcitx fcitx-im</code></p></li>
<li><p>安装所用的输入法，例如：</p>
<ol type="1">
<li>sun拼音:<code>sudo pacman -S fcitx-sunpinyin</code></li>
<li>Google拼音:<code>sudo pacman -S fcitx-googlepinyin</code></li>
<li>搜狗输入法:<code>yay -S fcitx-sougoupinyin</code></li>
<li>五笔等:<code>sudo pacman -S fcitx-table-extra</code></li>
</ol></li>
<li><p>添加环境变量，在主目录新建一个文件~/.pam_environment，并加入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure></li>
</ol>
<p>参照<a class="link"   href="https://wiki.archlinux.org/index.php/Fcitx" >Fcitx - ArchWiki<i class="fas fa-external-link-alt"></i></a></p></li>
</ul>
<h4 id="i3-gaps">i3-gaps</h4>
<h5 id="安装-1">安装</h5>
<ol type="1">
<li><p>安装i3gaps: <code>yay -S i3-gaps</code></p></li>
<li><p>添加<code>exec i3</code>到.xinitrc文件的末尾</p></li>
<li><p>安装polybar:<code>yay -S polybar</code></p>
<ul>
<li>特别注意polybar使用的字体是fontawesome:<code>ttf-font-awesome</code></li>
</ul></li>
</ol>
<p>如果没有安装其它桌面环境，还需要以下基础工具：</p>
<ol type="1">
<li>终端摸拟器:<code>sudo pacman -S xfce4-terminal</code></li>
<li>剪贴板:<code>sudo pacman -S xfce4-clipman-plugin</code></li>
<li>截图工具:<code>sudo pacman -S xfce4-screenshooter</code></li>
<li>文件管理器:<code>sudo pacman -S thunar</code></li>
<li>回收站:<code>sudo pacman -S gvfs</code></li>
<li>压缩文件管理:<code>sudo pacman -S file-roller</code></li>
<li>锁屏:<code>yay -S i3lock-color</code></li>
<li>壁纸显示:<code>sudo pacman -S feh</code></li>
<li>桌面信息:<code>sudo pacman -S conky</code></li>
</ol>
<h5 id="附配置文件与官方文档">附配置文件与官方文档</h5>
<p><a class="link"   href="https://github.com/XilongYang/Arch-i3_configfile" >XilongYang/Arch-i3_configfile<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://i3wm.org/docs/userguide.html" >i3 User’s Guide<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/polybar/polybar/wiki" >polybar wiki<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的存储结构及其非层序遍历</title>
    <url>/blog/2020/04/24/0004-Binary_tree/</url>
    <content><![CDATA[<blockquote>
<p>二叉树是我接触的第一个非线性数据结构。在对它进行操作前，如何对其进行构建与遍历很自然地成为了首先要关心的问题。</p>
<p>这篇文章总结了：</p>
<ol type="1">
<li>二叉树的五个性质</li>
<li>如何存储一个二叉树</li>
<li>二叉树的先序、中序和后序遍历及其非递归实现</li>
<li>以及通过二叉树中序序列+先序/后序序列构建二叉树的方法</li>
<li>如何计算一对先序序列和后序序列可能表示的二叉树个数。</li>
</ol>
</blockquote>
<span id="more"></span>
<h2 id="二叉树的五个性质">二叉树的五个性质</h2>
<ol type="1">
<li><p>二叉树的第i层上至多有2^(i - 1)个结点</p></li>
<li><p>深度为k的二叉树至多有2^k - 1个结点</p></li>
<li><p>对任何一棵二叉树T, 其终端结点数 = 度为2的结点数 + 1</p></li>
<li><p>具有n个结点的完全二叉树深度为：log2(n) + 1</p>
<p>满二叉树：每一层结点数都为最大</p>
<p>完全二叉树：每一结点按层的编号都与对应的满二叉树一一对应</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422231103355.png" alt="" /><figcaption>image-20200422231103355</figcaption>
</figure>
<p><em>a.满二叉树 b.完全二叉树</em></p></li>
<li><p>对一颗有n个结点的完全二叉树，将其结点按层序编号i，有</p>
<ol type="1">
<li><p>i=1，则该结点为根结点，无双亲</p></li>
<li><p>2i&gt;n，则结点i无左孩子，否则其左孩子是2i</p></li>
<li><p>2i + 1 &gt; n则结点无右孩子，否则其右孩子是2i + 1</p></li>
</ol></li>
</ol>
<h2 id="二叉树的存储结构">二叉树的存储结构</h2>
<h3 id="顺序存储结构">1. 顺序存储结构</h3>
<p>将完全二叉树上序号为i的结点存在数组中标号为i - 1的地址中，如非完全二叉树，则空出来的地址留空。此时子结点用性质5即可得到。</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422233319114.png" alt="" /><figcaption>image-20200422233319114</figcaption>
</figure>
<p>上面三个二叉树的存储结构分别为：</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422233546201.png" alt="" /><figcaption>image-20200422233546201</figcaption>
</figure>
<p><em>(用0表示结点不存在)</em></p>
<p>可以看出，当二叉树不是完全二叉树时，这种结构非常浪费存储空间。因此仅适合用作完全二叉树的存储。</p>
<h3 id="链式存储结构">2. 链式存储结构</h3>
<p>二叉树用链表来存储是非常自然的，常见的有二叉链表和三叉链表。</p>
<h4 id="二叉链表">二叉链表</h4>
<p>二叉链表的组织形式：</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422234628192.png" alt="" /><figcaption>image-20200422234628192</figcaption>
</figure>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422234844999.png" alt="" /><figcaption>image-20200422234844999</figcaption>
</figure>
<h4 id="三叉链表">三叉链表</h4>
<p>三叉链表在二叉链表的基础上添加了指向父结点的指针，与二叉链表大同小异。</p>
<p>三叉链表的组织形式：</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422235517745.png" alt="" /><figcaption>image-20200422235517745</figcaption>
</figure>
<figure>
<img src="https://img.xilong.site/20200424/image-20200422235734363.png" alt="" /><figcaption>image-20200422235734363</figcaption>
</figure>
<h4 id="代码实现">代码实现</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *leftChild;</span><br><span class="line">    Node *rightChild;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125; *BinTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CreateBinTree</span><span class="params">(BinTree &amp;tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree = <span class="keyword">new</span> Node&#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Error While Create BinTree!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertChild</span><span class="params">(Node *aim, <span class="type">bool</span> left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *newNode = <span class="keyword">new</span> Node&#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(newNode == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Error While Add Note!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left)</span><br><span class="line">    &#123;</span><br><span class="line">        aim-&gt;leftChild = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        aim-&gt;rightChild = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DeleteChild</span><span class="params">(Node *aim, <span class="type">bool</span> left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(aim == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Node *preDel = (left) ? aim-&gt;left : aim-&gt;right;</span><br><span class="line">    <span class="keyword">if</span>(preDel != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(preDel-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DeleteChild</span>(preDel, left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preDel-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DeleteChild</span>(preDel, right);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">delete</span> preDel;</span><br><span class="line">        preDel = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left)</span><br><span class="line">    &#123;</span><br><span class="line">        aim-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        aim-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Visit</span><span class="params">(Bintree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二叉树的遍历">二叉树的遍历</h2>
<p>要遍历二叉树，可将二叉树分为三个部分，左子树(L)、根(D)、右子树(R)，并依次访问每个部分。若规定左子树一定先于右子树访问，则共有三种情况：DLR、LDR、LRD。分别称为前（先）序遍历、中序遍历和后序遍历。</p>
<p>这三种遍历的算法是递归描述的，如下：</p>
<h3 id="前序遍历">前序遍历</h3>
<h4 id="算法描述">算法描述</h4>
<p>若二叉树为空，则空操作，否则</p>
<ol type="1">
<li>访问根结点</li>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
</ol>
<h4 id="算法的递归实现">算法的递归实现</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DLR</span><span class="params">(BinTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Visit</span>(T) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">DLR</span>(T-&gt;left) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">DLR</span>(T-&gt;right) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="中序遍历">中序遍历</h3>
<h4 id="算法描述-1">算法描述</h4>
<p>若二叉树为空，则空操作，否则</p>
<ol type="1">
<li>中序遍历左子树</li>
<li>访问根结点</li>
<li>中序遍历右子树</li>
</ol>
<h4 id="算法的递归实现-1">算法的递归实现</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LDR</span><span class="params">(BinTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LDR</span>(T-&gt;left) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Visit</span>(T) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LDR</span>(T-&gt;right) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后序遍历">后序遍历</h3>
<h4 id="算法描述-2">算法描述</h4>
<p>若二叉树为空，则空操作，否则</p>
<ol type="1">
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根结点</li>
</ol>
<h4 id="算法的递归实现-2">算法的递归实现</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LRD</span><span class="params">(BinTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LRD</span>(T-&gt;left) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LRD</span>(T-&gt;right) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Visit</span>(T) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三种遍历的非递归实现">三种遍历的非递归实现</h3>
<h4 id="原理">原理</h4>
<p>由上面的描述可以看出用递归实现三种遍历是非常简洁自然的，然而在大部分情况下递归实现的性能开销大于非递归实现（函数反复调用以及系统堆栈带来的），因此在非常需要考虑性能时可以使用算法的非递归实现（算法的递归几乎都可以转化成非递归实现）。</p>
<p>为了实现非递归遍历，先来看看遍历过程中发生了什么。</p>
<p>在遍历过程中，每个结点有三次访问机会，即指针从父结点指向自身，从左孩子退回，从右孩子退回。这里我们不妨规定没有左/右孩子的结点仍能获得空指针退回的访问机会（即将空指针看做一个无法进入的孩子结点）。</p>
<figure>
<img src="https://img.xilong.site/20200424/image-20200423090748670.png" alt="" /><figcaption>image-20200423090748670</figcaption>
</figure>
<p>由于我们规定了左子树一定在右子树之前遍历，整个树的遍历顺序就如上图所示(a-&gt;b)。我们在每个结点的左侧、下侧和右侧分别设定一个触发点，并将它们在遍历路径中出现的顺序记录下来。</p>
<p>对于左触发点：ABDECFG</p>
<p>对于下触发点：DBEAFCG</p>
<p>对于右触发点：DEBFGCA</p>
<p>可以看出，它们分别是这个二叉树的前序序列、中序序列和后序序列。因此，实现正确的遍历顺序，并在合适的时机访问结点，就可以实现非递归地遍历二叉树。</p>
<h4 id="前序遍历和中序遍历">前序遍历和中序遍历</h4>
<p>前序遍历和中序遍历的实现相对后序遍历简单，描述为：</p>
<ol type="1">
<li>向左一路前进，若下一结点为空则退栈，否则将其压入栈中。</li>
<li>若指针是左子树退回，则进入右子树。若指针是右子树退回，则表示当前层遍历结束，继续退一层。这也意味着进入右子树时可以将当前结点直接退栈。</li>
<li>栈为空时，遍历完成。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LDR</span><span class="params">(BinTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个存储遍历信息的栈和一个用来遍历树的指针</span></span><br><span class="line">    stack&lt;Node*&gt; S;</span><br><span class="line">    Node *cur = T;</span><br><span class="line">    <span class="comment">//每访问一个结点就将结点出栈，因此以栈非空作为循环条件</span></span><br><span class="line">    <span class="comment">//最后出栈的必是一个叶子结点，因此指针的值在结束时必为nullptr</span></span><br><span class="line">    <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() || cur != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指针非空时一路向左走并将沿途结点压入栈中</span></span><br><span class="line">        <span class="comment">//指针为空则表示走到了当前路径的尽头，将最后入栈的结点出栈并令指针指向该结点的右子树</span></span><br><span class="line">        <span class="keyword">if</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S.<span class="built_in">push</span>(cur);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; cur-&gt;data; 前序时在此输出。</span></span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; cur-&gt;data; <span class="comment">//中序时在此输出。</span></span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：一路向左，非空则进。遇空出栈，右子代之。</p>
<h4 id="后序遍历-1">后序遍历</h4>
<p>在前面的代码中我们实际上省略了对指针是由左子树退回还是右子树退回的判断，直接在指针进入右子树时将当前结点出栈。对于前序遍历和中序遍历而言这样做并没有影响，因为它们的访问操作都在指针进入右子树之前。但是对于后序遍历显然是不行的，这里对上述算法进行改进：</p>
<ol type="1">
<li>指针非空时向左前进到底，若指针非空则压入栈中，初始化一个指针保存最近出栈的结点。</li>
<li>指针为空时令指针指向栈顶，进行判定，若指针的右子树存在且没有遍历过则进入右子树，否则输出指针所指元素并退栈。同时将指针置零以免将已退栈的元素重新入栈。</li>
<li>栈为空时，遍历完成。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LRD</span><span class="params">(BinTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;Node*&gt; S;</span><br><span class="line">    Node *cur = T;</span><br><span class="line">    <span class="comment">//存储最后退栈的元素</span></span><br><span class="line">    Node *lastPop = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() || cur != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">//非空时向左前进到底</span></span><br><span class="line">        <span class="keyword">if</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; cur-&gt;data; 仍然可用于前序遍历</span></span><br><span class="line">            S.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur = S.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">//判定当前结点是否存在右子树以及右子树是否遍历过</span></span><br><span class="line">            <span class="comment">//此处是否存在的判定是必要的，否则当lastPop非空而当前结点又不存在右子树时，</span></span><br><span class="line">            <span class="comment">//将导致指针不断尝试进入不存在的右子树引发死循环</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;right != lastPop)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; cur-&gt;data; 中序遍历输出根结点</span></span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//右子树不存在或已遍历过，输出根结点并退栈</span></span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                cout &lt;&lt; cour-&gt;data;</span><br><span class="line">                <span class="comment">//if(cur-&gt;right == nullptr) cout &lt;&lt; cur-&gt;data; 中序遍历输出叶子结点</span></span><br><span class="line">                <span class="comment">//令lastPop指向最后退栈结点，将cur指针置0以免下一轮循环将已退栈的结点重新入栈</span></span><br><span class="line">                lastPop = cur;</span><br><span class="line">                cur = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：一路向左，非空则进，遇空判定，有右则进，无右则出，不忘置零。</p>
<h3 id="图解后序遍历的非递归算法">图解后序遍历的非递归算法</h3>
<figure>
<img src="https://img.xilong.site/20200424/LRD.gif" alt="" /><figcaption>LRD</figcaption>
</figure>
<p>精力有限，只好挑一个难度最大的做图解。</p>
<h2 id="通过中序序列前序后序序列构建二叉树">通过中序序列+前序/后序序列构建二叉树</h2>
<h3 id="原理-1">原理</h3>
<ul>
<li><p>前序序列中任一子树以根结点-左子树-右子树的结构排列。</p></li>
<li><p>中序序列中任一子树以左子树-根结点-右子树的结构排列。</p></li>
<li><p>后序序列中任一子树以左子树-右子树-根结点的结构排列。</p></li>
</ul>
<p>根据以上性质，可以得到算法：</p>
<ol type="1">
<li>从前/后序序列中取首/尾元素，确定树的根结点</li>
<li>在中序序列中搜索根结点，确定左子树和右子树</li>
<li>对左子树和右子树分别重复这个过程，直到不可再分</li>
</ol>
<h4 id="图解以前序-中序构建为例">图解：以前序-中序构建为例</h4>
<figure>
<img src="https://os.xilong.site/root/image/20200424/image-20200424000842475.png" alt="" /><figcaption>image-20200424000842475</figcaption>
</figure>
<figure>
<img src="https://img.xilong.site/20200424/Build.jpg" alt="" /><figcaption>build</figcaption>
</figure>
<h3 id="代码实现-1">代码实现</h3>
<p>前序-中序构建二叉树</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据前序-中序序列构建二叉树，代码是通过递归实现的</span></span><br><span class="line"><span class="comment">//SI是string::iterator类型，函数的四个参数分别指向</span></span><br><span class="line"><span class="comment">//前序序列p的首元素和尾后元素，中序序列m的首元素和尾后元素</span></span><br><span class="line"><span class="function">BinTree <span class="title">Pre_Mid_Build</span><span class="params">(SI p_begin, SI p_end, SI m_begin, SI m_end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用前序序列的首元素初始化一个仅有根结点的树</span></span><br><span class="line">    Node *boot = <span class="keyword">new</span> Node&#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, *p_begin&#125;;</span><br><span class="line">    <span class="comment">//左子树的前序序列首元素地址为当前前序序列的首元素地址+1</span></span><br><span class="line">    <span class="comment">//中序序列的首元素地址和当前中序序列相同</span></span><br><span class="line">    <span class="keyword">auto</span> left_p_begin = p_begin + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//左子树中序序列的尾后地址为根结点在当前中序序列中出现的位置</span></span><br><span class="line">    <span class="comment">//搜索当前中序序列求出，并求出左子树的长度</span></span><br><span class="line">    <span class="keyword">auto</span> left_m_end = m_begin;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*left_m_end != *p_begin)</span><br><span class="line">    &#123;</span><br><span class="line">        ++left_m_end;</span><br><span class="line">        ++num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用左子树的长度求出左子树前序序列的尾后迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> left_p_end = left_p_begin + num;</span><br><span class="line">    <span class="comment">//若左子树存在，递归构建左子树</span></span><br><span class="line">    <span class="keyword">if</span>(m_begin != left_m_end) </span><br><span class="line">    &#123;</span><br><span class="line">        boot-&gt;left = <span class="built_in">Pre_Mid_Build</span>(left_p_begin, left_p_end, m_begin, left_m_end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右子树的迭代器比较方便取得</span></span><br><span class="line">    <span class="keyword">auto</span> right_p_begin = left_p_end;</span><br><span class="line">    <span class="keyword">auto</span> right_m_begin = left_m_end + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//若右子树存在，递归构建右子树</span></span><br><span class="line">    <span class="keyword">if</span>(right_m_begin != m_end)</span><br><span class="line">    &#123;</span><br><span class="line">        boot-&gt;right = <span class="built_in">Pre_Mid_Build</span>(right_p_begin, p_end, right_m_begin, m_end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> boot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中序-后序构建二叉树</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码与前序-中序大同小异，不再写注释</span></span><br><span class="line"><span class="function">BinTree <span class="title">Post_Mid_Build</span> <span class="params">(SI p_begin, SI p_end, SI m_begin, SI m_end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *boot = <span class="keyword">new</span> Node&#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, *(p_end - <span class="number">1</span>)&#125;;</span><br><span class="line">    <span class="keyword">auto</span> left_m_end = m_begin;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*left_m_end != *(p_end - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ++left_m_end;</span><br><span class="line">        ++num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> left_p_end = p_begin + num;</span><br><span class="line">    <span class="keyword">if</span>(m_begin != left_m_end) </span><br><span class="line">    &#123;</span><br><span class="line">        boot-&gt;left = <span class="built_in">Post_Mid_Build</span> (p_begin, left_p_end, m_begin, left_m_end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> right_p_begin = left_p_end;</span><br><span class="line">    <span class="keyword">auto</span> right_p_end = p_end - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> right_m_begin = left_m_end + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(right_m_begin != m_end)</span><br><span class="line">    &#123;</span><br><span class="line">        boot-&gt;right = <span class="built_in">Post_Mid_Build</span> (right_p_begin, right_p_end, right_m_begin, m_end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> boot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计算一对先序序列和后序序列可能表示的二叉树个数">计算一对先序序列和后序序列可能表示的二叉树个数</h2>
<h3 id="原理-2">原理</h3>
<ul>
<li><p>前序序列中任一子树以根结点-左子树-右子树的结构排列。</p></li>
<li><p>后序序列中任一子树以左子树-右子树-根结点的结构排列。</p></li>
</ul>
<p>可能混淆的情况有：根（左/右）+（左/右）根。</p>
<p>可以知道，前序序列与后序序列中任何有两个子树的树都是确定的。而每一对仅一个子树的树将有两种可能结构。</p>
<p>因此只要求出序列对中有多少对无法确定的子树即可，很容易发现这样的树对以AB &amp; BA的方式存在。只要搜索两个序列即可。</p>
<h3 id="代码">代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为要用到位运算， 使用无符号类型</span></span><br><span class="line"><span class="keyword">using</span> UL = <span class="type">unsigned</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string pre, post;</span><br><span class="line">    cin &gt;&gt; pre &gt;&gt; post;</span><br><span class="line">    <span class="comment">//搜索并计数</span></span><br><span class="line">    UL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(UL i = <span class="number">0</span>; i &lt; pre.<span class="built_in">length</span>() - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(UL j = <span class="number">1</span>; j &lt; post.<span class="built_in">length</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[i] == post[j] &amp;&amp; pre[i + <span class="number">1</span>] == post[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                ++sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    UL base = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//位运算计算2的次幂方便且快速，注意括号</span></span><br><span class="line">    cout &lt;&lt; (base&lt;&lt;sum) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>基于C++的Python3入门笔记</title>
    <url>/blog/2020/06/07/0005-Python3:Getting_started_base_on_C++/</url>
    <content><![CDATA[<blockquote>
<p>前言：虽然Python与C++有众多区别，但基本上同属命令式语言（甚至Python的解释器是C++实现的），因此在不求深入学习Python时记住一些基础语法差异即可大概使用。</p>
</blockquote>
<span id="more"></span>
<h2 id="基本区别">基本区别</h2>
<p>python中以缩进（4个空格）而不是花括号区分代码块。</p>
<p>python中以换行而不是分号区分语句</p>
<p>python中不需要main函数，从代码第一行开始执行</p>
<h3 id="注释">注释</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释：井号+空格</span></span><br><span class="line"><span class="comment"># 多行注释本质上是野生三引号字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释1:三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释2:三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="变量">变量</h2>
<h3 id="数值">数值</h3>
<p>python是动态类型语言，定义变量时无需指定类型，且程序运行过程中可改变类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">f = <span class="number">2.3</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">f = <span class="string">&#x27;change to string&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串">字符串</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单引号</span></span><br><span class="line"><span class="string">&#x27;Hello&quot;&quot;Wo\&#x27;\&#x27;rld&#x27;</span> <span class="comment"># Hello&quot;&quot;Wo&#x27;&#x27;rld</span></span><br><span class="line"><span class="comment"># 双引号</span></span><br><span class="line"><span class="string">&quot;Hello&#x27;&#x27;Wo\&quot;\&quot;rld&quot;</span> <span class="comment">#Hello&#x27;&#x27;Wo&quot;&quot;rld</span></span><br><span class="line"><span class="comment"># 单双引号唯一的区别是其中包含哪种引号时需要转义</span></span><br><span class="line"><span class="comment"># 三引号包含单双引号都不用转义，可作注释用</span></span><br></pre></td></tr></table></figure>
<p>格式化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 占位符</span></span><br><span class="line"><span class="string">&#x27;Hello,%s %d %.2f, %02d&#x27;</span> % (<span class="string">&#x27;World!&#x27;</span>, <span class="number">123</span>, <span class="number">3.14159</span>, <span class="number">1</span>) <span class="comment"># Hello,World! 123 3.14 01</span></span><br><span class="line"><span class="comment"># format(),用&#123;0&#125;&#123;1&#125;...当占位符</span></span><br><span class="line"><span class="string">&#x27;Hello,&#123;0&#125;:&#123;1:.1f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;World!&#x27;</span>, <span class="number">3.14159</span>) <span class="comment"># Hello,World:3.1</span></span><br></pre></td></tr></table></figure>
<h3 id="listtuple和dictset">list、tuple和dict、set</h3>
<h4 id="定义">定义</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># []、()、&#123;&#125;、([])</span></span><br><span class="line"><span class="comment"># list用[]定义, 可变长，可变元素值，可用下标位序取值</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># tuple用()定义，不可变长，不可变元素值，可用下标位序取值</span></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">t1 = (<span class="number">1</span>, ) <span class="comment"># 若无逗号则为整数1</span></span><br><span class="line"><span class="comment"># dict用&#123;&#125;定义， 类似c++的map; set用([])定义，类似set</span></span><br><span class="line">d = &#123;a:<span class="number">1</span>, <span class="number">2</span>:b, <span class="number">3</span>:c&#125; <span class="comment"># d[a] = 1, d[2] = b, d[3] = c</span></span><br><span class="line">s = ([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment"># set自动去重，s = &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="操作">操作</h4>
<ol type="1">
<li>list
<ol type="1">
<li>l.append(): push_back</li>
<li>l.pop():pop_back</li>
<li>l.pop(i):erase(i)</li>
<li>l.insert(pos, vue)</li>
</ol></li>
<li>dict
<ol type="1">
<li>'keyvalue' in d //d中是否存在key值为‘keyvalue’</li>
<li>d.get('keyvalue', -1) //无'keyvalue'时返回-1，没有第二个参数则无返回值</li>
<li>d.pop('keyvalue') //删除keyvalue</li>
</ol></li>
<li>set
<ol type="1">
<li>add(key)</li>
<li>remove(key)</li>
</ol></li>
</ol>
<h2 id="运算符">运算符</h2>
<ul>
<li>算术运算符：+ - * / % **(幂) //(整除)</li>
<li>比较运算符：== != &gt; &lt; &gt;= &lt;=</li>
<li>赋值运算符：= 算术=</li>
<li>位运算符：&amp; | ^ ~ &lt;&lt; &gt;&gt;</li>
<li>逻辑运算符：and or not</li>
<li>成员运算符：in not in</li>
<li>身份运算符：is is not //判断两对象地址是否相同</li>
</ul>
<h2 id="分支与循环">分支与循环</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if-else语句</span></span><br><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 占位用关键字，不执行任何操作</span></span><br><span class="line"><span class="keyword">elif</span> condition:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 范围for</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 可用range(10)生成0-9的列表</span></span><br><span class="line"><span class="comment"># while</span></span><br><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    psss</span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dont_Do_Anything</span>(<span class="params">x, y</span>)</span><br><span class="line">	<span class="keyword">return</span> x, y</span><br><span class="line"><span class="comment">#隐式返回一个元组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Default_Function</span>(<span class="params">x, y=<span class="number">2</span></span>)</span><br><span class="line">	<span class="keyword">return</span> x**y;</span><br><span class="line"><span class="comment">#默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add_End</span>(<span class="params">L</span>)</span><br><span class="line">	L.append(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"><span class="comment">#多次调用会出现&#123;End, End, End&#125;，原因：参数并非临时变量，故而改进</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add_End_Fixed</span>(<span class="params">L=<span class="literal">None</span></span>)</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calc</span>(<span class="params">*numbers</span>)</span><br><span class="line">	<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="comment">#可变数量参数，隐式生成一个tuple, 已有list或tuple可直接前加*传入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;key&#x27;</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数，调用时连关键字一同写入，如person(&#x27;Jack&#x27;, 23, city=&#x27;Heaven&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, *, city, age</span>)</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, *age, city</span>)</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 命名关键字参数，跟在可变数量参数或一个空*参数后，只能传入指定关键字</span></span><br></pre></td></tr></table></figure>
<h2 id="类">类</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">My_Class</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>): <span class="comment"># 前后各2下划线，类内任何函数首参数都为self</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score <span class="comment">#前置2下划线则私有，仍可通过._My_Class__score访问</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get_Name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">    Sex = <span class="string">&#x27;Male&#x27;</span></span><br><span class="line"><span class="comment"># 括号内表示父类，object是python中的根基类；__init__()相当于构造函数</span></span><br><span class="line"><span class="comment"># 构造函数外的属性相当于static成员</span></span><br><span class="line"></span><br><span class="line">mc = MyClass(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">70</span>)</span><br><span class="line">mc.age = <span class="number">10</span></span><br><span class="line"><span class="comment"># 通过构造函数来实例化类对象，可以给对象添加属性</span></span><br><span class="line"><span class="comment"># 使用del mc.age删除属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mumei</span>(<span class="title class_ inherited__">My_Class</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get_Name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__score)</span><br><span class="line"><span class="comment"># 子类通过定义同名函数来重载基类函数</span></span><br><span class="line"><span class="comment"># 用函数isinstance(a, type)判断对象的类型是否为type， 使用type(a)得到对象类型</span></span><br><span class="line"><span class="comment"># 使用dir(a)获得对象的所有属性和方法</span></span><br><span class="line"><span class="comment"># 使用hasattr(obj, &#x27;sth&#x27;)判断是否有属性sth</span></span><br><span class="line"><span class="comment"># 使用getattr(obj, &#x27;sth&#x27;)取属性地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Name</span>(<span class="params">MC</span>):</span><br><span class="line">    MC.Get_Name()</span><br><span class="line">    </span><br><span class="line">mumei = Mumei(<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">Name(mc)</span><br><span class="line">Name(mumei)</span><br><span class="line"><span class="comment"># 对基类和子类通用</span></span><br><span class="line"></span><br><span class="line">other = Other_Class(<span class="string">&#x27;Jerry&#x27;</span>)</span><br><span class="line">Name(other)</span><br><span class="line"><span class="comment"># 任何有Get_Name的对象都可调用</span></span><br></pre></td></tr></table></figure>
<h2 id="高级特性">高级特性</h2>
<h3 id="切片">切片</h3>
<p>取一个list或tuple的部分元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">L[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 取&#123;1, 2&#125;即下标范围[0,2)的元素</span></span><br><span class="line">L[:<span class="number">2</span>] <span class="comment"># 第一个参数为0时可省略</span></span><br><span class="line">L[-<span class="number">1</span>] <span class="comment"># 取倒数第一个元素</span></span><br><span class="line">L[-<span class="number">2</span>:-<span class="number">1</span>] <span class="comment"># 取倒数两个元素</span></span><br><span class="line">L[-<span class="number">2</span>:] <span class="comment">#-1可省略</span></span><br></pre></td></tr></table></figure>
<h3 id="列表生成式">列表生成式</h3>
<p>用[express]生成一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)] <span class="comment"># 1x1,2x2...10x10</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>] <span class="comment"># 2x2,4x4...10x10</span></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;DEF&#x27;</span>] <span class="comment"># ABC与DEF的全排列</span></span><br><span class="line"><span class="comment"># 当if出现在for后面时，不可带else</span></span><br><span class="line"><span class="comment"># 当if出现在fot前面时，必须带else</span></span><br></pre></td></tr></table></figure>
<h3 id="生成器">生成器</h3>
<p>生成器仅存储一个生成方法而不是具体对象，有肋于节省空间。</p>
<p>方法1: 用(express)生成一个生成器(generator)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<p>方法2: 用函数来生成一个生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出斐波那契数列的函数如下</span></span><br><span class="line"><span class="comment"># a, b = b, a + b =&gt; a, b = (b, a + b) =&gt; a = b  b = a + b(a与b的值同时改变)</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把上述函数改成generator, 仅需将print(b)换成yield b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">f = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux平台下C++库的生成与使用</title>
    <url>/blog/2020/06/07/0006-Creating_and_using_library_in_linux/</url>
    <content><![CDATA[<blockquote>
<p>学习C++也有一段时间了，却一直不太了解库相关的知识，今天得空学习了一些基础用法，在此记录。</p>
<p>内容包含：</p>
<p>1.什么是库(library)？静态库与动态库的区别与优缺点</p>
<p>3.静态库的生成与使用</p>
<p>4.动态库的生成与使用</p>
</blockquote>
<span id="more"></span>
<h2 id="什么是库">什么是库</h2>
<h3 id="编译连接从源码到程序">编译连接：从源码到程序</h3>
<figure>
<img src="https://img.xilong.site/20200607/image-20200607222237087.png" alt="" /><figcaption>image-20200607222237087</figcaption>
</figure>
<p>上图展示了C++程序的生成过程。可以看到库文件和目标代码一起被处理，可见库文件与目标代码之间应该具有某种联系。</p>
<h3 id="库目标文件的打包">库：目标文件的打包</h3>
<p>事实上，库文件就是将一些目标文件打包而成的文件。这些文件往往与作为接口的头文件一起提供给程序使用。程序在使用库文件时不需要对文件中实现的内容进行重复编译，可以提高开发效率。</p>
<p>库又分为静态库与动态库。</p>
<h4 id="静态库">静态库</h4>
<p>静态库在Linix系统中通常以.a作为后缀，而在Windows中以.lib作为后缀。</p>
<p>静态库在链接过程中将自身拷贝到最终的可执行文件中，因此可执行文件运行时并不需要该库参与。即使用静态库生成的文件是独立的，并不依赖于它所使用的静态库。这无疑为软件的分发提供了很大的方便。</p>
<p>另一方面，这样的使用方式令生成程序所需时间大大增加，同时大幅增加了可执行文件的体积。且每当库发生改动时就要重新生成整个程序。不利于开发。</p>
<h4 id="动态库">动态库</h4>
<p>动态库在Linux系统中通常以.so作为后缀，在Windows中以.dll作为后缀。</p>
<p>动态库在链接过程中不把自身拷贝到可执行文件中，而是写入一些重定位和符号表信息。这样生成的可执行文件运行时必需要有库的存在，否则无法运行。这给分发软件造成了一些目标机器环境配置的麻烦。</p>
<p>然而，动态库大大缩减了链接所需时间和可执行程序的体积，在接口没有改动时即使改动了库文件也无需重新生成可执行文件，实现了增量修改。给开发带来了很大的便利。</p>
<h4 id="小结">小结</h4>
<ol type="1">
<li>静态链接的可执行文件可以独立运行，而动态链接不可以。</li>
<li>静态链接的可执行文件体积通常大于动态链接。</li>
<li>静态链接的链接速度小于动态链接</li>
<li>静态链接的可执行文件运行效率略高于动态链接</li>
<li>库文件发生改动时，静态链接生成的可执行文件必需重新生成，而动态链接不用。</li>
</ol>
<h2 id="静态库的生成与使用">静态库的生成与使用</h2>
<h3 id="编写静态库源码并生成目标代码">编写静态库源码并生成目标代码</h3>
<p>创建静态库文件夹static，并新建静态库源代码./static/test.cc</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./static/test.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Say_Hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello Static Library!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译源码，生成目标文件test.o</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -c ./static/test.cpp -o ./static/test.o</span><br></pre></td></tr></table></figure>
<h3 id="将目标代码打包成库文件">将目标代码打包成库文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 库通常以libxxx.a命名</span></span><br><span class="line">ar -rcs ./static/libtest.a ./static/test.o</span><br></pre></td></tr></table></figure>
<h3 id="为使用者提供接口">为使用者提供接口</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./static/test.h</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Say_Hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用静态库">使用静态库</h3>
<p>创建main.cc</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./main.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./static/test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Say_Hello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成并运行可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -L指定库所在路径，-l指定库名称无需lib与后缀</span></span><br><span class="line">g++ -o main main.cc -L./static -ltest</span><br><span class="line">./main</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Static Library!</span><br></pre></td></tr></table></figure>
<h2 id="动态库的生成与使用">动态库的生成与使用</h2>
<h3 id="编写动态库源码并生成目标代码">编写动态库源码并生成目标代码</h3>
<p>创建静态库文件夹dynamic，并新建静态库源代码./dynamic/test.cc</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./dynamic/test.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Say_Hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello Dynamic Library!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="制作动态库">制作动态库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态库通常以libxxx.so命名</span></span><br><span class="line">g++ ./dynamic/test.cc -fPIC -shared -o libtest.so</span><br></pre></td></tr></table></figure>
<h3 id="为使用者提供接口-1">为使用者提供接口</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./dynamic/test.h</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Say_Hello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用动态库">使用动态库</h3>
<p>创建main.cc</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./main.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./dynamic/test.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Say_Hello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成并运行可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -L指定库所在路径，-l指定库名称</span></span><br><span class="line">g++ -o main main.cc -L./dynamic -ltest</span><br><span class="line">./main</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main: error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<p>找不到<code>libtest.so</code>，这是因为linux是通过<code>/etc/ld.so.config</code>文件中的路径搜寻动态库的。解决方法：</p>
<ol type="1">
<li>把<code>libtest.so</code>所在的路径添加进<code>/etc/ld.so.config</code>，再运行<code>idconfig</code>更新目录，程序就可以正常运行了。</li>
<li>把<code>libtest.so</code>复制到<code>/usr/lib</code>，再运行程序。</li>
<li>改变坏境变量<code>export LD_LIBRARY_PATH=./dynamic</code>，再运行程序。</li>
</ol>
<p>由于这个程序仅作实验用，故不推荐用前两种方式改动系统设置。此处用方法3:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=./dynamic</span><br><span class="line">./main</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Dynamic Library!</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>库是将源码打包而形成的，以链接进其它程序的方式进行使用的文件形式。分为静态库和动态库。静态库具有链接慢，空间成本高，不易更新的缺点，优点是能够生成独立的可执行文件。动态库易于更新扩展，链接快，空间成本低，但生成的文件必需依赖库运行。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NC15553题解</title>
    <url>/blog/2020/10/11/0007-NC15553/</url>
    <content><![CDATA[<blockquote>
<p>NC15553 数学考试，对理解前缀和与枚举很有好处。 题目链接：<a class="link"   href="https://ac.nowcoder.com/acm/problem/15553" >NC15553 数学考试——牛客网<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<span id="more"></span>
<h2 id="题目描述">题目描述</h2>
<p>今天qwb要参加一个数学考试，这套试卷一共有n道题，每道题qwb能获得的分数为ai，qwb并不打算把这些题全做完， 他想选总共2k道题来做，并且期望他能获得的分数尽可能的大，他准备选2个不连续的长度为k的区间, 即[L,L+1,L+2,....,L+k-1]，[R,R+1,R+2,...,R+k-1]（R &gt;= L+k）。</p>
<h3 id="输入描述">输入描述:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一行一个整数T（T&lt;=10）,代表有T组数据</span><br><span class="line">接下来一行两个整数n,k,(1&lt;=n&lt;=200,000),(1&lt;=k,2k &lt;= n)</span><br><span class="line">接下来一行n个整数a1,a2,...,an，（-100,000&lt;=ai&lt;=100,000）</span><br></pre></td></tr></table></figure>
<h3 id="输出描述">输出描述:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出一个整数，qwb能获得的最大分数</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例:</h3>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">6 3</span><br><span class="line">1 1 1 1 1 1</span><br><span class="line">8 2</span><br><span class="line">-1 0 2 -1 -1 2 3 -1</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure>
<h2 id="分析">分析</h2>
<p>首先需要解决的是如何确定一个区间。一个区间显然可以用[左端点, 右端点]这样的数对来确定，而本题中区间的长度是给定的，因此只要用左端点与右端点中的一个点就能确定一个区间，这里我们选用左端点。</p>
<p>然后考虑暴力解法，这题如果用暴力来做，需要O(n<sup>2)的复杂度遍历每种可能的区间组合。以及O(k)的复杂度计算每个区间的和。则总的时间复杂度为O(kn</sup>2)，最坏情况下kn^2 = 4 x 10^15，显然无法在可接受的时间内完成运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//main</span><br><span class="line">//暴力枚举区间组合，求解最大值</span><br><span class="line">for(i : n - k)</span><br><span class="line">&#123;</span><br><span class="line">	for(j = i + k : n - k)</span><br><span class="line">	&#123;</span><br><span class="line">		//Sum为求和函数</span><br><span class="line">		maxCount = max(maxCount, Sum(i) + Sum(j))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//Sum(i)</span><br><span class="line">&#123;</span><br><span class="line">	count = 0</span><br><span class="line">	for(i : i + k)</span><br><span class="line">	&#123;</span><br><span class="line">		count += a[i]</span><br><span class="line">	&#125;</span><br><span class="line">	return count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见区间的和可以想到前缀和，通过维护一个前缀和来将每个区间的和的计算时间复杂度降为O(1)，这样整个问题的时间复杂度就降为了枚举的O(n<sup>2)，最坏情况下n</sup>2 = 4 x 10^10，仍然无法在可接受的时间内完成运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//main</span><br><span class="line">//暴力枚举区间组合，求解最大值</span><br><span class="line">for(i : n - k)</span><br><span class="line">&#123;</span><br><span class="line">	for(j = i + k : n - k)</span><br><span class="line">	&#123;</span><br><span class="line">		//sum为维护的区间和</span><br><span class="line">		maxCount = max(maxCount, sum[i] + sum[j]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们规定j一定大于i，由此观察遍历过程</p>
<figure>
<img src="https://img.xilong.site/20201011/image-20201011145807948.png" alt="" /><figcaption>image-20201011145807948</figcaption>
</figure>
<p>两次遍历中有很多重合部分，对于寻找最大值而言是没有必要的。因为若前进一步后的i' &lt; i，则它们分别加上同一个数后大小关系不变。而变化后i仍在有效取值范围内，因此，维护一个maxi的值即可省略对灰色部分的遍历。</p>
<figure>
<img src="https://img.xilong.site/20201011/image-20201011151108260.png" alt="" /><figcaption>image-20201011151108260</figcaption>
</figure>
<p>对于j'以后的值无需判断，因为max'定不小于max且j'后的值max和max'都可取用，所以不可能存在max + jx &gt; max' + jx（jx在j'之后）。</p>
<figure>
<img src="https://img.xilong.site/20201011/image-20201011152355021.png" alt="" /><figcaption>image-20201011152355021</figcaption>
</figure>
<p>因此我们仅需考虑这一部分，其中对于step2，max' + j'即是这一步的最大值，将其与上一步的最大值比较来更新maxCount，再将step2看做step1对其进行相同操作，最后即可求出maxCount的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxi = sum[0];</span><br><span class="line">maxCount = maxi + sum[k];</span><br><span class="line">for(i : n - k)</span><br><span class="line">&#123;</span><br><span class="line">	maxi = max(maxi, sum[i]);</span><br><span class="line">	maxCount = max(maxCount, maxi + sum[i + k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度O(n)，满足题目要求。</p>
<h2 id="源码">源码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll infinity = <span class="number">3e10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="comment">//输入时即维护前缀和</span></span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">sum</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        cin &gt;&gt; sum[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; sum[i];</span><br><span class="line">            sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//跟据前缀和求出每个区间的和</span></span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">kSum</span><span class="params">(n + <span class="number">1</span> - k, <span class="number">0</span>)</span></span>;</span><br><span class="line">        kSum[<span class="number">0</span>] = sum[k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt; n + <span class="number">1</span> - k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            kSum[i] = sum[i - <span class="number">1</span> + k] - sum[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举求最大值</span></span><br><span class="line">        ll curMax = infinity * <span class="number">-1</span>;</span><br><span class="line">        ll count = infinity * <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> * k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            curMax = <span class="built_in">max</span>(curMax, kSum[i]);</span><br><span class="line">            count = <span class="built_in">max</span>(count, curMax + kSum[i + k]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>前缀和</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Haskell解决四柱汉诺塔问题</title>
    <url>/blog/2021/01/27/0008-Haskell:Four_Pillar_Tower_of_Hanoi/</url>
    <content><![CDATA[<blockquote>
<p>初学Haskell，在做 <a class="link"   href="https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf" >CIS 194 HomeWork1<i class="fas fa-external-link-alt"></i></a>时遇到的四柱汉渃塔最优解问题。过程中对递归与函数式编程产生了许多新的理解，在此做一下记录。</p>
</blockquote>
<span id="more"></span>
<h2 id="回顾汉诺塔是什么">回顾：汉诺塔是什么？</h2>
<blockquote>
<p>The Towers of Hanoi is a classic puzzle with a solution that can be described recursively. Disks of different sizes are stacked on three pegs; the goal is to get from a starting configuration with all disks stacked on the first peg to an ending configuration with all disks stacked on the last peg, as shown in Figure 1.</p>
<p><img src="https://img.xilong.site/20210415/image-20210127013232812.png" alt="image-20210127013232812" style="zoom:33%;" /></p>
<p>​ Figure 1: The Towers of Hanoi The only rules are • you may only move one disk at a time, and • a larger disk may never be stacked on top of a smaller one. For example, as the first move all you can do is move the topmost, smallest disk onto a different peg, since only one disk may be moved at a time.</p>
<p><img src="https://img.xilong.site/20210415/image-20210127013307704.png" alt="image-20210127013307704" style="zoom:50%;" /></p>
<p>​ Figure 2: A valid first move. From this point, it is illegal to move to the configuration shown in Figure 3, because you are not allowed to put the green disk on top of the smaller blue one.</p>
<p><img src="https://img.xilong.site/20210415/image-20210127013331098.png" alt="image-20210127013331098" style="zoom:50%;" /></p>
<p>​ Figure 3: An illegal configuration. To move n discs (stacked in increasing size) from peg a to peg b using peg c as temporary storage,</p>
<ol type="1">
<li>move n − 1 discs from a to c using b as temporary storage</li>
<li>move the top disc from a to b</li>
<li>move n − 1 discs from c to b using a as temporary storage.</li>
</ol>
</blockquote>
<p>这东西相信大家都非常熟悉了，不多缀言。下面进入第一个问题，使用Haskell求解汉诺塔。</p>
<h2 id="haskell求解汉诺塔">Haskell求解汉诺塔</h2>
<blockquote>
<p>Given the number of discs and names for the three pegs, hanoi should return a list of moves to be performed to move the stack of discs from the first peg to the second.</p>
</blockquote>
<p>先上代码：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Peg</span> = <span class="type">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Move</span> = (<span class="type">Peg</span>, <span class="type">Peg</span>)</span></span><br><span class="line"><span class="comment">-- hanoi numOfDiscs-&gt;originPeg-&gt;targetPeg-&gt;otherPeg-&gt;moves</span></span><br><span class="line"><span class="title">hanoi</span> :: <span class="type">Integer</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;[<span class="type">Move</span>]</span><br><span class="line"><span class="title">hanoi</span> <span class="number">0</span> a b c = []</span><br><span class="line"><span class="title">hanoi</span> n a b c = hanoi (n - <span class="number">1</span>) a c b ++ [(a, b)] ++ hanoi (n - <span class="number">1</span>) c b a</span><br></pre></td></tr></table></figure>
<p>这几行程序没费什么力，使我深深地体会到了Haskell的简洁与优雅，这种写法实在是太漂亮了。这里用了很简单的一个思路，hanoi n a b c表示由a柱，经c柱移动n个盘子到b柱。</p>
<p><code>hanoi n a b c = hanoi (n - 1) a c b ++ [(a, b)] ++ hanoi (n - 1) c b a</code></p>
<p>这句代码表达先把上层 n - 1个盘子由a柱移动到c柱，再把最底层盘子直接移动到b柱，最后把c柱上的盘子也移动到b柱。Haskell这种写法在简洁与表达力上实在是令我惊叹。</p>
<h2 id="再来一根四柱汉诺塔问题">再来一根：四柱汉诺塔问题</h2>
<p>顾名思义，四柱汉诺塔就是在三柱汉诺塔的基础上再加一根柱子。同样是求将一根柱子上的盘子全部移动到另一根上的过程序列。</p>
<p>解四柱汉诺塔的基本思路是由a柱，经过b柱、d柱的辅助，将一部分盘子移动到c柱。</p>
<p>由于所有先移出去的盘子一定比剩下任一的盘子小，在移动剩下的盘子时就无法再借助c柱了，问题变成两个三柱汉诺塔问题：</p>
<ol type="1">
<li>由a柱经过b柱的辅助将除最下层盘子外的盘子移动到d柱；</li>
<li>将最下层盘子移动到b柱；</li>
<li>由d柱经过a柱的辅助将盘子移动到b柱</li>
</ol>
<p>现在的状态是，a柱、d柱上没有盘子，c柱上有一开始移动出去的盘子，b柱上有剩下的盘子。由于c柱上的盘子都小于b柱上的盘子，故而在移动时可以借助b柱。则由c柱经过a柱、d柱的辅助将盘子移动到b柱上，即完成了将所有盘子由a柱移动到b柱的过程。</p>
<p>那么应该怎么把盘子分成两份呢？这里简单起见，将盘子平分成两分。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">hanoiPlus</span> :: <span class="type">Integer</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;[<span class="type">Move</span>]</span><br><span class="line"><span class="title">hanoiPlus</span> <span class="number">0</span> _ _ _ _ = []</span><br><span class="line"><span class="title">hanoiPlus</span> n a b c d = hanoiPlus (left - k) a c b d</span><br><span class="line">            ++ hanoi k a d b</span><br><span class="line">            ++ [(a, b)]</span><br><span class="line">            ++ hanoi k d b a</span><br><span class="line">            ++ hanoiPlus (left - k) c b a d</span><br><span class="line">    <span class="keyword">where</span>   </span><br><span class="line">        left = n - <span class="number">1</span></span><br><span class="line">        k = n `div` <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="你的时间非常值钱四柱汉诺塔最优解">你的时间非常值钱：四柱汉诺塔最优解</h2>
<p>平分是无法达到最优效率的，因为3柱移动比4柱移动耗时，要达到最优效率，需要加一个分割函数。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">hanoiPlus</span> :: <span class="type">Integer</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;<span class="type">Peg</span>-&gt;[<span class="type">Move</span>]</span><br><span class="line"><span class="title">hanoiPlus</span> <span class="number">0</span> _ _ _ _ = []</span><br><span class="line"><span class="title">hanoiPlus</span> n a b c d = hanoiPlus (left - k) a c b d</span><br><span class="line">            ++ hanoi k a d b</span><br><span class="line">            ++ [(a, b)]</span><br><span class="line">            ++ hanoi k d b a</span><br><span class="line">            ++ hanoiPlus (left - k) c b a d</span><br><span class="line">    <span class="keyword">where</span>   </span><br><span class="line">        left = n - <span class="number">1</span></span><br><span class="line">        k = minimalDivide n</span><br><span class="line"></span><br><span class="line"><span class="title">minimalDivide</span> :: <span class="type">Integer</span>-&gt;<span class="type">Integer</span></span><br><span class="line"><span class="title">minimalDivide</span> <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="title">minimalDivide</span> n = head (minimalDivideList n)</span><br><span class="line"></span><br><span class="line"><span class="title">minimalDivideList</span> :: <span class="type">Integer</span>-&gt;[<span class="type">Integer</span>]</span><br><span class="line"><span class="title">minimalDivideList</span> <span class="number">0</span> = []</span><br><span class="line"><span class="title">minimalDivideList</span> n = minimalDivideList&#x27; [<span class="number">1</span>,<span class="number">2</span>..n] []</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        minimalDivideList&#x27; :: [<span class="type">Integer</span>]-&gt;[<span class="type">Integer</span>]-&gt;[<span class="type">Integer</span>]</span><br><span class="line">        minimalDivideList&#x27; (x:xs) [] = minimalDivideList&#x27; xs (<span class="number">0</span>:[])</span><br><span class="line">        minimalDivideList&#x27; [] ys = ys</span><br><span class="line">        minimalDivideList&#x27; (x:xs) (y:ys) = minimalDivideList&#x27; xs ((cur):(y:ys))</span><br><span class="line">            <span class="keyword">where</span></span><br><span class="line">                cur = <span class="keyword">if</span> x - y &lt;= <span class="number">1</span> || (hanoiPlus&#x27; x y) &lt;= (hanoiPlus&#x27; x (y + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">then</span> y <span class="keyword">else</span> y + <span class="number">1</span></span><br><span class="line">                hanoiPlus&#x27; :: <span class="type">Integer</span>-&gt;<span class="type">Integer</span>-&gt;<span class="type">Integer</span></span><br><span class="line">                hanoiPlus&#x27; <span class="number">0</span> _ = <span class="number">0</span></span><br><span class="line">                hanoiPlus&#x27; n&#x27; divide = </span><br><span class="line">                    <span class="number">2</span> * (hanoiPlus&#x27; left&#x27; divide&#x27;)</span><br><span class="line">                    + (<span class="number">2</span>^divide - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">where</span> </span><br><span class="line">                        left&#x27; = n&#x27; - divide - <span class="number">1</span></span><br><span class="line">                        divide&#x27; = <span class="keyword">if</span> left&#x27; == <span class="number">0</span> <span class="keyword">then</span> <span class="number">0</span> </span><br><span class="line">                        	<span class="keyword">else</span> (reverse (y:ys))!!fromInteger(left&#x27; - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Archiso构建高度定制化的PE启动盘</title>
    <url>/blog/2021/05/14/0009-ArchISO/</url>
    <content><![CDATA[<blockquote>
<p>一直想要一个自己的PE启动盘，以便使用一个小小的U盘将自己的开发环境带到任何地方。折腾了两天，终于制作了一个粗糙的镜像。在此作一个记录。</p>
<p>镜像地址：<a class="link"   href="https://github.com/VincentJan/VrchPE" >https://github.com/VincentJan/VrchPE<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<span id="more"></span>
<h2 id="开始之前的一些废话">开始之前的一些废话</h2>
<p>很久之前其实尝试过将系统装在移动硬盘上，做成一个移动系统。但是由于当时相关知识约等于0，竟然把引导分区装在了另一个硬盘上。这次最早的尝试毫无疑问地失败了。</p>
<p>后来在学习了一些相关知识后又进行了一次尝试，发现在别的电脑上无法启动图形界面。本来只是简单的显卡驱动问题，一开始的失败经历让我直接放弃。当然最主要的原因还是觉得移动系统没什么用处。</p>
<p>直到前两天实验课上需要在linux上装一些古董软件，直接触发了我的系统洁癖。当时想着有没有什么办法能让系统在干完一些脏活后恢复成原来的样子。于是就有了这次折腾经历。</p>
<h2 id="准备工作">准备工作</h2>
<p>需要一台能联网的Arch Linux电脑和一个用作启动盘的U盘。现在的U盘应该很少16G以下的了，不用考虑容量问题。但最好是USB3.0协议的，操作的时候能快一些。</p>
<p>安装archiso软件包：<code>pacman -S archiso</code></p>
<p>创建一个目录用来构建镜像：<code>mkdir Vrch</code>并把/usr/share/archiso/configs/baseline中的文件复制到目录中。</p>
<p><em>也可以使用/usr/share/archiso/configs/releng中的文件，差别在于baseline提供了一个最小可启动镜像配置，而releng提供最近的安装镜像配置</em></p>
<p>具体说明：<a class="link"   href="https://wiki.archlinux.org/title/Archiso#Prepare_a_custom_profile" >Archiso#prepare_custom_profile-ArchWiki<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="配置镜像文件">配置镜像文件</h2>
<h3 id="选择软件包">选择软件包</h3>
<p>编辑Vrch/packages.x86_64，把想要安装的包名加进去就可以了。</p>
<p>如果想要使用无线网卡等设备，添加<code>linux-firmware</code>包。</p>
<p>如果需要图形界面，除了<code>xorg</code>以外，还要注意显卡驱动以及<code>xorg-xinit</code>。</p>
<p>显卡驱动参考：<a class="link"   href="https://wiki.archlinux.org/title/Xorg#Input_devices" >Xorg#input_devices-ArchWiki<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="向镜像添加文件">向镜像添加文件</h3>
<p>将Vrch/airootfs看做系统根目录，其中的一切文件都会被复制到镜像系统的相应位置。</p>
<p>我们可以在这里添加各种配置文件，以及systemd服务自启动所需的软连接。</p>
<p>需要注意，文件权限是不会被原样复制的。若需更改某文件的权限，可以编辑Vrch/prefiledef.sh中相关位置。</p>
<h2 id="生成镜像文件">生成镜像文件</h2>
<p>在Vrch目录中运行:<code>mkarchiso -v .</code>，漫长的等待后，会出现一个work目录与一个out目录。其中work目录是构建进程中产生的工作目录，out目录中存放最终产生的iso文件。</p>
<p>work与out目录的位置可以通过命令参数选择。</p>
<h2 id="制作启动盘">制作启动盘</h2>
<p>这部分平平无奇，插入U盘，在Vrch目录下运行:<code>dd if=out/isoname.iso of=/dev/sdx bs=4M</code></p>
<p>isoname为生成的镜像名称，sdx为U盘的名称。</p>
<h2 id="参考">参考</h2>
<p><a class="link"   href="https://wiki.archlinux.org/title/Archiso" >Archiso_ArchWiki<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C++随机数的使用</title>
    <url>/blog/2021/05/17/0011-C++:random_number_mechanism/</url>
    <content><![CDATA[<blockquote>
<p>整理一下STL中random库和cstdlib中随机数机制的用法区别。</p>
</blockquote>
<span id="more"></span>
<h2 id="cstdlib中的随机数用法">cstdlib中的随机数用法</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rand</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序使用系统当前时间作随机数种子，然后使用rand()生成10个随机数。</p>
<h2 id="stl中的随机数用法">STL中的随机数用法</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">e</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序也是使用系统当前时间作随机数种子，然后使用e()生成10个随机数。</p>
<p><del>好了，以上就是小编带来的关于如何在c++中使用随机数的全部内容了，你学会了吗？（逃</del></p>
<h2 id="为什么要使用stl的随机数">为什么要使用STL的随机数</h2>
<p>答：用法丰富，使用方便。直接上例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    default_random_engine e;</span><br><span class="line">    <span class="comment">// 设置种子</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    e.<span class="built_in">seed</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 生成一个范围内的整数</span></span><br><span class="line">    <span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">rand</span>() % (max - min) + min;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">unsigned</span>&gt; <span class="title">u</span><span class="params">(min, max)</span></span>;</span><br><span class="line">    <span class="built_in">u</span>(e);</span><br><span class="line">    <span class="comment">// 生成随机实数，STL的方法精度高于使用rand() / double的方式生成的实数</span></span><br><span class="line">    <span class="function">uniform_real_distribution&lt;<span class="type">double</span>&gt; <span class="title">u</span><span class="params">(min, max)</span></span>;</span><br><span class="line">    <span class="built_in">u</span>(e);</span><br><span class="line">    <span class="comment">// 生成随机布尔, 注意这个描述器不是模板</span></span><br><span class="line">    bernoulli_distribution b;</span><br><span class="line">    <span class="built_in">b</span>(e);</span><br><span class="line">    <span class="comment">// 生成不均匀分布的随机数, 均值4， 标准差1.5</span></span><br><span class="line">    normal_distribution&lt;&gt; <span class="built_in">n</span>(<span class="number">4</span>, <span class="number">1.5</span>);</span><br><span class="line">    <span class="built_in">n</span>(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相信大家已经看出来标准库的方便之处了。</p>
<h2 id="一个非常常见的问题">一个非常常见的问题</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">rand</span>();</span><br><span class="line">        default_random_engine e;</span><br><span class="line">        <span class="built_in">e</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式会生成一样的数字，原因是随机数种子被设置时会重置随机数生成器的状态（Engine e初始化时同样设置了默认种子）。应避免在生成随机数时设置种子。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    default_random_engine e;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">rand</span>();</span><br><span class="line">        <span class="built_in">e</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就没问题了。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python深拷贝与浅拷贝</title>
    <url>/blog/2021/05/15/0010-Python:Deep_copy_and_shallow_copy/</url>
    <content><![CDATA[<blockquote>
<p>前言：自从上次略略学习了一些python基础就没怎么用过python了，这次遇到了深浅拷贝问题，在此记录。</p>
</blockquote>
<span id="more"></span>
<h2 id="引子">引子</h2>
<p>考虑下面代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list2 = list1</span><br><span class="line">list3 = list2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (some condition):</span><br><span class="line">    list1 = some value</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (some condition):</span><br><span class="line">        list2 = some value</span><br><span class="line">    <span class="keyword">if</span> (f(list3) &lt; f(list2)):</span><br><span class="line">        list3 = list2</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>
<p>这段代码试图在一些复杂运算中取出最优结果，并将其保存在list3中。由于平时基本是使用C++写程序，我设想它等效于以下C++代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;T&gt; list1;</span><br><span class="line">vector&lt;T&gt; list2 = list1;</span><br><span class="line">vector&lt;T&gt; list3 = list1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (some condition) &#123;</span><br><span class="line">    list1 = some value;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (some condition) &#123;</span><br><span class="line">        list2 = some value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">f</span>(list3) &lt; <span class="built_in">f</span>(list2)) &#123;</span><br><span class="line">        list3 = list2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void print(const vector&lt;T&gt;&amp;), 打印vector中所有元素</span></span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>
<p>作为一个与C++相爱相杀近两年的人，我很确信这段代码能完成任务，事实上它的确能。但python代码却总是出错，于是我试图在list3唯一可能被修改的地方打印出它的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (f(list3) &lt; f(list2)):</span><br><span class="line">    list3 = list2</span><br><span class="line">    <span class="built_in">print</span>(list3)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;final:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>
<p>令人匪夷所思的事情出现了，输出结果居然是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aaaaaaaaa]</span><br><span class="line">[bbbbbbbbb]</span><br><span class="line">[ccccccccc]</span><br><span class="line">....</span><br><span class="line">[xxxxxxxxx]</span><br><span class="line">final:</span><br><span class="line">[yyyyyyyyy]</span><br></pre></td></tr></table></figure>
<p>最后一次赋值后的值居然跟最后输出的值不一样？！几经周折了解到，Python中存在深拷贝与浅拷贝的问题。</p>
<h2 id="什么是深拷贝与浅拷贝">什么是深拷贝与浅拷贝</h2>
<p>简单说，深拷贝就是新建一块内存空间，并将原内存空间中的数据拷贝到新的内存空间中。而浅拷贝不创建内存空间，只令对象引用已存在的内存空间。类比C++的指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">T *a = <span class="keyword">new</span> <span class="built_in">T</span>();</span><br><span class="line">T *b;</span><br><span class="line">b = a; <span class="comment">// 浅拷贝</span></span><br><span class="line">b = <span class="keyword">new</span> <span class="built_in">T</span>(*a); <span class="comment">// 深拷贝</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意，不存在指针的语言中（如Python, Java）引用的含义和C++是不同的，更接近于C++中的指针。C++中的引用只是变量的别名，是不可以更改指向的变量的。而Python中的引用更像是一个自动的指针，可以取值也可以改变所指，并且无需显式指定操作，由语言情景决定改执行哪种操作。</p>
<h2 id="python的对象机制">Python的对象机制</h2>
<p>由于python中不存在指针和引用，也就无法像C++那样自由选择值传递或传引用传递。为了避免操作大对象时的巨大开销，python的应对方法是——一切皆引用。即，每个变量实际上都是引用类型，赋值（=）号通常并不新建对象，而是让变量的引用指向指定的地址。</p>
<p>也就是说，上面的程序中list1，list2和list3实际上是同一个对象的不同引用，验证如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list2 = list1</span><br><span class="line">list3 = list1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1), <span class="string">&quot; &quot;</span> ,<span class="built_in">id</span>(list2), <span class="string">&quot; &quot;</span>, <span class="built_in">id</span>（list3)</span><br></pre></td></tr></table></figure>
<p>可以看出它们的地址相同，即为同一个对象。那么理所应当地，我们通过哪一个引用改变变量的值都会更改这唯一的地址空间。</p>
<p>这里你可能对一切皆引用这个说法有所质疑，并提出如下例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = a</span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 139656604350896</span><br><span class="line">3 139656604350832</span><br></pre></td></tr></table></figure>
<p>这输出似乎与一切皆引用有出入，因为更改b的值既没有影响a的值，a和b的地址也不一样。这里的核心是：语句<code>b = 3</code>的语义真的是更改b的值吗？我们对这个例子稍作改动：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="string">&quot; &quot;</span>, <span class="built_in">id</span>(b))</span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b), <span class="string">&quot; &quot;</span>, <span class="built_in">id</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140143427922352   140143427922352</span><br><span class="line">140143427922288   140143427922288</span><br></pre></td></tr></table></figure>
<p>没错，常量3也是一个引用。只不过无法改变它的指向。这里一个事实已经呼之欲出，赋值运算符（=）只改变引用的指向。即只能用作浅拷贝。</p>
<h2 id="如何进行深拷贝">如何进行深拷贝</h2>
<p>那么如何进行深拷贝呢？对一个列表，我们可能会想要使用切片创建新的内存空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = list1[:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1), <span class="string">&quot; &quot;</span>, <span class="built_in">id</span>(list2))</span><br></pre></td></tr></table></figure>
<p>这里可以看出list2已经拥有了新的内存空间。但这种方法在处理多层列表的时候，会出现问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line">list2 = list1[:]</span><br><span class="line">list1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(list2[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>list2的值还是被list1的修改改动了，这是因为list2虽然和list1没有指向同一块地址空间。但其中第一个元素却指向了同一块地址空间。</p>
<p>因此，<strong>深拷贝唯一指定方法：copy.deepcopy()</strong></p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>HMAC-SHA256算法解析与实现</title>
    <url>/blog/2021/05/29/0012-HMAC-SHA256_Algorithm/</url>
    <content><![CDATA[<blockquote>
<p>对HMAC-SHA256算法作的整理。</p>
</blockquote>
<span id="more"></span>
<h2 id="hmac算法">HMAC算法</h2>
<p>HMAC是Hash-based Message Authentication Code的缩写，意为基于哈希运算的消息认证码。基诞生目的是为了确保网络中报文的完整性以及信息来源的身份验证。其中有几个关键组成部分：</p>
<ul>
<li>哈希函数(Hash)：用以将任意长度的消息映射成为定长的哈希值。</li>
<li>密钥(key)：与原始消息组合后通过哈希函数，以起到身份验证功能。</li>
<li>原始消息(message)：将被处理的消息。</li>
<li>ipad：值为00110110(0x36)的循环，长度为Hash函数的分组长度。</li>
<li>opad：值为01011100(0x5c)的循环，长度为Hash函数的分组长度。</li>
</ul>
<p>HMAC算法描述为：</p>
<ol type="1">
<li>对key值进行填充，形成padded-key，填充方法如下：
<ol type="1">
<li>若key的长度小于Hash函数的分组长度，在其后用0填充至Hash函数分组长度。</li>
<li>若key的长度大于Hash函数的分组长度，使用Hash(key)生成padded-key。</li>
</ol></li>
<li>将生成的padded-key分别与ipad/opad进行XOR运算，得到ipad-key和opan-key。</li>
<li>将ipad-key与message首尾相接（ipad-key在message前），进行Hash(ipad-key+message)运算，得到hash1。</li>
<li>将得到的opad-key与hash1首尾相接，进行Hash(opad-key+hash1)运算，就得到了HMAC值。</li>
</ol>
<p>伪码描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input: key, message, Hash</span><br><span class="line">output:hmac</span><br><span class="line"></span><br><span class="line">chunk_size = Hash.chunk_size</span><br><span class="line">ipad(chunk_size, 0x36)</span><br><span class="line">opad(chunk_size, 0x5c)</span><br><span class="line"></span><br><span class="line">padded_key = if (key.size &lt;= chunk_size) </span><br><span class="line">			 then key + pading(chunk_size - key.size, 0) </span><br><span class="line">			 else Hash(key)</span><br><span class="line">			 </span><br><span class="line">ipad_key = XOR(padded_key, ipad)</span><br><span class="line">opad_key = XOR(padded_key, opad)</span><br><span class="line"></span><br><span class="line">hash1 = Hash(ipad_key + message)</span><br><span class="line">hmac = Hash(opad_key + hash1)</span><br></pre></td></tr></table></figure>
<h2 id="sha256-算法">SHA256 算法</h2>
<p>SHA是Secure Hash Algorithm的缩写，是一个由美国国家安全局研发的算法族。这些算法大体结构相似，但在性能，数值范围与安全性上存在差别。SHA256算法是其中较为广为人知的一个算法，接受一个最大长度为(2^64 - 1)bit的消息，输出一个256bit长的哈希值。SHA256算法非常安全，目前还没有对SHA256算法的成功碰撞记录。</p>
<p>这个算法有几个关键组成部分：</p>
<ul>
<li><p>8个哈希初值：对自然界中前8个质数的平方根小数部分取前32个bit取得。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a</span><br><span class="line">,0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19</span><br></pre></td></tr></table></figure></li>
<li><p>64个常数：对自然界中前64个质数的立方根小数部分取前32个bit取得。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b</span><br><span class="line">,0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01</span><br><span class="line">,0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7</span><br><span class="line">,0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc</span><br><span class="line">,0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152</span><br><span class="line">,0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147</span><br><span class="line">,0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc</span><br><span class="line">,0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85</span><br><span class="line">,0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819</span><br><span class="line">,0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08</span><br><span class="line">,0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f</span><br><span class="line">,0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208</span><br><span class="line">,0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2</span><br></pre></td></tr></table></figure></li>
<li><p>原始消息(message)：将被处理的消息。</p></li>
<li><p>分段长度(chunk_size)：512bit</p></li>
<li><p>运算字数(word_count)：64</p></li>
<li><p>函数CROR(x, n) = x循环右移n位</p></li>
<li><p>函数S0(x) = CROR(x, 7) ^ CROR(x, 18) ^ (x &gt;&gt; 3)</p></li>
<li><p>函数S1(x) = CROR(x, 17) ^ CROR(x, 19) ^ (x &gt;&gt; 10)</p></li>
<li><p>函数EP0(x) = CROR(x, 2) ^ CROR(x, 13) ^ CROR(x, 22)</p></li>
<li><p>函数EP1(x) = CROR(x, 6) ^ CROR(x, 11) ^ CROR(x, 25)</p></li>
<li><p>函数CH(x, y, z) = (x &amp; y) ^ ((~x) &amp; z)</p></li>
<li><p>函数MAJ(x, y, z) = ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z))</p></li>
</ul>
<p>算法描述如下：</p>
<ol type="1">
<li><p>对message进行预处理：</p>
<ol type="1">
<li><p>在message后填充1位1，然后填充若干位0，直到message的长度(bit)对512取模等于448（message.size % chunk_size = 448）。</p>
<ul>
<li>不管message本来长度是多少，都要先填充1位1。也就是说即使message的长度对512取模已经等于448了，还是要填充1位1，之后再填充511位0使其长度重新符合要求。</li>
<li>为什么是448？因为下一步要填充一个64bit的数，448+64等于分段长度512。</li>
</ul></li>
<li><p>使用一个64bit长的无符号整型数以大端字节序在message后填充原始message的长度。</p>
<ul>
<li><p>字节序，对于长度超过1字节的数据，在内存中的存储有两种顺序：</p>
<ol type="1">
<li>低地址存储低位字节，高地址存储高位字节，称为大端字节序。</li>
<li>低地址存储高位字节，高地址存储低信字节，称为小端字节序。</li>
</ol>
<p>例如，对于0x1234，若使用内存地址0x01, 0x02存储这两个字节，表现为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 大端序</span><br><span class="line">0x01: 0x12</span><br><span class="line">0x02: 0x34</span><br><span class="line"></span><br><span class="line">// 小端序</span><br><span class="line">0x01: 0x34</span><br><span class="line">0x02: 0x12</span><br></pre></td></tr></table></figure>
<p>值得一提的是，对无论大端序还是小端序，对0x1234取地址都将得到0x01。</p></li>
</ul></li>
</ol></li>
<li><p>使用一个长度为8的数组H[]保存8个哈希初值。</p></li>
<li><p>使用一个长度为64的数组k[]保存64个常数。</p></li>
<li><p>将预处理后的message分割为若干长度为chunk_size的chunk。</p></li>
<li><p>依序对每个chunk进行下列处理：</p>
<ol type="1">
<li><p>建立一个大小为word_count(64)的数组w[]</p></li>
<li><p>将chunk分割为16个长度为32bit的word，存储在w[0]-w[15]中。</p>
<ul>
<li>注意将每一个word转换为机器字节序，否则位运算会出问题。</li>
</ul></li>
<li><p>对i从16到63进行循环：</p>
<ul>
<li>w[i] = w[i - 16] + S0(w[i - 15]) + w[i - 7] + S1(w[i - 2])</li>
</ul></li>
<li><p>使用创建H[]的拷贝h[]</p></li>
<li><p>对i从0到63进行循环，根据w[]和k[]计算h[]中的hash值：</p>
<ul>
<li><p>t1 = h[7] + EP1(h[4]) + CH(h[4], h[5], h[6]) + k[i] + w[i]</p></li>
<li><p>t2 = EP0(h[0]) + MAJ(h[0], h[1], h[2])</p></li>
<li><p>对i从7到1循环：</p>
<ul>
<li>if (i == 4) then h[i] = h[i - 1] + t1 else h[i] = h[i - 1]</li>
</ul></li>
<li><p>h[0] = t1 + t2</p></li>
</ul></li>
<li><p>更改H[]供下一个chunk使用：</p>
<ul>
<li>H[] += h[]</li>
</ul></li>
</ol></li>
<li><p>将最终得到的H[]按大端字节序首尾相接，即形成最终的256bit哈希值。</p></li>
</ol>
<p>伪码描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input: message</span><br><span class="line">output: hash</span><br><span class="line"></span><br><span class="line">H[8] = &#123;0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a</span><br><span class="line">       ,0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19&#125;</span><br><span class="line">       </span><br><span class="line">k[64] = &#123;0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b</span><br><span class="line">        ,0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01</span><br><span class="line">        ,0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7</span><br><span class="line">        ,0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc</span><br><span class="line">        ,0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152</span><br><span class="line">        ,0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147</span><br><span class="line">        ,0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc</span><br><span class="line">        ,0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85</span><br><span class="line">        ,0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819</span><br><span class="line">        ,0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08</span><br><span class="line">        ,0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f</span><br><span class="line">        ,0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208</span><br><span class="line">        ,0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2&#125;</span><br><span class="line">        </span><br><span class="line">// 实际上处理以字节为单位，而不是bit</span><br><span class="line">chunk_size = 64;</span><br><span class="line">word_count = 64;</span><br><span class="line"></span><br><span class="line">CROR(x, n) = x循环右移n位</span><br><span class="line">S0(x) = CROR(x, 7) ^ CROR(x, 18) ^ (x &gt;&gt; 3)</span><br><span class="line">S1(x) = CROR(x, 17) ^ CROR(x, 19) ^ (x &gt;&gt; 10)</span><br><span class="line">EP(x) = CROR(x, 2) ^ CROR(x, 13) ^ CROR(x, 22)</span><br><span class="line">EP1(x) = CROR(x, 6) ^ CROR(x, 11) ^ CROR(x, 25)</span><br><span class="line">CH(x, y, z) = (x &amp; y) ^ ((~x) &amp; z)</span><br><span class="line">MAJ(x, y, z) = ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z))</span><br><span class="line"></span><br><span class="line">// 预处理部分</span><br><span class="line">unit_byte = 64</span><br><span class="line">target_size = 56</span><br><span class="line">// 第一个填充字节，值为10000000</span><br><span class="line">first_append = 0x80</span><br><span class="line"></span><br><span class="line">// 大小信息以bit为单位</span><br><span class="line">length = message.size * 8</span><br><span class="line"></span><br><span class="line">need_size = taget_byte - (messaage.size % chunk_size)</span><br><span class="line">need_size += if (need_size &lt;= 0) then chunk_size else 0;</span><br><span class="line"></span><br><span class="line">// zero构造一个长度为need_size - 1字节的串，big_endian保证返回一个数的大端序格式</span><br><span class="line">message += first_append + zero(need_size - 1) + big_endian(length)</span><br><span class="line"></span><br><span class="line">// 分块并计算hash值</span><br><span class="line">chunk_count = message.size / chunk_size</span><br><span class="line">for i in (0, chunk_count):</span><br><span class="line">	// divide将chunk分解为16个机器字节序的word</span><br><span class="line">	w[word_count] = divide(chunk[i])</span><br><span class="line">	// 生成剩下的word</span><br><span class="line">	for i in (16, word_count):</span><br><span class="line">		w[i] = w[i - 16] + S0(w[i - 15]) + w[i - 7] + S1(w[i - 2])</span><br><span class="line">	h = H</span><br><span class="line">	for i in (0, word_count):</span><br><span class="line">		t1 = h[7] + EP1(h[4]) + CH(h[4], h[5], h[6]) + k[i] + w[i]</span><br><span class="line">		t2 = EP0(h[0]) + MAJ(h[0], h[1], h[2])</span><br><span class="line">		for i in (7, 0):</span><br><span class="line">			h[i] = h[i - 1]</span><br><span class="line">			if (i == 4):</span><br><span class="line">				h[i] += t1</span><br><span class="line">		h[0] = t1 + t2</span><br><span class="line">    for i in (0, 8):</span><br><span class="line">        H[i] += h[i]</span><br><span class="line">			</span><br><span class="line">// 生成hash值，将H中每个值以大端格式组合</span><br><span class="line">hash = big_endian_combine(H)</span><br></pre></td></tr></table></figure>
<h2 id="hmac_sha256算法实现">HMAC_SHA256算法实现</h2>
<p>HMAC_SHA256算法就是将SHA256算法作为Hash函数的HMAC算法。简单组合就可得到。</p>
<h3 id="c实现">C++实现</h3>
<p>理解了上述内容后使用C++实现出来还是很简单的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********************************************</span></span><br><span class="line"><span class="comment"> * 一个HMAC和SHA256算法的跨平台实现</span></span><br><span class="line"><span class="comment"> * ******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::array;</span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::<span class="type">size_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************</span></span><br><span class="line"><span class="comment"> * 字节序相关运算</span></span><br><span class="line"><span class="comment"> * ******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判定机器字节序，大端返回true，小端返回false</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">big_endian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> test = <span class="number">0x1234</span>;</span><br><span class="line">    <span class="type">uint8_t</span> first = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(&amp;test);</span><br><span class="line">    <span class="keyword">return</span> first == <span class="number">0x12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字节序进行转换</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">order_switch</span><span class="params">(<span class="type">const</span> T &amp;input)</span> </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">output</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">constexpr</span> std::<span class="type">size_t</span> size = <span class="built_in">sizeof</span>(input);</span><br><span class="line">    <span class="type">uint8_t</span> *data = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(&amp;output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        data[i] = input &gt;&gt; ((size - i - <span class="number">1</span>) * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取一个数的大端表示，在大端机器上直接返回，小端机器上进行转换。</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">local2big</span><span class="params">(<span class="type">const</span> T &amp;input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">big_endian</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">order_switch</span>(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取一个大端序数的机器表示，实际上与local2big等效。</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">big2local</span><span class="params">(<span class="type">const</span> T &amp;input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">local2big</span>(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************</span></span><br><span class="line"><span class="comment"> * 以字节方式查看变量</span></span><br><span class="line"><span class="comment"> * *****************************/</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_byte</span><span class="params">(<span class="type">const</span> T &amp;input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> arr = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">uint8_t</span>*&gt;(&amp;input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(input); ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, arr[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************</span></span><br><span class="line"><span class="comment"> * SHA256算法实现</span></span><br><span class="line"><span class="comment"> * ******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Packet = std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Packet特化字节查看模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_byte</span><span class="params">(<span class="type">const</span> Packet &amp;packet)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; packet.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;(packet[i]));</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8个初始哈希值</span></span><br><span class="line"><span class="type">const</span> array&lt;<span class="type">uint32_t</span>, 8&gt; h_init =</span><br><span class="line">    &#123;<span class="number">0x6a09e667</span>, <span class="number">0xbb67ae85</span>, <span class="number">0x3c6ef372</span>, <span class="number">0xa54ff53a</span></span><br><span class="line">    ,<span class="number">0x510e527f</span>, <span class="number">0x9b05688c</span>, <span class="number">0x1f83d9ab</span>, <span class="number">0x5be0cd19</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 64个常数</span></span><br><span class="line"><span class="type">const</span> array&lt;<span class="type">uint32_t</span>, 64&gt; k =</span><br><span class="line">    &#123;<span class="number">0x428a2f98</span>, <span class="number">0x71374491</span>, <span class="number">0xb5c0fbcf</span>, <span class="number">0xe9b5dba5</span>, <span class="number">0x3956c25b</span></span><br><span class="line">    ,<span class="number">0x59f111f1</span>, <span class="number">0x923f82a4</span>, <span class="number">0xab1c5ed5</span>, <span class="number">0xd807aa98</span>, <span class="number">0x12835b01</span></span><br><span class="line">    ,<span class="number">0x243185be</span>, <span class="number">0x550c7dc3</span>, <span class="number">0x72be5d74</span>, <span class="number">0x80deb1fe</span>, <span class="number">0x9bdc06a7</span></span><br><span class="line">    ,<span class="number">0xc19bf174</span>, <span class="number">0xe49b69c1</span>, <span class="number">0xefbe4786</span>, <span class="number">0x0fc19dc6</span>, <span class="number">0x240ca1cc</span></span><br><span class="line">    ,<span class="number">0x2de92c6f</span>, <span class="number">0x4a7484aa</span>, <span class="number">0x5cb0a9dc</span>, <span class="number">0x76f988da</span>, <span class="number">0x983e5152</span></span><br><span class="line">    ,<span class="number">0xa831c66d</span>, <span class="number">0xb00327c8</span>, <span class="number">0xbf597fc7</span>, <span class="number">0xc6e00bf3</span>, <span class="number">0xd5a79147</span></span><br><span class="line">    ,<span class="number">0x06ca6351</span>, <span class="number">0x14292967</span>, <span class="number">0x27b70a85</span>, <span class="number">0x2e1b2138</span>, <span class="number">0x4d2c6dfc</span></span><br><span class="line">    ,<span class="number">0x53380d13</span>, <span class="number">0x650a7354</span>, <span class="number">0x766a0abb</span>, <span class="number">0x81c2c92e</span>, <span class="number">0x92722c85</span></span><br><span class="line">    ,<span class="number">0xa2bfe8a1</span>, <span class="number">0xa81a664b</span>, <span class="number">0xc24b8b70</span>, <span class="number">0xc76c51a3</span>, <span class="number">0xd192e819</span></span><br><span class="line">    ,<span class="number">0xd6990624</span>, <span class="number">0xf40e3585</span>, <span class="number">0x106aa070</span>, <span class="number">0x19a4c116</span>, <span class="number">0x1e376c08</span></span><br><span class="line">    ,<span class="number">0x2748774c</span>, <span class="number">0x34b0bcb5</span>, <span class="number">0x391c0cb3</span>, <span class="number">0x4ed8aa4a</span>, <span class="number">0x5b9cca4f</span></span><br><span class="line">    ,<span class="number">0x682e6ff3</span>, <span class="number">0x748f82ee</span>, <span class="number">0x78a5636f</span>, <span class="number">0x84c87814</span>, <span class="number">0x8cc70208</span></span><br><span class="line">    ,<span class="number">0x90befffa</span>, <span class="number">0xa4506ceb</span>, <span class="number">0xbef9a3f7</span>, <span class="number">0xc67178f2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环右移</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">CROR</span><span class="params">(<span class="type">uint32_t</span> input, <span class="type">size_t</span> bits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((input &gt;&gt; bits) | (input &lt;&lt; (<span class="number">32</span> - bits)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sha256中需要的一些运算</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">S0</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CROR</span>(x, <span class="number">7</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">18</span>) ^ (x &gt;&gt; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">S1</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CROR</span>(x, <span class="number">17</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">19</span>) ^ (x &gt;&gt; <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">EP0</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CROR</span>(x, <span class="number">2</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">13</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">22</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">EP1</span><span class="params">(<span class="type">uint32_t</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CROR</span>(x, <span class="number">6</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">11</span>) ^ <span class="built_in">CROR</span>(x, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">CH</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">uint32_t</span> y, <span class="type">uint32_t</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((x &amp; y) ^ ((~x) &amp; z));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">MAJ</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">uint32_t</span> y, <span class="type">uint32_t</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Packet <span class="title">sha256</span><span class="params">(<span class="type">const</span> Packet &amp;message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> msg = message;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">size_t</span> chunk_size = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">size_t</span> target_size = <span class="number">56</span>;</span><br><span class="line">    <span class="comment">// 预处理</span></span><br><span class="line">    msg.<span class="built_in">push_back</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="keyword">while</span> (msg.<span class="built_in">size</span>() % chunk_size != target_size) &#123;</span><br><span class="line">        msg.<span class="built_in">push_back</span>(<span class="number">0x00</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uint64_t</span> length = <span class="built_in">local2big</span>(message.<span class="built_in">size</span>() * <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        msg.<span class="built_in">push_back</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(&amp;length)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分块并计算hash</span></span><br><span class="line">    <span class="keyword">auto</span> chunk_count = msg.<span class="built_in">size</span>() / chunk_size;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">size_t</span> word_count = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">auto</span> H = h_init;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; chunk_count; ++i) &#123;</span><br><span class="line">        <span class="comment">// 初始化word数组</span></span><br><span class="line">        array&lt;<span class="type">uint32_t</span>, word_count&gt; w;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">size_t</span> word_size = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">size_t</span> word_per_chunk = chunk_size / word_size;</span><br><span class="line">        <span class="comment">// 从Packet中分割出原始word</span></span><br><span class="line">        <span class="type">size_t</span> pos = i * chunk_size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; word_per_chunk; ++j) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> value = *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">uint32_t</span>*&gt;(msg.<span class="built_in">c_str</span>() </span><br><span class="line">                + pos + word_size * j);</span><br><span class="line">            w[j] = <span class="built_in">big2local</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据原始word计算剩余word</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = word_per_chunk; j &lt; word_count; ++j) &#123;</span><br><span class="line">            w[j] = w[j - <span class="number">16</span>] + <span class="built_in">S0</span>(w[j - <span class="number">15</span>]) + w[j - <span class="number">7</span>] + <span class="built_in">S1</span>(w[j - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化hash值</span></span><br><span class="line">        <span class="keyword">auto</span> h = H;</span><br><span class="line">        <span class="comment">// 根据word值计算hash值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; word_count; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t1 = h[<span class="number">7</span>] + <span class="built_in">EP1</span>(h[<span class="number">4</span>]) + <span class="built_in">CH</span>(h[<span class="number">4</span>], h[<span class="number">5</span>], h[<span class="number">6</span>]) + k[i] + w[i];</span><br><span class="line">            <span class="keyword">auto</span> t2 = <span class="built_in">EP0</span>(h[<span class="number">0</span>]) + <span class="built_in">MAJ</span>(h[<span class="number">0</span>], h[<span class="number">1</span>], h[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">7</span>; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">                h[j] = h[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">4</span>) &#123;</span><br><span class="line">                    h[j] += t1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h[<span class="number">0</span>] = t1 + t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新hash值供下一个chunk使用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; h.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            H[i] += h[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拼接H得到结果</span></span><br><span class="line">    Packet result;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : H) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> value = <span class="built_in">local2big</span>(v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(&amp;value)[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************</span></span><br><span class="line"><span class="comment"> * HMAC算法实现</span></span><br><span class="line"><span class="comment"> * ******************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Hash = pair&lt;<span class="type">size_t</span>, function&lt;<span class="built_in">Packet</span>(<span class="type">const</span> Packet&amp;)&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">Packet <span class="title">hmac</span><span class="params">(<span class="type">const</span> Packet &amp;message , <span class="type">const</span> Packet &amp;key, <span class="type">const</span> Hash &amp;hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> chunk_size = hash.first;</span><br><span class="line">    <span class="function"><span class="type">uint8_t</span> <span class="title">ipad</span><span class="params">(<span class="number">0x36</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">uint8_t</span> <span class="title">opad</span><span class="params">(<span class="number">0x5C</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充key</span></span><br><span class="line">    <span class="keyword">auto</span> padded_key = key;</span><br><span class="line">    <span class="keyword">if</span> (padded_key.<span class="built_in">size</span>() &gt; chunk_size) &#123;</span><br><span class="line">        padded_key = hash.<span class="built_in">second</span>(padded_key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(padded_key.<span class="built_in">size</span>() &lt; chunk_size) &#123;</span><br><span class="line">            padded_key.<span class="built_in">push_back</span>(<span class="number">0x00</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用异或运算生成ipad_key和opad_key</span></span><br><span class="line">    <span class="keyword">auto</span> XOR = [](<span class="type">const</span> Packet &amp;packet, <span class="type">uint8_t</span> pad) &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = packet;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : result) &#123;</span><br><span class="line">            c ^= pad;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> ipad_key = <span class="built_in">XOR</span>(padded_key, ipad);</span><br><span class="line">    <span class="keyword">auto</span> opad_key = <span class="built_in">XOR</span>(padded_key, opad);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用hash算法得到结果</span></span><br><span class="line">    <span class="keyword">return</span> hash.<span class="built_in">second</span>(opad_key + hash.<span class="built_in">second</span>(ipad_key + message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（一）——Haskell基础</title>
    <url>/blog/2021/06/10/0013-Re0:Haskell_01/</url>
    <content><![CDATA[<blockquote>
<p>对Haskell一直挺感兴趣，也学习了一段时间。奈何IO太离谱，做不出实际的东西，导致学了忘忘了学痛苦万分。于是只好信奉好记性不如烂笔头，写几篇笔记记录下来。</p>
<p>这是第一篇，主题是Haskell的介绍和基础语法。</p>
</blockquote>
<span id="more"></span>
<h2 id="给其它语言学习者的忠告">给其它语言学习者的忠告</h2>
<p>如果你之前学习了一大票主流语言，比如C、C++、JAVA、Python、Shell、JS、PHP、汇编等等。我的建议是：<strong>忘记它们</strong>。</p>
<p>之前为C++选手写过一篇入门Python的文章，本来也想写一篇基于C++基础入门Haskell的文章。但一上手发现，使用C++的思维还不如完全失忆更好接受Haskell。</p>
<p>这就牵扯到了编程范式的问题。上述一大票语言，不管多么千差万别，大体上的运行方式就是：从某一条语句开始，按顺序一条一条的往下执行。这就是所谓的命令式编程：告诉计算机它要做什么。</p>
<p>而Haskell和这些语言不一样，它没有一个固定的语句执行顺序，甚至于，你无法改变一个变量的值（我更倾向于将Haskell中的变量理解成没有参数的函数，也就是说，根本没有变量，<strong>一切都是函数</strong>）。你的程序里满是无所谓先后的函数定义，你要做的事情是使用一个函数描述出你要解决的问题。也就是函数式编程：告诉计算机问题是什么。</p>
<p>因为这一个How和What的区别，在座的各位步骤流程大师的很多经验失去了用武之地。既然这样，不如索性给它忘了，从零开始推开新世界的大门。</p>
<h2 id="什么是haskell">什么是Haskell</h2>
<p>Haskell是一门惰性求值、纯函数式的静态强类型编程语言。</p>
<h3 id="函数式">函数式：</h3>
<p>对于函数式并没有明确的定义，但它通常意味着：</p>
<ul>
<li>函数是“一等公民”，就是说，函数可以在任何需要一个值的地方作为值来使用。具体点说就是你可以把函数直接作为另一个函数的参数进行传递，而不用使用类似于函数指针或std::function之类的东西把它包起来。</li>
<li>程序围绕着“计算表达式”而不是“执行指令”来运行。</li>
</ul>
<p>学习Haskell花费时间最多的地方就在于这种从命令式到函数式的思维转换。</p>
<h3 id="纯">纯：</h3>
<p><em>“让函数式的归函数式，纯的归纯。”——《藏狐箴言》。</em></p>
<p>并不是所有函数式语言都是纯函数式，一个纯的语言意味着：</p>
<ul>
<li>没有改变，任何值都是不可变的。</li>
<li>表达式永远没有副作用，比如改变了某个变量的值或在屏幕上显示消息或发射一枚核弹。</li>
<li>使用相同的输入调用一个函数总能得到相同的输出。</li>
</ul>
<p>相信大家看到这已经懵了，这不是啥也干不了了吗？这语言什么用？rnm，退钱！</p>
<p>其实大可不必，面包还是会有的，只要亿点点思维转变，比如：</p>
<ul>
<li>等价代换：你永远可以使用一个等价的东西替换另一个东西，就像你还是一个炼金术士的时候那样。</li>
<li>并行：在没有副作用的世界，并行计算表达式会很轻松。</li>
<li>更少的头痛（？）：简单堆积，随意改动，各种行为作用会使程序非常难Debug和原因定位。</li>
</ul>
<h3 id="惰性求值">惰性求值：</h3>
<p>在Haskell中，一个表达式的值只有在真正被需要的时候才被计算出来（就像你只有在马上考试的时候才开始学习一样）。这种特性将会随着学习的深入加深理解。这里举几个浅显的小例子：</p>
<ul>
<li>可以简单的使用函数定义一个控制结构。</li>
<li>让使用无限数据的结构成为可能。</li>
<li>开启了一种更有创造性的编程风格（wholemeal programming直译为全麦编程，一种全局思考的编程风格）。</li>
<li>但它也带来了一个负面影响：非常难以计算时空复杂度。</li>
</ul>
<h3 id="静态强类型">静态强类型：</h3>
<p>Haskell中所有表达式都有一个类型，并且会在编译期提供类型检查。并且，Haskell中不允许隐式类型转换。</p>
<blockquote>
<p>静态/动态类型是指在程序执行过程中变量的类型是否允许改变。</p>
<p>弱/强类型是指程序是否允许隐式类型转换。</p>
</blockquote>
<h2 id="三个主题">三个主题</h2>
<p>在这个系列的学习中，会重点学习三个主题：</p>
<h3 id="类型">类型</h3>
<p>Haskell的严格的类型系统带来了以下好处：</p>
<ul>
<li><p>（被迫）更清晰的思考和表达程序结构。</p>
<p>一个函数的定义往往从思考并写下它的类型开始。</p></li>
<li><p>程序具有类似文档的形式。</p>
<p>每个函数的类型定义可以让使用者清楚地明白这个函数接受什么输出什么。</p></li>
<li><p>将运行期错误提前到编译期</p>
<p>更早发现错误的好处不言而谕。</p></li>
</ul>
<h3 id="抽象">抽象</h3>
<p>编程世界中有一句经常出现的话：“不要重复”，也叫抽象原则。意思是代码中的任何东西都不该在多处出现，所有的算法、数据段等内容都只该在一个确定的地方出现一次。比如相同的代码可以用函数封装起来供其它代码使用。</p>
<p>Haskell非常擅长抽象：像多态参数，高级函数和类型类这样的特性都是为了与重复斗争而加入的。</p>
<h3 id="全麦编程">全麦编程</h3>
<p>这词太离谱，总之就是在更整体的层面去思考问题。比如思考对一整个列表的操作，而不是列表里的一个个元素。开发一个解集而不是某个特定的解。想像一整个图，而不是某条路径。</p>
<p>在工程中体现为，先解决一个更普遍的问题，然后思考如何将普遍问题变换为一个特殊的问题。</p>
<p>举个例子，在C++或Java中，以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int acc = 0;</span><br><span class="line">for (int i = 0; i &lt; lst.length; ++i) &#123;</span><br><span class="line">	acc = acc + 3 * lst[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的目的其实就是：将lst中的所有元素乘以3，再计算它们的总和。</p>
<p>在Haskell中，可以写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum (map (3*) lst)</span><br></pre></td></tr></table></figure>
<p>Haskell需要我们将思维转变成一种更加高屋建瓴的方式，而这种思维方式可以帮助我们写出更便于理解的代码。比如，在C++中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义出两个基础函数，如果大量使用的话，这样看似繁琐的写法是值得的。因为它提供了更强大的抽象。</span></span><br><span class="line"><span class="comment">// 简单起见，暂不实现泛型的map和sum。</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">map</span><span class="params">(std::function&lt;<span class="type">void</span>(<span class="type">int</span>&amp;)&gt; func, std::vector&lt;<span class="type">int</span>&gt; &amp;n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : n) &#123;</span><br><span class="line">        <span class="built_in">func</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : n) &#123;</span><br><span class="line">        total += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 使用上面的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> acc = <span class="built_in">sum</span>(<span class="built_in">map</span>([](<span class="type">int</span> &amp;a)&#123;a += <span class="number">3</span>;&#125;, lst));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文档化的haskell">文档化的Haskell</h2>
<p>Haskell中支持一种以文档为主的文件格式<code>.lhs</code>，在这种格式下，以<code>&gt;</code>和一个空格开头的才被看做代码。这种文件格式可以更方便的写出大篇幅算法的解释等，毕竟没有人希望一个文件的主体全是注释。</p>
<h2 id="声明与变量">声明与变量</h2>
<p>观察以下代码：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">x</span> :: <span class="type">Int</span></span><br><span class="line"><span class="title">x</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释以两个横线开头</span></span><br><span class="line"><span class="comment">&#123;- 多行注释以两个</span></span><br><span class="line"><span class="comment">	括号-横线对包覆 -&#125;</span></span><br></pre></td></tr></table></figure>
<p>这段代码声明了一个Int类型的变量x（::后面用于定义类型说明），并且将其值声明为3。此后x的值不能被改变。也不能对x进行重定义。</p>
<p>不难看出=号在Haskell中的含义与在其它语言中的不同。它并不是赋值运算符（Haskell中无值可赋），而是用于定义。<code>x = 4</code>不应理解成将x的值置为4，应该理解为x被定义为4。</p>
<p>考虑下面定义：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">y</span> :: <span class="type">Int</span></span><br><span class="line"><span class="title">y</span> = y + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>多少人初学编程，无法理解这种等于自身+1的定义。后来终于将自己的思维扭转，只可惜历史是个圈。这个定义不再是y的值加1了，而是将y定义为y + 1。这是一个无限值，但由于Haskell的惰性求值特性，不使用它时并不会导致异常情况。</p>
<h2 id="基本类型">基本类型</h2>
<p>Haskell提供了一些耳熟能详的类型<code>Int</code>、<code>Char</code>、<code>Bool</code>、<code>Float</code>、<code>Double</code>与<code>String</code>，注意类型首字母要大写，以及几个注意事项。</p>
<ul>
<li><code>Int</code>大概相当于C++的int类型，长度取决于运行代码的机器。</li>
<li><code>Char</code>是Unicode编码字符。</li>
<li><code>Bool</code>的值为<code>True</code>和<code>False</code>，首字母依然要大写。</li>
<li><code>String</code>实际上是List的语法糖。</li>
</ul>
<p>Haskell也提供了无限大小的整形<code>Integer</code>，需要注意<code>Integer</code>与<code>Int</code>是不同的类型，不可混用。</p>
<p>注意Haskell中标识符使用小驼峰命名法。</p>
<h2 id="ghci">GHCi</h2>
<p>GHCi是Haskell的解释器，提供一个Haskell语言的解释运行环境，基本用法如下：</p>
<ul>
<li><code>:l</code>加载Haskell文件</li>
<li><code>:r</code>重新加载已加载文件</li>
<li><code>:q</code>退出GHCi</li>
<li><code>:?</code>打印帮助信息</li>
</ul>
<p>在GHCi中，可以很方便的测试简单代码。</p>
<h2 id="算术运算">算术运算</h2>
<p>可以在GHCi中进行一些简单运算的尝试：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 四则</span></span><br><span class="line"><span class="title">ex01</span> = <span class="number">3</span> + <span class="number">2</span></span><br><span class="line"><span class="title">ex02</span> = <span class="number">19</span> - <span class="number">27</span></span><br><span class="line"><span class="title">ex03</span> = <span class="number">2.35</span> * <span class="number">8.6</span></span><br><span class="line"><span class="title">ex04</span> = <span class="number">8.7</span> / <span class="number">3.1</span></span><br><span class="line"><span class="comment">-- 取模、乘方</span></span><br><span class="line"><span class="title">ex05</span> = mod <span class="number">19</span> <span class="number">3</span></span><br><span class="line"><span class="title">ex06</span> = <span class="number">19</span> `mod` <span class="number">3</span></span><br><span class="line"><span class="title">ex07</span> = <span class="number">7</span> ^ <span class="number">222</span></span><br><span class="line"><span class="comment">-- 负数</span></span><br><span class="line"><span class="title">ex08</span> = (-<span class="number">3</span>) * (-<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>Haskell在缺省类型说明时可以自动地推导类型。</li>
<li>所有运算符号本质都是函数。这些函数有的是中缀函数而有的是前缀函数，这是在定义时决定的。
<ul>
<li>默认情况下Haskell中的函数都是前缀函数。</li>
<li>前缀函数可以通过反引号当做中缀函数使用（ex06中的mod）。</li>
<li>函数调用不需要使用括号（函数调用符）。</li>
</ul></li>
<li>出现负数时要使用括号括起来，因为Haskell中没有函数调用符，负号与减号存在二义性（Haskell中为数不多的丑陋语法之一）。</li>
</ul>
<p>Haskell中不存在隐式类型转换，需要时必须使用显式类型转换，比如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将整型(Int, Integer)转换为任意其它类型时</span></span><br><span class="line"><span class="title">fromIntegral</span> n</span><br><span class="line"><span class="comment">-- 将浮点型转换为整型时，根据截断方式使用</span></span><br><span class="line"><span class="title">round</span> d</span><br><span class="line"><span class="title">floor</span> d</span><br><span class="line"><span class="title">ceiling</span> d</span><br></pre></td></tr></table></figure>
<p><code>/</code>运算符无法作用于整型，只能作用于符点类型。整除函数为<code>div</code>，是一个前缀函数。</p>
<h2 id="布尔运算">布尔运算</h2>
<p>与或非运算分别为：<code>&amp;&amp;</code>、<code>||</code>、<code>not</code>。注意非运算不再是！号了。</p>
<p>比较运算有：<code>==</code>、<code>/=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>。同样注意不等于不再是!=而是<code>/=</code>。</p>
<p>Haskell中也有<code>if condition then sth else sth</code>的表达式。但if表达式不是if语句，最大的区别在于if表达式不可省略else后的部分。</p>
<p>对于一个c++函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="comment">// modify x</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其意义为满足一定条件时，返回对x进行一些操作后的值，否则输出x本身。</p>
<p>而对于Haskell函数，需要这样写：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> n = <span class="keyword">if</span> condition <span class="keyword">then</span> modify n <span class="keyword">else</span> n</span><br></pre></td></tr></table></figure>
<p>这样上述写法才在语义上等效，其中的关键思路是：Haskell中的表达式总是需要一个结果，省略掉else将导致程序无法产生结果。</p>
<p>这也是Haskell与命令式语言不同之处的体现：并非逐步执行，而是计算表达式。</p>
<p>不过Haskell中并不常用到if表达式，更多时候使用的是模式匹配和一种被称为<em>守卫（guards）</em>的机制。</p>
<h2 id="定义基础函数">定义基础函数</h2>
<p>一个函数可以这样定义</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">suntorial</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumtorial</span> <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="title">sumtorial</span> n = n + sumtorial (n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>其中的语法：</p>
<ul>
<li><code>sumtorial :: Integer -&gt; Integer</code>说明了函数的类型，接收一个<code>Integer</code>作为参数，返回一个<code>Integer</code></li>
<li>其后可以跟随多个从句，运行时使用参数从最上方定义的从句开始逐条匹配，并返回第一条匹配成功的从句定义的计算结果。这个过程就是模式匹配，比如说：
<ul>
<li>计算<code>sumtorial 0</code>，首先使用参数0与第一个从句的参数：0比较，匹配成功，返回第一个从句的值：0。</li>
<li>计算<code>sumtorial 3</code>，首先使用参数3与第一个从句的参数：0比较，匹配失败，再与第二个从句的参数n比较，n是一个变量，可以接受任何值，匹配成功，返回第二个从句的值：<code>3 + sumtorial (3 - 1)</code>。
<ul>
<li>由于Haskell是惰性求值的，只有用到这个结果时才会将表达式展开作下一步运算，这里暂且不管。</li>
</ul></li>
</ul></li>
</ul>
<p>也可以使用布尔表达式来筛选参数，也就是守卫机制：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">hailstone</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">hailstone</span> n</span><br><span class="line">  | n `mod` <span class="number">2</span> == <span class="number">0</span> = n `div` <span class="number">2</span></span><br><span class="line">  | otherwise      = <span class="number">3</span> * n + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>守卫通过从句中的缩进（Haskell使用相同的缩进层级来划分代码块）和<code>|</code>来定义，从上而下进行判定，返回第一个满足条件的结果。<code>otherwise</code>表示无条件接收。</p>
<p>如果没有从句可以匹配变量，程序将报错退出。</p>
<p>一个细节，守卫是从句的下级机制，也就是说每个从句都可以拥有守卫：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">foo</span> <span class="number">0</span> = <span class="number">16</span></span><br><span class="line"><span class="title">foo</span> <span class="number">1</span></span><br><span class="line">  | <span class="string">&quot;Haskell&quot;</span> &gt; <span class="string">&quot;C++&quot;</span> = <span class="number">3</span></span><br><span class="line">  | otherwise = <span class="number">4</span></span><br><span class="line"><span class="title">foo</span> n</span><br><span class="line">  | n &lt; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line">  | n `mod` <span class="number">17</span> == <span class="number">2</span> = -<span class="number">43</span></span><br><span class="line">  | otherwise       = n + <span class="number">3</span></span><br><span class="line"><span class="comment">-- = 号并不需要对齐，这里只是出于美观对齐的</span></span><br></pre></td></tr></table></figure>
<p>这个例子也没啥意义，就是给看看怎么混合使用。</p>
<p>下面的程序是完全正确的，但有些啰嗦，考虑下问题在哪：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">isEven</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isEven</span> n</span><br><span class="line">  n `mod` <span class="number">2</span> == <span class="number">0</span> = <span class="type">True</span></span><br><span class="line">  otherwise      = <span class="type">False</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 其实真正有效的部分只有n `mod` 2 == 0，所以可以写成以下形式</span></span><br><span class="line"><span class="comment">-- 函数命名使用单引号是合法的</span></span><br><span class="line"><span class="title">isEven&#x27;</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isEven&#x27;</span> = n `mod` <span class="number">2</span> == <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="序对">序对</h2>
<p>可以使用序对（Pair）将两个东西组合起来，比如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">p</span> :: (<span class="type">Int</span>, <span class="type">Char</span>)</span><br><span class="line"><span class="title">p</span> = (<span class="number">3</span>, &#x27;x&#x27;)</span><br></pre></td></tr></table></figure>
<p>注意：<code>(x, y)</code>这种语法既可以表示序对类型也可以表示序对的值。</p>
<p>可以使用模式匹配将序对中的值提取出来：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sumPair</span> :: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sumPair</span> (x, y) = x + y</span><br></pre></td></tr></table></figure>
<p>Haskell中含有三元组和多元组，但很少使用，因为有更好的方法，这个方法容我日后再说。</p>
<h2 id="接受多个参数的函数">接受多个参数的函数</h2>
<p>要让函数接受多个参数，只要在类型声明时使用更多的-&gt;就可以了：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">f</span> x y z = x + y + z</span><br><span class="line"></span><br><span class="line"><span class="title">useF</span> = f <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>在多个-&gt;组成的串中，前几项依序表示参数，最后一项表示返回类型。你可能会疑惑为什么使用这样一个似乎很容易混淆的形式，而不是类似于<code>f :: Int Int Int -&gt; Int</code>这样的形式。这背后是一个很优雅的语言特性，但这个特性也得留待后议。</p>
<p>注意前缀函数的运算优先级比中缀函数要高，所以以下写法是错误的：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> <span class="number">3</span> n + <span class="number">1</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>因为它实际上会被解析成：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(f <span class="number">3</span> n) + (<span class="number">1</span> <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>正确的写法是加上括号：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> <span class="number">3</span> (n + <span class="number">1</span>) <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="列表">列表</h2>
<p>列表（List）是Haskell中最基本的类型之一，使用<code>[]</code>表示，其中元素以<code>,</code>分隔：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">nums</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">nums</span>   = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure>
<p>之前提到过<code>String</code>是List的语法糖, 实际上<code>String</code>类型就是<code>[Char]</code>类型，比如:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">hello1</span> :: [<span class="type">Char</span>]</span><br><span class="line"><span class="title">hello1</span> = [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br><span class="line"></span><br><span class="line"><span class="title">hello2</span> :: <span class="type">String</span></span><br><span class="line"><span class="title">hello2</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- helloSame 为 True</span></span><br><span class="line"><span class="title">helloSame</span> = hello1 == hello2</span><br></pre></td></tr></table></figure>
<h3 id="构建列表">构建列表</h3>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 最简单的列表就是空列表了</span></span><br><span class="line"><span class="title">emptyList</span> = []</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用构建运算符(:)将元素连接成列表, :运算符左边是一个元素，而右边是一个列表。</span></span><br><span class="line"><span class="title">ex18</span> = <span class="number">1</span> : []</span><br><span class="line"><span class="comment">-- :运算符符合右结合律，以便连接多个元素时可以省略括号。</span></span><br><span class="line"><span class="title">ex19</span> = <span class="number">3</span> : (<span class="number">1</span> : [])</span><br><span class="line"><span class="title">ex20</span> = <span class="number">2</span> : <span class="number">3</span> : <span class="number">4</span> : []</span><br><span class="line"></span><br><span class="line"><span class="comment">--[e1, e2, e3]实际上是e1 : e2 : e3 : []的语法糖</span></span><br><span class="line"><span class="title">ex21</span> = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] == <span class="number">2</span> : <span class="number">3</span> : <span class="number">4</span> : []</span><br><span class="line"></span><br><span class="line"><span class="comment">--[e1, e2..en]的写法可以根据前两个元素自动展开列表（等差数列），省略第二个元素的情况下差值为1</span></span><br><span class="line"><span class="comment">-- 1, 2, 3 ... 100</span></span><br><span class="line"><span class="title">range1</span> = [<span class="number">1</span> .. <span class="number">100</span>]</span><br><span class="line"><span class="comment">-- 2, 4, 6 ... 100</span></span><br><span class="line"><span class="title">range2</span> = [<span class="number">2</span>,<span class="number">4</span> .. <span class="number">100</span>]</span><br><span class="line"><span class="comment">-- a, b, c, d ... z</span></span><br><span class="line"><span class="title">range3</span> = [&#x27;a&#x27; .. &#x27;z&#x27;]</span><br><span class="line"><span class="comment">-- 10, 9 ... 1</span></span><br><span class="line"><span class="title">range4</span> = [<span class="number">10</span>, <span class="number">9</span> .. <span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 无限列表1,2,3...</span></span><br><span class="line"><span class="title">range5</span> = [<span class="number">1</span>, <span class="number">2</span> ..]</span><br><span class="line"><span class="comment">-- 使用浮点类型时要小心精度问题带来的异常情况</span></span><br><span class="line"><span class="comment">-- 实际生成[0.1， 0.3， 0.5， 0.7， 0.89999999， 1.09999999]</span></span><br><span class="line"><span class="title">range6</span> = [<span class="number">0.1</span>, <span class="number">0.3</span> .. <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列表生成式[expr | elem1&lt;-[range1], elem2&lt;-[range2]..., condition1, condition2...]</span></span><br><span class="line"><span class="comment">-- 看似复杂，其实记住：表达式，表达式中的变量怎么来的，变量的约束条件（条件需全部满足，即与关系）。</span></span><br><span class="line"><span class="comment">-- 很类似数学中集合的表示</span></span><br><span class="line"><span class="title">list</span> = [x * y | x&lt;-[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], y&lt;-[-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x &gt; y, y &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用函数生成列表, hailstone作为守卫机制的例子定义过了，可以翻回去看</span></span><br><span class="line"><span class="title">hailstoneSeq</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">hailstoneSeq</span> <span class="number">1</span> = [<span class="number">1</span>]</span><br><span class="line"><span class="title">hailstoneSeq</span> n = n : hailstoneSeq (hailstone n)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="操作列表">操作列表</h3>
<p>列表的基本操作如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用++运算符拼接两个列表</span></span><br><span class="line"><span class="comment">-- [1，2，3，4，5，6]</span></span><br><span class="line"><span class="title">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ++ [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用!!运算符取出列表中某个元素，类似数组下标，从0开始计数</span></span><br><span class="line"><span class="comment">-- n = 2</span></span><br><span class="line"><span class="title">n</span> = list!!<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="处理列表的函数">处理列表的函数</h2>
<p>可以使用模式匹配来处理列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">intListLength</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">intListLength</span> []  = <span class="number">0</span></span><br><span class="line"><span class="title">intListLength</span> (x:xs) = <span class="number">1</span> + intListLength xs</span><br><span class="line"><span class="comment">-- 对于仅仅用来表示模式而不实际使用的变量，如上例中x，可以使用下划线_占位</span></span><br><span class="line"><span class="title">intListLength</span> (_:xs) = <span class="number">1</span> + intListLength xs</span><br><span class="line"></span><br><span class="line"><span class="title">sumEveryTwo</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">sumEveryTwo</span> [] = []</span><br><span class="line"><span class="title">sumEveryTwo</span> (x : []) = [x]</span><br><span class="line"><span class="title">sumEveryTwo</span> (x : y : zs) = (x + y) : sunEveryTow zs</span><br></pre></td></tr></table></figure>
<h2 id="组合函数">组合函数</h2>
<p>在Haskell中要尽可能地使用简单的函数组合成复杂的功能，比如要求hailstone数的数量，可以这样编写：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">hailstoneLen</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">hailstoneLen</span> n = intListLength (hailstoneSeq n) - <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在这个函数中通过之前的例子定义的函数组合起来达成目的，其实这些函数本身也是由简单的函数组合成的，这样层层抽象将使得我们的心智负担更小。</p>
<h2 id="关于错误信息">关于错误信息</h2>
<p>不要害怕错误信息，它可以很好地帮助我们找出并改正代码中的错误。比如,在GHCi中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Prelude&gt; &#x27;x&#x27; ++ &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<p>将导致以下报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;interactive&gt;:1:1:</span><br><span class="line">  Coundn&#x27;t match expected type &#x27;[a0]&#x27; with actual type &#x27;Char&#x27;</span><br><span class="line">  In the first argument of &#x27;(++)&#x27;, namely &#x27;x&#x27;</span><br><span class="line">  In the expression: &#x27;x&#x27; ++ &quot;foo&quot;</span><br><span class="line">  In an equation for &#x27;it&#x27; : it = &#x27;x&#x27; ++ &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<p>乍一看头都大了，怎么这么长一串报错。实际上耐心看下去就会发现，错误信息包括了出错原因与地点，还层层递进的显示了出错的语法，是非常友好的。</p>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用移动硬盘制作本地git仓库</title>
    <url>/blog/2021/06/27/0014-Make_a_local_git_repository/</url>
    <content><![CDATA[<blockquote>
<p>在一个普通的日子，突然想到用闲置的移动硬盘做一个本地git仓库。简单的理了理思路，确定了几个步骤：</p>
<ol type="1">
<li>准备硬盘，比如分区与格式化。</li>
<li>自动挂载硬盘，实现即插即用。</li>
<li>使用硬盘托管代码。</li>
</ol>
<p>于是放了一首歌，戴上耳机，哼着小曲开始了这次折腾。</p>
</blockquote>
<span id="more"></span>
<h2 id="制备硬盘">制备硬盘</h2>
<p>使用fdisk将这块硬盘上的分区全部删除，然后创建一个新的分区，具体步骤这里略过。</p>
<p>现在是时候格式化分区了，就决定是你了Ext4......等等，既然这个分区只是用来托管代码，为什么不试试没用过的文件系统呢？就决定是你了——Btrfs！</p>
<p>查阅了ArchWiki，Btrfs的介绍是这样的：</p>
<blockquote>
<p>Btrfs 是一种新型的写时复制 (CoW) Linux 文件系统，已经并入内核主线。Btrfs 在设计实现高级功能的同时，着重于容错、修复以及易于管理。它由 Oracle, Red Hat, Fujitsu, Intel, SUSE, STRATO 等企业和开发者共同开发，Btrfs 以 GNU GPL 协议授权，同时也欢迎任何人的贡献。</p>
</blockquote>
<p>经过了解，发现几个比较感兴趣的特点：</p>
<ul>
<li>写时复制：任何写入操作都发生在空闲空间。与传统方式最显著的区别大概在于文件覆写时：传统方式直接在文件相应位置写入，而写时复制方式在空闲空间写入数据并通过修改原文件的元数据以使其相应位置的引用指向写入的位置，并在原地址引用数为0时释放其数据。</li>
<li>透明压缩：btrfs可以自动的尝试压缩文件，这样一方面减少了文件大小，另一方面显著延长了闪存介质的寿命。</li>
<li>SSD TRIM：btrfs可以从支持TRIM 命令的 SSD 驱动器中释放未使用的块。已释放的空间范围不会被马上丢弃，它们会被集中起来并在稍后由一个单独的工作线程进行 TRIM，这将能改善提交延迟，以提高SSD的性能。</li>
</ul>
<p>为了实现上述功能在挂载时需要添加两个参数：</p>
<p><code>compress=zstd</code>：使用zstd算法启用自动压缩。</p>
<p><code>discard=async</code>：使用SSD TRIM。</p>
<h2 id="自动挂载">自动挂载</h2>
<p>首先简单实现一个通过UUID挂载分区的脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/local/bin/mount_repo</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载点</span></span><br><span class="line">readonly target_dir=&quot;/mnt/Repo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过UUID获取分区名</span></span><br><span class="line">label=`lsblk -f | grep 5398cf0b-266e-4874-a8e7-1ac903013b48 | grep -o -E sd..`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分区名存在则挂载，否则尝试卸载挂载点</span></span><br><span class="line">if [ $&#123;label&#125; ]</span><br><span class="line">then</span><br><span class="line">    label=&quot;/dev/&quot;$&#123;label&#125;</span><br><span class="line">    echo $&#123;label&#125;</span><br><span class="line">    mkdir $&#123;target_dir&#125;</span><br><span class="line">    mount -o compress=zstd,discard=async $&#123;label&#125; $&#123;target_dir&#125;</span><br><span class="line">else</span><br><span class="line">    echo &quot;no device&quot;</span><br><span class="line">    umount $&#123;target_dir&#125;</span><br><span class="line">    rmdir $&#123;target_dir&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>现在我们有了通过指定UUID挂载分区的脚本了。问题是如何才能让硬盘插入时自动挂载呢？几经查询，发现了udev。</p>
<h3 id="使用udev">使用udev</h3>
<p>ArchWiki对udev的介绍如下：</p>
<blockquote>
<p>udev 是 Linux 内核的设备管理器。总的来说，它取代了 devfs 和 hotplug，负责管理 <code>/dev</code> 中的设备节点。同时，udev 也处理所有用户空间发生的硬件添加、删除事件，以及某些特定设备所需的固件加载。</p>
<p>与传统的顺序加载相比，udev 通过并行加载内核模块提供了潜在的性能优势。异步加载模块的方式也有一个天生的缺点：无法保证每次加载模块的顺序，如果机器具有多个块设备，那么它们的设备节点可能随机变化。例如如果有两个硬盘，<code>/dev/sda</code> 可能会随机变成<code>/dev/sdb</code>。</p>
</blockquote>
<p>当一个设备被添加或是移除时，udev会从kernel得知这个事件。然后遍历规则文件目录（默认在/etc/udev/rules.d）中的规则文件寻找匹配的规则，有就按规则处理，没有就作默认处理。</p>
<p>也就是说，我们可以通过编写规则文件的方式让udev在加载硬盘时进行挂载处理。</p>
<h4 id="udev规则简介">udev规则简介</h4>
<p>udev规则文件中的一行就是一条规则，一条规则包括了匹配部分和动作部分，各部分通过逗号<code>,</code>分隔。具有如下形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cond1,cond2,cond3,...,action1, action2, action3</span><br></pre></td></tr></table></figure>
<p>可以使用换行符<code>\</code>将一条规则分成几行编写。比如，对于以下规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KERNEL==&quot;video[0-9]*&quot; \</span><br><span class="line">  , SUBSYSTEM==&quot;video4linux&quot; \</span><br><span class="line">  , SUBSYSTEMS==&quot;usb&quot; \</span><br><span class="line">  , ATTRS&#123;idVendor&#125;==&quot;05a9&quot; \</span><br><span class="line">  , ATTRS&#123;idProduct&#125;==&quot;4519&quot; \</span><br><span class="line">  , SYMLINK+=&quot;video-cam1&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>KERNEL</code>是设备的卷标，这条规则使用了一个正则表达式对其进行匹配。</li>
<li><code>SUBSYSTEM</code>表示设备的类型</li>
<li><code>ATTRS&#123;sth.&#125;</code>获取设备的某个属性，属性名写在大括号中。</li>
<li><code>SYMLINK</code>是对该设备的软链接，使用+=对设备创建一个软链接。使用+=而不是=是因为不想覆盖掉默认操作。</li>
</ul>
<h4 id="编写自动挂载规则">编写自动挂载规则</h4>
<p>根据这个例子，摸着石头过河，编写一个使用脚本自动挂载硬盘的规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KERNEL==&quot;sd[a-z][0-9]&quot; \</span><br><span class="line">  , ACTION==&quot;remove&quot; \</span><br><span class="line">  , ATTRS&#123;idVendor&#125;==&quot;08e4&quot; \</span><br><span class="line">  , ATTRS&#123;idProduct&#125;==&quot;01e8&quot; \</span><br><span class="line">  , RUN+=&quot;/usr/local/bin/mount_repo&quot; </span><br><span class="line"></span><br><span class="line">KERNEL==&quot;sd[a-z][0-9]&quot; \</span><br><span class="line">  , ACTION==&quot;add&quot; \</span><br><span class="line">  , ATTRS&#123;idVendor&#125;==&quot;08e4&quot; \</span><br><span class="line">  , ATTRS&#123;idProduct&#125;==&quot;01e8&quot; \</span><br><span class="line">  , RUN+=&quot;/usr/local/bin/mount_repo&quot;</span><br></pre></td></tr></table></figure>
<p>使用<code>udevadm control --reload</code>重新加载规则。</p>
<p>到这里，非常开心地，我们掉进坑里了。这条规则可以运行，但mount命令会出错，导致并不能如预期那样工作。</p>
<p>然后才看见ArchWiki上这条警告：</p>
<blockquote>
<p><strong>警告：</strong> 要挂载可移动设备，请<strong>不要</strong>通过在 udev 规则中调用 <code>mount</code> 命令的方法。对 FUSE 文件系统将会导致 <code>Transport endpoint not connected</code> 错误。应代之以 <a class="link"   href="https://wiki.archlinux.org/title/Udisks_(简体中文)" >udisks<i class="fas fa-external-link-alt"></i></a> 以正确处理自动挂载。或者把挂载动作放在 udev 规则内部：</p>
<p>将 <code>/usr/lib/systemd/system/systemd-udevd.service</code> 复制到 <code>/etc/systemd/system/systemd-udevd.service</code>，将 <code>MountFlags=slave</code> 替换为 <code>MountFlags=shared</code>。<a class="link"   href="https://unix.stackexchange.com/a/154318" >（来源）<i class="fas fa-external-link-alt"></i></a></p>
<p>Keep in mind though that udev is not intended to invoke long-running processes.</p>
</blockquote>
<p>试图更改systemd-udevd.service，发现没效果。几经辗转，发现使用systemd可以解决这个问题。不再需要折腾systemd-udevd.service了。</p>
<p>首先创建一个service，repo.service：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Mount Repository Device on /mnt/Repo</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=true</span><br><span class="line">ExecStart=/usr/local/bin/mount_repo</span><br><span class="line">ExecStop=/usr/local/bin/mount_repo</span><br></pre></td></tr></table></figure>
<p>使用<code>systemctl daemon-reload</code>重新加载服务。</p>
<p>然后将规则文件改写为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KERNEL==&quot;sd[a-z][0-9]&quot; \</span><br><span class="line">  , ACTION==&quot;remove&quot; \</span><br><span class="line">  , ATTRS&#123;idVendor&#125;==&quot;08e4&quot; \</span><br><span class="line">  , ATTRS&#123;idProduct&#125;==&quot;01e8&quot; \</span><br><span class="line">  , RUN+=&quot;/bin/systemctl stop repo.service&quot; </span><br><span class="line"></span><br><span class="line">KERNEL==&quot;sd[a-z][0-9]&quot; \</span><br><span class="line">  , ACTION==&quot;add&quot; \</span><br><span class="line">  , ATTRS&#123;idVendor&#125;==&quot;08e4&quot; \</span><br><span class="line">  , ATTRS&#123;idProduct&#125;==&quot;01e8&quot; \</span><br><span class="line">  , RUN+=&quot;/bin/systemctl start repo.service&quot;</span><br></pre></td></tr></table></figure>
<p>使用<code>udevadm control --reload</code>重新加载规则。</p>
<p>到这里，自动挂载就可以正常工作了。</p>
<h2 id="在硬盘上创建仓库">在硬盘上创建仓库</h2>
<p>在使用<code>git --bare init</code>创建一个远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /mnt/Repo</span><br><span class="line">mkdir test.git</span><br><span class="line">cd test.git</span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure>
<p>为本地git仓库添加这个远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/someprojects</span><br><span class="line">git remote add Repo /mnt/Repo/test.git</span><br><span class="line">git push remote master</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>这次的折腾算是记录一下与udev的初次接触。使用linux的过程中总能用到以为永远不会碰的工具，这也是linux的魅力所在吧。</p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Github之禁忌的双重污染</title>
    <url>/blog/2021/07/16/0015-Double_pollution_of_Github/</url>
    <content><![CDATA[<blockquote>
<p>Http被污染的时候，我没有说话，因为我用SSH。</p>
<p>SSH被污染的时候，我只好乖乖地去修改我的host文件了。</p>
</blockquote>
<span id="more"></span>
<h2 id="查询正确的ip地址">查询正确的IP地址</h2>
<p>使用这个网站<a class="link"   href="https://www.ipaddress.com/" >ipaddress.com<i class="fas fa-external-link-alt"></i></a>进行查询，输入域名获得IP地址。</p>
<p>查询结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意，这个ip地址可能会改变，每次配置前最好重新查询</span><br><span class="line">github.com: 140.82.112.4</span><br><span class="line">global-ssh.fastly.net: 199.232.4.249</span><br></pre></td></tr></table></figure>
<h2 id="修改host文件">修改host文件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/hosts</span><br><span class="line"># 在末尾添加以下记录</span><br><span class="line"># github</span><br><span class="line">140.82.112.4 github.com</span><br><span class="line">140.82.112.4 raw.githubusercontent.com</span><br><span class="line">140.82.112.4 user-images.githubusercontent.com</span><br><span class="line">140.82.112.4 avatars2.githubusercontent.com</span><br><span class="line">140.82.112.4 avatars1.githubusercontent.com</span><br><span class="line"></span><br><span class="line"># ssh</span><br><span class="line">199.232.4.249 global-ssl.fastly.net</span><br><span class="line">199.232.4.249 github.global-ssl.fastly.net</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Great Wall</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（二）——ADT</title>
    <url>/blog/2021/07/17/0016-Re0:Haskell_02/</url>
    <content><![CDATA[<blockquote>
<p>这是系列的第二篇，主题是ADT：代数数据类型。</p>
</blockquote>
<span id="more"></span>
<h2 id="前言关于haskell与数学基础">前言：关于Haskell与数学基础</h2>
<p>网上冲浪时看见很多类似于“学好Haskell一定要学会抽象代数和范畴论”这类的言论，这一度动摇了我学习Haskell的信心，考虑着是不是先学习相关的数学理论。后来想了想，或许学好Haskell一定要学会这些，但在入门阶段并不需要过于在意其中的数学原理，先上手再说。</p>
<p>就像我们学习C++的过程中，操作系统、计算机组成和数据结构相关的知识是非常有帮助的。了解了整个计算机体系后，理解C++的涉及底层的概念会非常容易。但我们也不必因此在入门阶段就直接去学习整个计算机原理。</p>
<p>于是废话说完，开始这次的Haskell之旅。</p>
<h2 id="枚举类型">枚举类型</h2>
<p>Haskell使用如下语法创建枚举（Enum）类型：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Thing</span> = <span class="type">Shoe</span></span></span><br><span class="line">           | <span class="type">Ship</span></span><br><span class="line">           | <span class="type">SealingWax</span></span><br><span class="line">           | <span class="type">Cabbage</span></span><br><span class="line">           | <span class="type">King</span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure>
<p>这段代码定义了一个名为<code>Thing</code>的类型，它有5个值构造器（data constructors），这些值构造器就是<code>Thing</code>可能拥有的值。</p>
<p><code>deriving Show</code>为<code>Thing</code>加载了显示功能，这使得它可以被当做字符串打印，这其中的细节之后再说。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用Thing</span></span><br><span class="line"><span class="comment">-- 作为变量</span></span><br><span class="line"><span class="title">shoe</span> :: <span class="type">Thing</span></span><br><span class="line"><span class="title">shoe</span> = <span class="type">Shoe</span></span><br><span class="line"><span class="comment">-- 作为列表类型</span></span><br><span class="line"><span class="title">listOfThings</span> :: [<span class="type">Thing</span>]</span><br><span class="line"><span class="title">listOfThings</span> = [<span class="type">Shoe</span>, <span class="type">Ship</span>, <span class="type">SealingWax</span>]</span><br><span class="line"><span class="comment">-- 作为函数参数</span></span><br><span class="line"><span class="title">isSmall</span> :: <span class="type">Thing</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isSmall</span> <span class="type">Shoe</span>       = <span class="type">True</span></span><br><span class="line"><span class="title">isSmall</span> <span class="type">Ship</span>       = <span class="type">False</span></span><br><span class="line"><span class="title">isSmall</span> <span class="type">SealingWax</span> = <span class="type">True</span></span><br><span class="line"><span class="title">isSmall</span> <span class="type">Cabbage</span>    = <span class="type">True</span></span><br><span class="line"><span class="title">isSmall</span> <span class="type">King</span>       = <span class="type">False</span></span><br></pre></td></tr></table></figure>
<p>可以看到枚举类型的用途和我们在其它语言中用到的enum很相似。</p>
<h2 id="不只是枚举">不只是枚举</h2>
<p>其实在Haskell中，枚举类型只是一个ADT（Algebraic Data Types，代数数据类型）的特例。下面是一个不是枚举类型的ADT：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">FailableDouble</span> = <span class="type">Failure</span></span></span><br><span class="line">                    | <span class="type">OK</span> <span class="type">Double</span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure>
<p>这个<code>FailableDouble</code>类型有两个值构造器，第一个值构造器<code>Failure</code>不接受参数，所以它本身就是<code>FailableDouble</code>的值；而第二个值构造器<code>OK</code>接受一个<code>Double</code>类型的参数，因此它本身并不成为<code>FailableDouble</code>的值，需要加上一个<code>Double</code>才能做为值。比如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ex01</span> = <span class="type">Failure</span></span><br><span class="line"><span class="title">ex02</span> = <span class="type">OK</span> <span class="number">3.4</span></span><br></pre></td></tr></table></figure>
<p>思考：<code>OK</code>的类型是什么？</p>
<p>它看起来像接收一个<code>Double</code>，返回一个<code>FailableDouble</code>的函数，用起来也像这样一个函数，那么我说，它就是一个<code>Double -&gt; FailableDouble</code>类型的函数。</p>
<p>既然值构造器的类型是函数，那么理所当然地，<strong>值构造器可以接受多个参数</strong>。由此可以创建一个这样的类型：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Person</span> = <span class="type">Person</span> <span class="type">String</span> <span class="type">Int</span> <span class="type">Thing</span></span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure>
<p>注意这里的两个<code>Person</code>是不同的，等号左侧的<code>Person</code>称为类型构造器，用于指代类型；而等号右侧的<code>Person</code>是一个与类型构造器同名的值构造器，用于生成一个具体的<code>Person</code>类型的值。比如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">brent</span> :: <span class="type">Person</span>                      <span class="comment">-- 类型构造器，说明类型</span></span><br><span class="line"><span class="title">brent</span> = <span class="type">Person</span> <span class="string">&quot;Brent&quot;</span> <span class="number">31</span> <span class="type">SealingWax</span> <span class="comment">-- 值构造器，生成一个值</span></span><br></pre></td></tr></table></figure>
<p>这还导致了一个有趣的现象，就是你在类型声明中使用的永远是类型构造器，而在需要这个类型的值的地方使用的永远是值构造器。</p>
<h2 id="一般形式的adt">一般形式的ADT</h2>
<p>通常一个ADT有一个或多个值构造器，而每个值构造器接收一个或多个参数。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">ADT</span> = <span class="type">Constr1</span> <span class="type">Type11</span> <span class="type">Type12</span></span></span><br><span class="line">         | <span class="type">Constr2</span> <span class="type">Type21</span></span><br><span class="line">         | <span class="type">Constr3</span> <span class="type">Type31</span> <span class="type">Type32</span> <span class="type">Type33</span></span><br><span class="line">         | <span class="type">Constr4</span></span><br><span class="line"><span class="comment">&#123;-</span></span><br><span class="line"><span class="comment">声明了一个名为ADT且含有4个值构造器的ADT，这四个值构造器分别接受不同数量的不同类型参数。</span></span><br><span class="line"><span class="comment">-&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意：类型构造器与值构造器的标识符永远以大写字母开头，而变量（包括函数）永远以小写字母开头。</p>
<h2 id="模式匹配">模式匹配</h2>
<p>根本上，模式匹配就是通过找出值构造器来对值进行分解。比如说，要想对上一节定义的类型<code>ADT</code>中的值进行操作，我们只要这样写：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> (<span class="type">Constr1</span> a b)   = ...</span><br><span class="line"><span class="title">foo</span> (<span class="type">Constr2</span> a)     = ...</span><br><span class="line"><span class="title">foo</span> (<span class="type">Constr3</span> a b c) = ...</span><br><span class="line"><span class="title">foo</span> <span class="type">Constr4</span>         = ...</span><br></pre></td></tr></table></figure>
<p>注意这里使用a、b、c为值命名，以及接受参数的值构造器要包围在括号里。</p>
<p>这就是模式匹配的主要思想了，但还有一些值得注意的地方：</p>
<ol type="1">
<li><p>下划线<code>_</code>可以匹配任何东西。</p></li>
<li><p>x@pat形式的模式可以在以pat匹配值的同时用x匹配整个值。例：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">baz</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">baz</span> p@(<span class="type">Person</span> n _ _) = <span class="string">&quot;The name field of (&quot;</span> ++ show p ++ <span class="string">&quot;) is &quot;</span> ++ n</span><br><span class="line"></span><br><span class="line"><span class="comment">&#123;- </span></span><br><span class="line"><span class="comment">运行：baz brent</span></span><br><span class="line"><span class="comment">结果：&quot;The name field of (Person \&quot;Brent\&quot; 31 SealingWax) is Brent&quot;</span></span><br><span class="line"><span class="comment">-&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>模式可以嵌套。例：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">checkFav</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">checkFav</span> (<span class="type">Person</span> n _ <span class="type">SealingWax</span>) = n ++ <span class="string">&quot;, you&#x27;re my kind of person!&quot;</span></span><br><span class="line"><span class="title">checkFav</span> (<span class="type">Person</span> n _ _)          = n ++ <span class="string">&quot;, you favorite thing is lame.&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意这里的<code>Person</code>和<code>SealingWax</code>是嵌套的模式。</p></li>
</ol>
<p>注意，对于像<code>2</code>和<code>'c'</code>这样字面值，可以看做是一个不接受参数的值构造器。</p>
<h2 id="case表达式">case表达式</h2>
<p>case表达式是Haskell中一个用于模式匹配的基础结构：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">case</span> exp <span class="keyword">of</span></span><br><span class="line">  pat1 -&gt; exp1</span><br><span class="line">  pat2 -&gt; exp2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>其机制为使用exp从上而下地依次匹配模式，表达式的值为第一个匹配成功的模式对应的表达式的值。例：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">failureToZero&#x27;</span> :: <span class="type">FailableDouble</span> -&gt; <span class="type">Double</span></span><br><span class="line"><span class="title">failureToZero&#x27;</span> x = <span class="keyword">case</span> x <span class="keyword">of</span></span><br><span class="line">                    <span class="type">Failure</span> -&gt; <span class="number">0</span></span><br><span class="line">                    <span class="type">OK</span> d -&gt; d</span><br></pre></td></tr></table></figure>
<h2 id="递归数据结构">递归数据结构</h2>
<p>数据结构可以是递归的，即自己可以是自己的组成部分。比如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义一个`Int`类型的列表</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IntList</span> = <span class="type">Empty</span> | <span class="type">Cons</span> <span class="type">Int</span> <span class="type">IntList</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> = <span class="type">Leaf</span> <span class="type">Char</span></span></span><br><span class="line">          | <span class="type">Node</span> <span class="type">Tree</span> <span class="type">Int</span> <span class="type">Tree</span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br><span class="line">  </span><br><span class="line"><span class="title">lst</span> :: <span class="type">IntList</span></span><br><span class="line"><span class="title">lst</span> = <span class="type">Cons</span> <span class="number">1</span> (<span class="type">Cons</span> <span class="number">2</span> <span class="type">Empty</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">tree</span> :: <span class="type">Tree</span></span><br><span class="line"><span class="title">tree</span> = <span class="type">Node</span> (<span class="type">Leaf</span> &#x27;x&#x27;) <span class="number">1</span> (<span class="type">Node</span> (<span class="type">Leaf</span> &#x27;y&#x27;) <span class="number">2</span> (<span class="type">Leaf</span> &#x27;z&#x27;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的层序遍历</title>
    <url>/blog/2021/07/18/0017-Binary_tree:Level_order_traversal/</url>
    <content><![CDATA[<blockquote>
<p>对之前的文章：<a class="link"   href="https://blog.xilong.site/2020/04/24/0004-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E9%9D%9E%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/" >二叉树的存储结构及其非层序遍历<i class="fas fa-external-link-alt"></i></a>的一点小补充。</p>
</blockquote>
<span id="more"></span>
<h2 id="原理">原理</h2>
<p>使用一个队列来对每个节点进行<code>入队-加入子节点-访问-出队</code>的操作即可，非常简单。</p>
<p>伪码表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：待访问的二叉树Tree</span><br><span class="line">输出：对节点的层序访问</span><br><span class="line">View:</span><br><span class="line">  queue.push Tree</span><br><span class="line">  while !queue.empty:</span><br><span class="line">    if (Tree.left) queue.push Tree.left</span><br><span class="line">    if (Tree.right) queue.push Tree.right</span><br><span class="line">    Tree.show</span><br><span class="line">    queue.pop</span><br></pre></td></tr></table></figure>
<h2 id="c实现">C++实现</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单实现一个二叉树</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="built_in">Tree</span>() : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">data</span>(<span class="number">0</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    Tree *left;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Tree *right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">View</span><span class="params">(<span class="type">const</span> Tree &amp;T)</span> </span>&#123;</span><br><span class="line">    queue&lt;Tree&gt; nodeQueue;</span><br><span class="line">    nodeQueue.<span class="built_in">push</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (!nodeQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur.left) nodeQueue.<span class="built_in">push</span>(*cur.left);</span><br><span class="line">        <span class="keyword">if</span> (cur.right) nodeQueue.<span class="built_in">push</span>(*cur.right);</span><br><span class="line">        nodeQueue.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; cur.data;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="haskell实现">Haskell实现</h2>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> = <span class="type">Empty</span> | <span class="type">Node</span> <span class="type">Tree</span> <span class="type">String</span> <span class="type">Tree</span></span></span><br><span class="line">  <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Show</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将树转变为层序遍历序列</span></span><br><span class="line"><span class="title">view</span> :: <span class="type">Tree</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">view</span> = view&#x27;.view&#x27;&#x27;</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- 将一个树的列表转变为对应的值的列表</span></span><br><span class="line">    view&#x27; :: [<span class="type">Tree</span>] -&gt; <span class="type">String</span></span><br><span class="line">    view&#x27; [] = <span class="string">&quot;&quot;</span></span><br><span class="line">    view&#x27; ((<span class="type">Node</span> _ str _):xs) = str ++ view&#x27; xs</span><br><span class="line">    <span class="comment">-- 将一个树转变为其层序遍历的列表</span></span><br><span class="line">    view&#x27;&#x27; :: <span class="type">Tree</span> -&gt; [<span class="type">Tree</span>]</span><br><span class="line">    view&#x27;&#x27; <span class="type">Empty</span> = []</span><br><span class="line">    view&#x27;&#x27; t = extend [t] <span class="number">0</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">        extend :: [<span class="type">Tree</span>] -&gt; <span class="type">Int</span> -&gt; [<span class="type">Tree</span>]</span><br><span class="line">        extend ts n = <span class="keyword">if</span>(n &gt;= length ts) <span class="keyword">then</span> ts</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">case</span> (ts!!n) <span class="keyword">of</span></span><br><span class="line">                (<span class="type">Node</span> left _ right) -&gt; extend (ts </span><br><span class="line">                    ++ (<span class="keyword">if</span> (left == <span class="type">Empty</span>) <span class="keyword">then</span> [] <span class="keyword">else</span> [left]) </span><br><span class="line">                    ++ (<span class="keyword">if</span> (right == <span class="type">Empty</span>) <span class="keyword">then</span> [] <span class="keyword">else</span> [right])) </span><br><span class="line">                    (n + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Haskell学艺不精，写得挺丑，留待日后优化吧。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>二叉树</tag>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>C++变量初始化</title>
    <url>/blog/2021/07/19/0019-C++:Variable_initialization/</url>
    <content><![CDATA[<blockquote>
<p>使用列表初始化时发现记忆很模糊，写下来备忘顺便总结一下。</p>
</blockquote>
<span id="more"></span>
<h2 id="初始化的概念">初始化的概念</h2>
<p>初始化是指<strong>创建变量时赋予其一个初始值</strong>。特别要注意C++中初始化与赋值的区别，赋值的含义是抹去原有的值后赋予一个新值。不可以将赋值和初始化混为一谈。</p>
<p>比如对于一个类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Whatever</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Whatever</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> v1;</span><br><span class="line">    <span class="type">int</span> v2;</span><br><span class="line">    std::string key;</span><br><span class="line">    OtherClass value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>考虑其构造函数两种定义形式的区别：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用初始值列表</span></span><br><span class="line">Whatever::<span class="built_in">Whatever</span>() : <span class="built_in">v1</span>(...), <span class="built_in">v2</span>(...), <span class="built_in">key</span>(...), <span class="built_in">value</span>(...) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在构造函数内赋值</span></span><br><span class="line">Whatever::<span class="built_in">Whatever</span>() &#123;</span><br><span class="line">    v1 = ...;</span><br><span class="line">    v2 = ...;</span><br><span class="line">    key = ...;</span><br><span class="line">    value = ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种方式的区别在于，只有使用了初始值列表的方式真正实现了初始化，而构造函数内赋值的做法等价于先<em>默认初始化</em>一个对象中的所有成员再分别对其中的成员赋值。由于我们创建一个对象后马上就会调用它的构造函数，这两种方法似乎并没有显著的区别。</p>
<p>考虑到初始化和赋值的过程，可以知道先初始化再赋值的开销至少是直接初始化的两倍。对于一个内置类型的成员而言这样的代价可以忽略不计，然而一个类类型成员的构造代价却有可能非常大。因此，定义构造函数时应尽量使用初始值列表的方式，这不单是为了节省这些性能，也是一个语义上的准确表达。</p>
<h2 id="默认初始化">默认初始化</h2>
<p>定义一个变量而不显式指定初始值时，变量被默认初始化。默认初始化的规则如下</p>
<ul>
<li>类类型对象：由类的默认构造函数定义。</li>
<li>内置类型对象：
<ul>
<li>全局对象：初值为0。</li>
<li>非全局对象：不初始化，其值为未定义的，取决于分配到的内存块上已存在的值。</li>
</ul></li>
</ul>
<p>试图默认初始化一个不允许默认初始化的类类型对象将导致编译错误。</p>
<h2 id="直接初始化">直接初始化</h2>
<p>定义时显式地调用对象的构造函数称为直接初始化，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>注意，只有定义时调用构造函数才是初始化，通过构造函数修改已存在变量的值也是赋值操作。</p>
<h2 id="列表初始化">列表初始化</h2>
<p>在C++11之前，可以对POD（Plain Old Data，即可以使用memcpy拷贝的类型）类型和内置数组进行列表初始化，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 列表初始化, x = 1, y = 2</span></span><br><span class="line">A a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// 列表初始化, x = 1, y默认构造</span></span><br><span class="line">A a = &#123;<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>C++11以后，这种初始化方式得到了普及，现在可以对任何对象使用列表初始化并且无需<code>=</code>号。如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a&#123;<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::string str&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>列表初始化有一个重要特性，内置类型不会进行隐式类型转换。比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1.5</span>; <span class="comment">// a == 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">b</span><span class="params">(<span class="number">1.5</span>)</span></span>;  <span class="comment">// b == 1</span></span><br><span class="line"><span class="type">int</span> c&#123;<span class="number">1.5</span>&#125;;  <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>列表初始化和初始化列表有关系吗？答案是大有关系。列表初始化就是根据定义了初始化列表的构造函数初始化对象的。比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a, <span class="type">int</span> b) : <span class="built_in">x</span>(a), <span class="built_in">y</span>(b) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">A&#123;a, b&#125; == <span class="built_in">A</span>(a, b) <span class="comment">// .x == a, .y == b</span></span><br></pre></td></tr></table></figure>
<p>那么类似于数组形式的列表初始化是如何实现的呢？使用<code>std::initializer_list</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>(initializer_list&lt;<span class="type">int</span>&gt; list) </span><br><span class="line">    : <span class="built_in">size</span>(list.<span class="built_in">size</span>()), <span class="built_in">head</span>(<span class="keyword">new</span> <span class="type">int</span>[size]) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : list) &#123;</span><br><span class="line">            *cur = i;</span><br><span class="line">            ++cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> *head;</span><br><span class="line">&#125;; <span class="comment">// 一个简单的数组， 可以接受任意数量的参数</span></span><br><span class="line">A&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; == <span class="built_in">A</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>当同时存在接受参数的构造函数和接受<code>std::initializer_list</code>的构造函数时，列表初始化优先调用接受<code>std::initializer_list</code>的构造函数。</p>
<h2 id="拷贝初始化">拷贝初始化</h2>
<p>使用<code>Type id = value</code>或<code>Type id(value) // value 为一个Type类型的变量</code>的形式定义的初始化称为拷贝初始化。其实质是使用另一个对象的值来构造对象，使用拷贝赋值运算符函数定义其行为。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++三/五法则</title>
    <url>/blog/2021/07/18/0018-C++:The_rule_of_three_five/</url>
    <content><![CDATA[<blockquote>
<p>本以为三/五法则作为一个基础知识早已烂熟于心，未想纸上得来终是浅，还是在这个地方翻了次车。</p>
</blockquote>
<span id="more"></span>
<h2 id="什么是三五法则">什么是三/五法则</h2>
<ul>
<li>三法则：C++11之前，一个需要<code>析构函数</code>的类也需要<code>拷贝构造函数</code>和<code>拷贝赋值运算符</code>。这三个组件总是成套出现，因此叫三法则。</li>
<li>五法则：C++11以后，一个需要<code>析构函数</code>的类同时需要<code>拷贝构造函数</code>、<code>拷贝赋值运算符</code>和<code>移动构造函数</code>以及<code>移动赋值运算符</code>。成套出现的组件数量变成了五，因此叫五法则。</li>
</ul>
<p>对于这两个法则，虽然内容在添加移动语义后有一些变化，但核心思想都是一样的。即类的基础组件应该成套构成。因此合称为三/五法则。</p>
<h2 id="翻车实况">翻车实况</h2>
<p>也许你会疑惑，这么浅显的地方怎么会翻车，看了这个翻车实况或许就会发现你也可能犯这样的错误。</p>
<p>起因是昨天写<a class="link"   href="https://blog.xilong.site/2021/07/18/0017-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/" >二叉树的层序遍历<i class="fas fa-external-link-alt"></i></a>时，需要一个C++的实现，方便起见，我定义了一个非常简单的二叉链表结构来构造二叉树：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="built_in">Tree</span>() : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">data</span>(<span class="number">0</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    Tree *left;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Tree *right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以及不可忽视的两点：</p>
<ol type="1">
<li><p>我的遍历函数使用了<strong><em>常量引用传递</em></strong>的方式接收树</p></li>
<li><p>遍历函数内部用到了<code>std::queue</code>作为遍历队列。存储相关语句为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// std::queue&lt;Tree&gt; nodeQueue;</span></span><br><span class="line"><span class="comment">// cur = nodeQueue.front();</span></span><br><span class="line">nodeQueue.<span class="built_in">push</span>(T);</span><br><span class="line"><span class="keyword">if</span> (cur.left)  nodeQueue.<span class="built_in">push</span>(*cur.left);</span><br><span class="line"><span class="keyword">if</span> (cur.right) nodeQueue.<span class="built_in">push</span>(*cur.right);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>函数签名：<code>void View(const Tree&amp; T);</code></p>
<p>同样是方便起见，我手动构造了一棵树用于测试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Tree *<span class="title">GetTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> T = <span class="keyword">new</span> Tree;</span><br><span class="line">    T-&gt;data = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    T-&gt;left = <span class="keyword">new</span> Tree;</span><br><span class="line">    T-&gt;left-&gt;data = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    T-&gt;right = <span class="keyword">new</span> Tree;</span><br><span class="line">    T-&gt;right-&gt;data = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    T-&gt;right-&gt;left = <span class="keyword">new</span> Tree;</span><br><span class="line">    T-&gt;right-&gt;left-&gt;data = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    T-&gt;right-&gt;right = <span class="keyword">new</span> Tree;</span><br><span class="line">    T-&gt;right-&gt;right-&gt;data = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> T = <span class="built_in">GetTree</span>();</span><br><span class="line">    <span class="comment">// 正常情况下应该输出&quot;ABCDE&quot;</span></span><br><span class="line">    <span class="built_in">View</span>(*T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里没有<code>delete T</code>，内存是全部泄露的，不过这种简单程序反正有操作系统回收，可以先不用关心。</p>
<p>于是问题来了，在我用这个版本的程序完成算法的测试后，出于习惯给这个<code>Tree</code>加上了一个简单的析构函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="built_in">Tree</span>() : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">data</span>(<span class="number">0</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Tree</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (left) <span class="keyword">delete</span> left;</span><br><span class="line">        <span class="keyword">if</span> (right) <span class="keyword">delete</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    Tree *left;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Tree *right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>并且在<code>main</code>函数内释放了内存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> T = <span class="built_in">GetTree</span>();</span><br><span class="line">    <span class="built_in">View</span>(*T);</span><br><span class="line">    <span class="keyword">delete</span> T;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时运行程序就可以喜提一个<code>Segment Error</code>了。</p>
<h2 id="问题解决">问题解决</h2>
<p>因为没有添加析构函数时并没有出现问题，所以总是怀疑自己对析构过程的理解有问题。难道析构函数不是自已理解的”死前抖擞精神，完成最后的任务，然后安详赴死“？对象在调用析构函数时最已经销毁了？不可能啊。</p>
<p>几经查阅后，发现我对析构过程的理解没有问题，对象在析构函数之后才被销毁。更离谱的是，我为了简化问题写的只存在树的构建的析构的程序运行起来完全没有出现问题。</p>
<p>于是我把目光投向了看起来安全的不能再安全的，接收<code>const Tree&amp;</code>类型参数的<code>View</code>函数。在出现问题的代码中将<code>View(*T);</code>注释掉，发现还真是这个函数的问题。</p>
<p>说来奇怪，还没有对问题做具体的分析，就直觉地想到改一下传参方式或许可以解决，于是我将<code>View</code>改成如下形式：</p>
<p>函数签名：<code>void View(const Tree *T)</code></p>
<p>存储语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// std::queue&lt;const Tree*&gt; nodeQueue;</span></span><br><span class="line"><span class="comment">// cur = nodeQueue.front();</span></span><br><span class="line"><span class="keyword">if</span> (T) nodeQueue.<span class="built_in">push</span>(T);</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left)  nodeQueue.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;right) nodeQueue.<span class="built_in">push</span>(cur-&gt;right);</span><br></pre></td></tr></table></figure>
<p>然后果真没有问题了，这弄得我很疑惑。于是分析可能是<code>std::queue</code>相关的问题，但它也不会直接释放掉资源啊。一番思索，发现原因如下：</p>
<ul>
<li>对于<code>std::queue&lt;const Tree&gt;</code>，它在每一次<code>push(T)</code>时创建一个<code>T</code>的拷贝，并存储，由于<code>Tree</code>没有定义拷贝相关操作，会使用默认拷贝方式，即简单复制其中的指针。</li>
<li><code>std::queue</code>在<code>pop()</code>操作时会销毁临时对象。</li>
<li>当没有为<code>Tree</code>创建析构函数时，临时对象的销毁仅仅是简单销毁自身，因此没有出现问题。</li>
<li>而对于已经创建了析构函数的<code>Tree</code>，临时对象会递归地销毁其指针指向的子节点，此时再显式地<code>delete T</code>就会导致重复delete。从而引发<code>Segment Error</code>。</li>
</ul>
<p>因此，像上面那样使用指针传递的方式就解决了问题，这样临时对象的类型就变成了指针，从而不会对树本身产生影响。但这种方式本质上只是在逃避，并没有解决问题。</p>
<p>真正要解决这个问题，那还得是为<code>Tree</code>添加正确的拷贝构造函数、拷贝赋值运算符、移动构造函数和移动赋值运算符。</p>
<h2 id="总结">总结</h2>
<p>遵循三/五法则是一个类正常运行的基础，绝不能偷懒省略其中的组件。还好我以这样低的成本——一个测试算法用的临时程序——完成了三/五法则的试错。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL容器备忘总结</title>
    <url>/blog/2021/07/21/0020-STL_containers/</url>
    <content><![CDATA[<blockquote>
<p>使用容器总有几个细节记不清，梳理一番以作备忘。</p>
</blockquote>
<span id="more"></span>
<h2 id="容器类型">容器类型</h2>
<h3 id="顺序容器">顺序容器</h3>
<table>
<thead>
<tr class="header">
<th>顺序容器</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>vector</td>
<td>可变大小数组，快速随机访问，快速尾部增删。</td>
</tr>
<tr class="even">
<td>deque</td>
<td>双端队列，快速随机访问，快速头尾增删。</td>
</tr>
<tr class="odd">
<td>list</td>
<td>双向列表，双向顺序访问，快速任意增删。</td>
</tr>
<tr class="even">
<td>forward_list</td>
<td>单向列表，单向顺序访问，快速任意增删。</td>
</tr>
<tr class="odd">
<td>array</td>
<td>固定大小数组，快速随机访问，不可增删。</td>
</tr>
<tr class="even">
<td>string</td>
<td>与vector性质相似，专门保存字符。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>顺序容器适配器</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>stack</td>
<td>栈</td>
</tr>
<tr class="even">
<td>queue</td>
<td>队列</td>
</tr>
<tr class="odd">
<td>priority_queue</td>
<td>优先队列</td>
</tr>
</tbody>
</table>
<h3 id="关联容器">关联容器</h3>
<table>
<thead>
<tr class="header">
<th>关联容器</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>map</td>
<td>关联数组，保存key-value对。</td>
</tr>
<tr class="even">
<td>unordered_map</td>
<td>map的无序版本。</td>
</tr>
<tr class="odd">
<td>set</td>
<td>只保存key的容器。</td>
</tr>
<tr class="even">
<td>unordered_set</td>
<td>set的无序版本。</td>
</tr>
<tr class="odd">
<td>multimap</td>
<td>key可重复出现的map。</td>
</tr>
<tr class="even">
<td>unordered_multimap</td>
<td>multimap的无序版本。</td>
</tr>
<tr class="odd">
<td>multiset</td>
<td>key可重复出现的set。</td>
</tr>
<tr class="even">
<td>unordered_multiset</td>
<td>multiset的无序版本。</td>
</tr>
</tbody>
</table>
<p>有序关联容器要求key值类型必顺定义&lt;运算符。无序关联容器则要求key值定义==运算符。</p>
<h2 id="容器操作">容器操作</h2>
<h3 id="通用操作">通用操作</h3>
<h4 id="类型别名">类型别名</h4>
<p><code>iterator</code>: 容器的迭代器类型。</p>
<p><code>const_iterator</code>: 迭代器的只读版本。</p>
<p><code>size_type</code>: 无符号整数类型，保存最大容器大小。</p>
<p><code>differenct_type</code>: 带符号整数类型，保存两个迭代器间的距离。</p>
<p><code>value_type</code>: 元素类型。</p>
<p><code>reference</code>: 元素的左值类型，含义为value_type&amp;。</p>
<p><code>const_reference</code>: 元素的const左值类型，含义为const value_type&amp;。</p>
<h4 id="构造函数">构造函数</h4>
<p><code>C c;</code>：默认构造函数，构造一个空容器。</p>
<p><code>C c1(c2)</code>：构造c2的拷贝c1。</p>
<p><code>C c(b, e)</code>：构造c并将迭代器b和e之间的元素拷贝到c。</p>
<p><code>C c&#123;a, b, c, d, e...&#125;</code>：列表初始化c。</p>
<h4 id="赋值与swap">赋值与swap</h4>
<p><code>c1 = c2</code>：将c1中的元素替换为c2中的元素。</p>
<p><code>c = &#123;a, b, c, d...&#125;</code>：将c中的元素替换为列表中的元素（array不可用）。</p>
<p><code>a.swap(b)</code>, <code>swap(a, b)</code>：交换a,b中的元素。</p>
<h4 id="大小">大小</h4>
<p><code>c.size()</code>：c中元素数目。</p>
<p><code>c.max_size()</code>：c最大可保存元素数目。</p>
<p><code>c.empty</code>：c是否为空。</p>
<h4 id="增删元素array不可用">增删元素（array不可用）</h4>
<p><code>c.insert(args)</code>：将args中的元素拷贝进c。</p>
<p><code>c.emplace(inits)</code>：使用inits构造c中的一个元素。inits必需与元素的构造函数匹配。</p>
<p><code>c.erase(args)</code>：删除c中的指定元素。</p>
<p><code>c.clear()</code>：删除c中所有元素，返回void。</p>
<h4 id="关系运算符">关系运算符</h4>
<p><code>==</code>，<code>!=</code>：所有容器都支持。</p>
<p><code>&lt;</code>，<code>&lt;=</code>，<code>&gt;</code>，<code>&gt;=</code>：除无序关联容器外都支持。</p>
<h4 id="获取迭代器">获取迭代器</h4>
<p><code>c.begin()</code>，<code>c.end()</code>：返回首迭代器和尾后迭代器。</p>
<p><code>c.cbegin()</code>，<code>c.cend()</code>：返回const迭代器。</p>
<h4 id="反向迭代器不支持forward_list">反向迭代器(不支持forward_list)</h4>
<p><code>reverse_iterator</code>：按逆序寻址元素的迭代器</p>
<p><code>const_reverse_iterator</code>：反向迭代器的只读版本。</p>
<p><code>c.rbegin()</code>，<code>c.rend()</code>：返回尾迭代器和首前迭代器。</p>
<p><code>c.crbegin()</code>，<code>c.crend()</code>：返回const反向迭代器。</p>
<h3 id="顺序容器操作">顺序容器操作</h3>
<p><strong>总是可以使用两个迭代器的范围表示多个已存在元素，用(n, t)或{a, b, c...}表示多个新元素。将这三种表示方法称为range</strong></p>
<h4 id="构造函数-1">构造函数</h4>
<p><code>C seq(n)</code>：一个包含n个元素的顺序容器。</p>
<p><code>C seq(range)</code>：一个元素为range的顺序容器。</p>
<h4 id="赋值">赋值</h4>
<p><code>seq.assign(range)</code>：将seq中元素替换为迭代器range中的元素，b的e不可指向seq中的元素。</p>
<h4 id="关系运算符-1">关系运算符</h4>
<p>两个大小相等且对位元素相等的顺序容器相等。</p>
<p>顺序容器a是另一个顺序容器b的前缀子序列时，a &lt; b。</p>
<p>否则，以两容器中第一对不相等的元素的大小关系作为结果。</p>
<h4 id="增删元素array不支持">增删元素（array不支持）</h4>
<ul>
<li>forward_list有专有的emplace、insert和erase操作。</li>
<li>forward_list不支持push_back、emplace_back和pop_back。</li>
<li>vector和string不支持push_front、emplace_front和pop_front。</li>
</ul>
<p><code>c.push_back(t)</code>，<code>c.emplace_back(inits)</code>：在尾部创建一个元素。</p>
<p><code>c.push_front(t)</code>，<code>c.emplace_front(inits)</code>：在首部创建一个元素。</p>
<p><code>c.insert(p, t)</code>，<code>c.emplace(p, inits)</code>：在迭代器p位置之前添加一个元素，返回新元素的迭代器。</p>
<p><code>c.insert(p, range)</code>：在p之前添加n个值为t的元素。返回第一个新元素的迭代器。</p>
<p><strong>任何添加操作都会导致指向容器内元素的迭代器、指针和引用失效。</strong></p>
<p><code>c.pop_back()</code>：删除c的尾元素，c为空时UB。</p>
<p><code>c.pop_front()</code>：删除c的首元素，c为空时UB。</p>
<p><code>c.erase(p)</code>：删除迭代器p指向的元素，返回下一个元素的迭代器。p为尾后迭代器时UB。</p>
<p><code>c.erase(b, e)</code>：删除迭代器b, e范围内的所有元素，返回下一个元素的迭代器。</p>
<p><code>c.clear()</code>：删除所有元素，返回void。</p>
<p><strong>删除deque中除首尾元素的任何元素会导致迭代器、指针和引用失效。</strong></p>
<p><strong>删除vector或string中的元素会导致删除点之后的迭代器、指针和引用失效。</strong></p>
<h4 id="访问元素">访问元素</h4>
<ul>
<li>at和下标操作不适用于任何list。</li>
<li>back不适用forward_list。</li>
</ul>
<p><code>c.back()</code>：返回c中尾元素的引用。c为空时UB。</p>
<p><code>c.front()</code>：返回c中首元素的引用。c为空时UB。</p>
<p><code>c[n]</code>，<code>c.at(n)</code>：返回下标为n的元素的引用。[下标]越界UB。at(下标)越界抛出一个out_of_range异常。</p>
<h4 id="改变容器大小">改变容器大小</h4>
<p><code>c.resize(n)</code>：将容器大小调整为n，若缩小则丢弃多余元素，增大则添加新元素。</p>
<p><code>c.resize(n, t)</code>：若增大则添加值为t的新元素。</p>
<h4 id="forward_list特有操作">forward_list特有操作</h4>
<p><code>lst.before_begin()</code>：返回首前迭代器，不可解引用。</p>
<p><code>lst.cbefore_begin()</code>：返回首前迭代器的只读版本。</p>
<p><code>lst_insert_after(p, args)</code>，<code>emplace_after(p, inits)</code>：在p后添加元素，参数形式与通用的insert相同。</p>
<p><code>lst_erase_after(p)</code>，<code>lst_erase_after(p, e)</code>：删除p之后的一个或一段元素，返回下一个位置。</p>
<h4 id="缓存操作">缓存操作</h4>
<p><code>c.shrink_to_fit()</code>：将实际内存占用减少为与size()相同。只适用于vector，string和deque</p>
<p><code>c.capacity()</code>：已分配的实际内存可以保存多少元素。只适用于vector和string。</p>
<p><code>c.reserve(n)</code>：分配至少能容纳n个元素的空间。只适用于vector和string。</p>
<h4 id="string特有操作">string特有操作</h4>
<h5 id="截取">截取</h5>
<p><code>string s(cp, n)</code>：cp指向数组中前n个字符。</p>
<p><code>string s(s2, pos, len = 0)</code>：字符串s2从下标pos开始的len个字符。下标越界则UB。</p>
<p><code>s.sub_str(pos = 0, n = s.size() - pos)</code>：返回s从下标pos开始的n的字符的拷贝。</p>
<h5 id="搜索">搜索</h5>
<p>string提供了六个不同的搜索函数，每个函数又有4个重载版本。它们成功时返回匹配位置的下标，失败则返回<code>string::npos</code>。返回数类型都是<code>string::size_type</code>，是无符号整数类型。</p>
<p><code>s.find(args)</code>：args第一次出现的位置。</p>
<p><code>s.rfind(args)</code>：args最后一次出现的位置。</p>
<p><code>s.find_first_of(args)</code>：args中任一字符第一次出现的位置。</p>
<p><code>s.find_last_of(args)</code>：args中任一字符最后一次出现的位置。</p>
<p><code>s.find_first_not_of(args)</code>：第一次出现不属于args中的字符的位置。</p>
<p><code>s.find_last_not_of(args)</code>：最后一次出现不属于args中的字符的位置。</p>
<p>args为以下四种形式之一：</p>
<p><code>c, pos</code>：从pos处开始查找字符c，pos默认为0。</p>
<p><code>str, pos</code>：从pos处开始查找字符串str，pos默认为0。</p>
<p><code>cp, pos</code>：从pos处开始查找C风格字符串指针cp，pos默认为0。</p>
<p><code>cp, pos, n</code>：从pos开始查找指针cp指向的数组的前n个字符。pos和n皆无默认值。</p>
<h5 id="匹配">匹配</h5>
<p><code>s.compare(args)</code>：跟据比较结果等于，小于或大于args，返回0，负数或正数。</p>
<p>args为以下形式之一：</p>
<p><code>s2</code>：与字符串s2比较。</p>
<p><code>pos1, n1, s2</code>：从pos1开始的n1个字符与s2比较。</p>
<p><code>pos1, n1, s2, pos2, n2</code>：从pos1开始的n1人字符与s2中从pos2开始的n2的字符比较。</p>
<p><code>cp</code>：与C风格字符串cp比较。</p>
<p><code>pos1, n1, cp</code>：从pos1开始的n1个字符与cp比较。</p>
<p><code>pos1, n1, cp, n2</code>：从pos1开始的n1个字符与从cp开始的n2个字符比较。</p>
<h5 id="数值转换">数值转换</h5>
<p><code>to_string(val)</code>：返回val的string表示。</p>
<p><code>sto&#123;type&#125;(s, p, b)</code>：返回s起始的子串的数值，由type指定返回值类型。b表示进制，默认为10。p是size_t指针，用来保存第一个非数值字符的下标，默认为0，即不保存下标。type可以为：i (int)、l (long)、ul (unsigned long)、ll (long long)、ull (unsigned long long)。</p>
<p><code>sto&#123;type&#125;(s, p)</code>：基本同上，返回浮点数，不能指定进制。type可以为：f (float)、d (double)、ld (long double)。</p>
<h4 id="容器适配器操作">容器适配器操作</h4>
<p><code>container_type</code>：实现适配器的底层容器类型。</p>
<ul>
<li><p>stack</p>
<p><code>s.pop</code>：删除栈顶元素。</p>
<p><code>s.push(item)</code>：压入元素item的拷贝或移动。</p>
<p><code>s.emplace(args)</code>：压入由args构造的元素。</p>
<p><code>s.top()</code>：返回栈顶元素。</p></li>
<li><p>queue &amp; priority_queue</p>
<p>// 通用</p>
<p><code>q.pop()</code>：删除queue的首元素或priority_queue最高优先级的元素。</p>
<p><code>s.push(item)</code>：加入元素item的拷贝或移动。</p>
<p><code>s.emplace(args)</code>：加入由args构造的元素。</p>
<p>// 仅适用于queue</p>
<p><code>q.front()</code>：返回首元素。</p>
<p><code>q.back()</code>：返回尾元素。</p>
<p>// 仅适用于priority_queue</p>
<p><code>q.top()</code>：返回最高优先级元素。</p></li>
</ul>
<h3 id="关联容器操作">关联容器操作</h3>
<p><code>key_type</code>：关键字类型。</p>
<p><code>mapped_type</code>：映射类型，仅适用于map。</p>
<p><code>value_type</code>：值类型，对于set与<code>key_type</code>等效，对于map等于<code>pair&lt;const key_type, mapped_type&gt;</code>。</p>
<h5 id="遍历">遍历</h5>
<p>可以通过<code>begin()</code>和<code>end()</code>获取对应的迭代器从而实现遍历。</p>
<h5 id="插入元素">插入元素</h5>
<p><code>c.insert(v)</code>：对于map和set，key值重复的插入会失败，返回一个bool表示是否成功。而multimap和multiset可以插入key值重复的元素，返回指向该元素的迭代器。</p>
<p><code>c.emplace(args)</code>：行为同上，使用args构建元素。</p>
<p><code>c.insert(b, e)</code>：插入迭代器范围内的元素。</p>
<p><code>c.insert(li)</code>：插入初始化列表中的元素。</p>
<p><code>c.insert(p, v)</code>：从迭代器位置开始插入元素。</p>
<p><code>c.emplace(p, args)</code>：同上。</p>
<h5 id="删除元素">删除元素</h5>
<p><code>c.erase(k)</code>：删除所有key值为k的元素。</p>
<p><code>c.erase(p)</code>：删除迭代器指向的元素。</p>
<p><code>c.erase(b, e)</code>：删除迭代器范围内的元素。</p>
<h5 id="map的下标操作">map的下标操作</h5>
<p><code>map[key]</code>：取得key对应的value，如果key不存在则创建新元素。</p>
<h5 id="访问元素-1">访问元素</h5>
<p><code>c.find(k)</code>：返回指向第一个key值为k的元素的迭代器。</p>
<p><code>c.count(k)</code>：返回key值为k的元素的数量。</p>
<p><code>c.lower_bound(k)</code>：返回指向第一个key值不小于k的元素的迭代器。</p>
<p><code>c.upper_bound(k)</code>：返回指向第一个key值大于k的元素的迭代器。</p>
<p><code>c.equal_range(k)</code>：返回一个迭代器pair，表示关键字等于k的元素的范围。</p>
<h5 id="无序容器">无序容器</h5>
<p>无序容器<code>unorderd_map</code>和<code>unordered_set</code>，在存储上组织为一组桶，每个桶保存0或多个元素。使用hash函数将元素映射到桶。因此，无序元素的性能依赖于hash函数的质量和桶的数量与大小。</p>
<p>适用于有序容器的操作也适用于无序容器，此外无序容器提供了一组管理桶的函数：</p>
<p><code>c.bucket_count()</code>：正在使用的桶的数目。</p>
<p><code>c.max_bucket_count()</code>：容器能容纳的最多的桶的数目。</p>
<p><code>c.bucket_size(n)</code>：第n个桶中有多少元素。</p>
<p><code>c.bucket(k)</code>：关键字为k的元素在哪个桶中。</p>
<p><code>local_iterator</code>：用来访问桶中元素的迭代器类型。</p>
<p><code>const_local_iterator</code>：迭代器的const版本。</p>
<p><code>c.begin(n)</code>、<code>c.end(n)</code>、<code>c.cbegin(n)</code>、<code>c.cend(n)</code>：桶n的对应迭代器。</p>
<p><code>c.load_factor()</code>：每个桶的平均元素数量，返回float值。</p>
<p><code>c.max_load_factor()</code>：c试图维护的平均桶大小，返回float值。c会在需要时添加新的桶，使load_factor &lt;= max_load_factor。</p>
<p><code>c.rehash(n)</code>：重组存储，使bucket_count &gt;= n且bucket_count &gt; size / max_load_factor。</p>
<p><code>c.reserve(n)</code>：重组存储，使c可以保存n个元素而不用rehash。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无序容器的使用</span></span><br><span class="line"><span class="function">T1 <span class="title">hash</span><span class="params">(args)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(T2 a, T2 b)</span></span>;</span><br><span class="line"><span class="comment">// 由于模版参数接受的是类型，使用decltype取得函数的类型。</span></span><br><span class="line">unordered_map&lt;T2, <span class="keyword">decltype</span>(hash)*, <span class="keyword">decltype</span>(equal)*&gt; foo;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CMakeLists.txt编写入门</title>
    <url>/blog/2021/08/02/0021-CMakeLists/</url>
    <content><![CDATA[<blockquote>
<p>整理一下CMakeLists的相关知识。</p>
</blockquote>
<span id="more"></span>
<h2 id="语法">语法</h2>
<p>听说CMake已经被证明图灵完备了，不过它的语法还是很简单的，由命令、变量和注释组成。</p>
<p>注释：以<code>#</code>开头的行即为注释。</p>
<p>命令：包括命令名和一个括号括起来的参数列表。形式如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">command</span>(arg1 arg2 ...) <span class="comment"># 参数以空格分隔</span></span><br></pre></td></tr></table></figure>
<p>变量：由命令生成或CMake环境定义，使用<code>$</code>和<code>&#123;&#125;</code>来引用变量：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;SOMEVAR&#125;</span> <span class="comment"># 变量的值</span></span><br><span class="line">SOMEVAR    <span class="comment"># 字面值</span></span><br></pre></td></tr></table></figure>
<p>CMakeList.txt是逐行解析的，因此变量的定义应在使用之前。</p>
<p>好了，现在你已经学会CMake了。了解几个常用命令和变量就可以使用了。</p>
<h2 id="基础命令与变量">基础命令与变量</h2>
<p><code>cmake_minimum_required(&lt;version&gt;)</code>：指定CMake的最小版本号。</p>
<p><code>project(&lt;name&gt;)</code>：指定工程名称。</p>
<p><code>include_directories(&lt;dir1&gt; &lt;dir2&gt; ...)</code>：指定include目录。</p>
<ul>
<li>变量<code>CMAKE_SOURCE_DIR</code>：表示工程顶层目录。</li>
</ul>
<p><code>aux_source_directory(&lt;dir&gt; &lt;var&gt;)</code>：将一个目录中所有源文件赋予一个变量。</p>
<p><code>add_executable(&lt;target&gt; &lt;source1&gt; &lt;source2&gt; ...)</code>：构建可执行文件，第一个参数为文件名称，后面的参数为源文件列表。</p>
<p>有了这几条命令，我们就可以编写一个能用的CMakeList.txt文件了：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake_minimun_required(<span class="number">3.1</span>)</span><br><span class="line"><span class="keyword">project</span>(HelloWorld)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line">aux_source_dirctory(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src DIR_SRC)</span><br><span class="line"><span class="keyword">add_executable</span>(helloworld <span class="variable">$&#123;DIR_SRC&#125;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="控制流命令">控制流命令</h2>
<ul>
<li>if</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(conditon)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elseif</span>(condition)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>while</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endwhile</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>foreach</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(var arg1 arg2 ...)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endforeach</span>(var)</span><br></pre></td></tr></table></figure>
<h2 id="常用命令">常用命令</h2>
<p><code>set(var value)</code>：为变量赋值。</p>
<p><code>add_definitions(-Dxxxx1 -Dxxxx2 ...)</code>：向编译器添加-D定义，此时代码内的<code>#ifdef xxxx ... #endif</code>代码块生效。</p>
<p><code>add_dependencies(target-name depend-target1 ...)</code>：添加依赖目标。</p>
<p><code>add_library(name [STATIC|SHARED] src1 src2...)</code>：创建库，如果未指定库类型则默认构建STATIC库，可以通过定义变量<code>BUILD_SHARED_LIBS</code>改为默认构建SHARED库。</p>
<p><code>target_link_library(target-name lib1 lib2 ...)</code>：为taget链接库。</p>
<p><code>add_subdirectory(subdir1 subdir2 ...)</code>：添加子目录，使用子目录的CMakeLists.txt构建子目录中的文件。</p>
<p><code>add_test(testname execname arg1 arg2...)</code>：添加测试，execname可以是任何可执行文件的名称。在生成makefile后可以使用<code>make test</code>来进行测试。</p>
<p><code>ebable_test()</code>：开启测试开关，没有这条指令则任何add_test指令都是无效的。</p>
<p><code>find_library(var NAMES name1 name2 ... PATHS path1 path2 ...)</code>：在path中查找基础名称为name的库，并将其完整路径赋予变量var。</p>
<p><code>file_path(var file path1 path2 ...)</code>：在path中查找file，并将path路径赋予变量var。</p>
<h2 id="常用变量">常用变量</h2>
<p><code>CMAKE_BINARY_DIR</code> = <code>PROJECT_BINARY_DIR</code> = <code>&lt;projectname&gt;_BINARY_DIR</code>：可执行文件生成目录。</p>
<p><code>CMAKE_SOURCE_DIR</code> = <code>PROJECT_SOURCE_DIR</code> = <code>&lt;projectname&gt;_SOURCE_DIR</code>：工程顶层目录。</p>
<p><code>CMAKE_CURRENT_SOURCE_DIR</code>：当前文件（可以是子文件夹的CMakeLists.txt）所在目录。</p>
<p><code>CMAKE_CURRENT_BINARY_DIR</code>：当前文件产生的可执行文件目录。</p>
<p><code>CMAKE_CURRENT_LIST_FILE</code>：调用此变量的CMakeLists.txt的完整路径。</p>
<p><code>CMAKE_CURRENT_LIST_LINE</code>：此变量所在的行。</p>
<p><code>CMAKE_MODULE_PATH</code>：模块的路径。</p>
<p><code>EXECUTABLE_OUTPUT_PATH</code>：可执行文件的存放路径。</p>
<p><code>LIBRARY_OUTPUT_PATH</code>：库文件的存放路径。</p>
<p><code>CMAKE_MAJOR_VERSION</code>：主版本号。</p>
<p><code>CMAKE_MINOR_VERSION</code>：次版本号。</p>
<p><code>CMAKE_PATCH_VERSION</code>：补丁等级。</p>
<p><code>CMAKE_SYSTEM</code>：系统名称。</p>
<p><code>CMAKE_SYSTEM_NAME</code>：不含版本的系统名。</p>
<p><code>CMAKE_SYSTEM_PROCESSOR</code>：处理器名称。</p>
<p><code>UNIX</code>：在unix环境下为TRUE。</p>
<p><code>WIN32</code>：在win32环境下为TRUE。</p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>C++结构体内存对齐</title>
    <url>/blog/2021/08/11/0022-C++:Memory_alignment_of_structure/</url>
    <content><![CDATA[<blockquote>
<p>疏理一下结构体的内存对齐规则</p>
</blockquote>
<span id="more"></span>
<h2 id="内存对齐是什么为什么要进行内存对齐">内存对齐是什么？为什么要进行内存对齐？</h2>
<p>现代计算机以字节为单位划分内存空间，但大多不是以字节为单位存取内存的。一次存取往往涉及多个字节，这个大小称为存取粒度。存取粒度通常与系统有关，如32位系统存取粒度大多为4字节，而64位系统的存取粒度大多为8字节。</p>
<p>对于这个结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span>  a; <span class="comment">// 假定int占用4字节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以看出，它的成员大小总和为5字节。但通常这个结构体的大小会被填充到8字节。原因如下：</p>
<p>考虑不对齐字节的情况，如果结构体地址为0x00，则c的地址为0x00，a的地址为0x01。此时一个存取粒度为4字节的机器要取出a，需要以下几步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─┬────┐        1.取地址0x00开始的4字节，并保留需要的数据0x01、0x02、0x03</span><br><span class="line">│c│a   │        2.取地址0x04开始的4字节，并保留需要的数据0x04</span><br><span class="line">└─┴────┘        3.将上两步获取的数据合并，计算出a的值</span><br><span class="line"> 0|1234</span><br></pre></td></tr></table></figure>
<p>这样的过程对计算机来说是很麻烦的，而如果进行字节对齐，则结构体地址和c的地址依然是0x00，而a的地址移到了0x04，此时一个存取粒度为4字节的机器可以直接取出a的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────┬───────┐    直接取地址0x04开始的4字节即可取出a的值。</span><br><span class="line">│c      │a      │</span><br><span class="line">└───────┴───────┘</span><br><span class="line">0 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure>
<p>由此不难看出，所谓的内存对齐就是为了便于机器存取而根据存储粒度对内存布局的调整。</p>
<h2 id="内存对齐的规则">内存对齐的规则</h2>
<h3 id="规则1结构体内部成员的地址一定是自身大小的整数倍否则就进行对齐">规则1：结构体内部成员的地址一定是自身大小的整数倍，否则就进行对齐。</h3>
<p>比如上面的例子中，int类型大小为4字节，而0x01并不是4字节的整数倍，因此对齐到0x04。</p>
<p>考虑下面结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo1</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>  a; <span class="comment">// 假定int为4字节</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>根据规则1：a的地址为0x00，不需对齐；c的地址为0x04，是char类型大小的整数倍，也不需对齐。于是该结构体的大小应当是5字节。</p>
<p>但此时，对于数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">foo1 arr[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<p>其内存布局为如下，此时若想取出<code>arr[1].a</code>，则有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────┬─┬──────┬─┐    1.由于arr[1].a的地址为0x05，则需要先取出0x04开始的4个字节，</span><br><span class="line">│a      │c│a     │c│      并保留0x05、0x06、0x07。</span><br><span class="line">└───────┴─┴──────┴─┘    2.然后取出0x08开始的4字节，并保留0x08</span><br><span class="line">0 1 2 3 4 5 6 7 8 9     3.将上两步数据合并计算出arr[1].a的值。</span><br></pre></td></tr></table></figure>
<p>这又回到了没有对齐的情况了，因此为了避免这种情况，引入了规则2：</p>
<h3 id="规则2结构体的大小为其最大成员大小的整数倍若基最大成员大小大于存取粒度则结构体的大小为存取粒度的整数倍否则就在结构体末尾补齐">规则2：结构体的大小为其最大成员大小的整数倍，若基最大成员大小大于存取粒度，则结构体的大小为存取粒度的整数倍，否则就在结构体末尾补齐。</h3>
<p>在此规则下，结构体foo1的大小应为8字节。需要注意，结构体中最大成员并不包括结构体成员，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定int占4字节</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">byte8</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo2</span> &#123;</span></span><br><span class="line">    byte8 a;</span><br><span class="line">    <span class="type">char</span>  b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo3</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>此时foo2的最大成员并不是看做整体的byte8的8字节，而是byte8与foo2中的基础成员中的最大成员，此处为int。因此foo2对4字节对齐，大小为12字节。而foo3的最大成员为long long，对8字节对齐，大小为16字节。</p>
]]></content>
      <categories>
        <category>C++之旅</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（三）——递归模式、多态和Prelude</title>
    <url>/blog/2021/09/03/0023-Re0:Haskell_03/</url>
    <content><![CDATA[<blockquote>
<p>这是系列的第三篇，主要对Haskell中的递归模式、多态性和Prelude进行介绍。学习本篇内容可以大幅减少代码的重复现象。</p>
</blockquote>
<span id="more"></span>
<p>之前的学习可能会使你产生Haskell程序员会花费大量的时间去编写复杂的递归函数。其实有经验的Haskell程序员几乎不使用递归函数。</p>
<p>为什么会这样呢？因为递归函数实质上是对递归模式的反复处理。通过将这些递归的模式抽象出来，封装成库，就使得程序员免于过多的与底层细节纠缠，从而在更高的层次进行思考——这就是全麦编程思想的目标。</p>
<h2 id="递归模式">递归模式</h2>
<p>一个关于<code>Int</code>类型的列表可以定义为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IntList</span> = <span class="type">Empty</span> | <span class="type">Cons</span> <span class="type">Int</span> <span class="type">IntList</span></span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure>
<p>我们可能对这个列表进行哪些操作呢？可能有这些：</p>
<ul>
<li>对每一个元素分别进行某种操作。</li>
<li>基于某种判断保留列表中的一些元素并抛弃其它元素。</li>
<li>通过某种方式对列表中的元素进行“概括”，如获取所有元素的最大值，总和，乘积等。</li>
</ul>
<h3 id="映射map">映射（Map）</h3>
<p>考虑第一种操作，对每个元素进行特定操作，即为映射操作。比如对每个元素取绝对值，可以写成如下形式：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">absAll</span> :: <span class="type">IntList</span> -&gt; <span class="type">IntList</span></span><br><span class="line"><span class="title">absAll</span> <span class="type">Empty</span> = <span class="type">Empty</span></span><br><span class="line"><span class="title">absAll</span> (<span class="type">Cons</span> x xs) = <span class="type">Cons</span> (abs x) (absAll xs)</span><br></pre></td></tr></table></figure>
<p>如果要对每个元素做平方运算呢？可以写成如下形式：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">squareAll</span> :: <span class="type">IntList</span> -&gt; <span class="type">IntList</span></span><br><span class="line"><span class="title">squareAll</span> <span class="type">Empty</span> = <span class="type">Empty</span></span><br><span class="line"><span class="title">squareAll</span> (<span class="type">Cons</span> x xs) = <span class="type">Cons</span> (x*x) (squreAll xs)</span><br></pre></td></tr></table></figure>
<p>有没有发现些许违和感？是的，这两个函数实在太像了，看起来非常啰嗦。我们可以用一个<code>Int-&gt;Int</code>类型的函数来指定这些操作，并且使用一个接受对应参数的函数来处理列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">square</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">square</span> x = x * x</span><br><span class="line"></span><br><span class="line"><span class="title">mapIntList</span> :: (<span class="type">Int</span> -&gt; <span class="type">Int</span>) -&gt; <span class="type">IntList</span> -&gt; <span class="type">IntList</span></span><br><span class="line"><span class="title">mapIntList</span> _ <span class="type">Empty</span> = <span class="type">Empty</span></span><br><span class="line"><span class="title">mapIntList</span> func (<span class="type">Cons</span> x xs) = <span class="type">Cons</span> (func x) (mapIntList func xs)</span><br></pre></td></tr></table></figure>
<p>此时就可以通过：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- list是一个IntList</span></span><br><span class="line"><span class="title">mapIntList</span> abs list</span><br><span class="line"><span class="title">mapIntList</span> square list</span><br></pre></td></tr></table></figure>
<p>来分别实现<code>absAll</code>和<code>squareAll</code>的功能了。</p>
<h3 id="筛选filter">筛选（Filter）</h3>
<p>考虑第二种操作，即通过某种判断保留列表中的一些元素并抛弃其它元素，即为筛选。比如仅保留列表中的偶数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">evenOnly</span> :: <span class="type">IntList</span> -&gt; <span class="type">IntList</span></span><br><span class="line"><span class="title">evenOnly</span> <span class="type">Empty</span> = <span class="type">Empty</span></span><br><span class="line"><span class="title">evenOnly</span> (<span class="type">Cons</span> x xs)</span><br><span class="line">    | even x = <span class="type">Cons</span> x (evenOnly xs)</span><br><span class="line">    | otherwise = evenOnly xs</span><br></pre></td></tr></table></figure>
<p>同样，我们可以对这种操作进行抽象，令它成为一个接受<code>(Int -&gt; Bool)</code>类型与<code>IntList</code>类型参数的函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">filterIntList</span> :: (<span class="type">Int</span> -&gt; <span class="type">Bool</span>) -&gt; <span class="type">IntList</span> -&gt; <span class="type">IntList</span></span><br><span class="line"><span class="title">filterIntList</span> _ <span class="type">Empty</span> = <span class="type">Empty</span></span><br><span class="line"><span class="title">filterIntList</span> func (<span class="type">Cons</span> x xs)</span><br><span class="line">    | func x = <span class="type">Cons</span> x (filterIntList xs)</span><br><span class="line">    | otherwise = filterIntList xs</span><br></pre></td></tr></table></figure>
<p>此时即可通过下面代码实现<code>evenOnly</code>的功能了：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- list是一个IntList</span></span><br><span class="line"><span class="title">filterIntList</span> even list</span><br></pre></td></tr></table></figure>
<h3 id="折叠fold">折叠（Fold）</h3>
<p>第三种操作，获取一个列表的某种“概括”，即为折叠操作。我们将在下一篇对折叠操作进行详细讨论。</p>
<h2 id="多态">多态</h2>
<p>通过上一节递归模式的抽象，我们可以漂亮的处理对<code>Int</code>列表的映射与筛选了。然而，我们要如何处理一个<code>Integer</code>、<code>Bool</code>、<code>String</code>甚至是<code>一个String的栈的树的列表的列表</code>的列表呢？如果为每个类型都写出对应的实现，那么你会发现除了操作的类型外这些函数完全一样。为了解决这个问题，我们需要使用Haskell中的多态。</p>
<h3 id="多态的数据类型">多态的数据类型</h3>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> t = <span class="type">E</span> | <span class="type">C</span> t (<span class="type">List</span> <span class="title">t</span>)</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>t</code>叫做类型变量，可以表示任何类型，<strong>类型变量必须以小写字母开头</strong>。</p>
<h3 id="多态函数">多态函数</h3>
<p>有了多态的数据类型，我们就可以写出多态的函数了。比如一个接收任何类型列表的折叠：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">filterList</span> _ <span class="type">E</span> = <span class="type">E</span></span><br><span class="line"><span class="title">filterList</span> func (<span class="type">C</span> x xs)</span><br><span class="line">    | func x = <span class="type">C</span> x (filterList xs)</span><br><span class="line">    | otherwise = filterList xs</span><br></pre></td></tr></table></figure>
<p>那么filterList的类型是什么呢？通过ghci查询结果如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">:t filterList</span><br><span class="line"><span class="title">filterList</span> :: (t -&gt; <span class="type">Bool</span>) -&gt; <span class="type">List</span> t -&gt; <span class="type">List</span> t</span><br></pre></td></tr></table></figure>
<p>可见一个多态数据类型在使用时也要接受一个类型变量作为参数。如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">a</span> :: <span class="type">List</span> <span class="type">Bool</span></span><br><span class="line"><span class="title">a</span> = <span class="type">C</span> <span class="type">True</span> (<span class="type">C</span> <span class="type">False</span> (<span class="type">C</span> <span class="type">True</span> <span class="type">E</span>))</span><br></pre></td></tr></table></figure>
<h2 id="prelude">Prelude</h2>
<p><a class="link"   href="https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.15.0.0/Prelude.html" >Prelude<i class="fas fa-external-link-alt"></i></a>是一个所有Haskell程序都默认包括的模块，定义了很多常用的多态数据类型和多态函数。例如<code>filter</code>和<code>map</code>就是<code>filterList</code>和<code>map</code>在<code>Prelude</code>中的对应版本。另外，<code>Data.List</code>模块中定义了一个更强大的<code>List</code>类型。</p>
<p>此外，一个常用的多态数据类型是<code>Maybe</code>，定义为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a</span></span><br></pre></td></tr></table></figure>
<p>一个<code>Maybe</code>类型可以是<code>Nothing</code>或一个类型的值，模块<code>Data.Maybe</code>中定义了关于<code>Maybe</code>的操作。</p>
<h2 id="全函数与偏函数">全函数与偏函数</h2>
<p>考虑一个<code>[a] -&gt; a</code>类型的函数，如<code>head</code>。它返回一个列表的首元素，如果它接受一个空列表，就会出错。这样无法处理所有合法参数的函数，就被称为偏函数。对应地，一个无论参数取值如何都能正常工作的函数称为全函数。</p>
<h3 id="偏函数转化为全函数">偏函数转化为全函数</h3>
<p>比如<code>head</code>的实现如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">head</span> :: [a] -&gt; a</span><br><span class="line"><span class="title">head</span> (x : _) = x</span><br></pre></td></tr></table></figure>
<p><code>head</code>作为一个不安全的函数是不应该出现在<code>Prelude</code>里的，这是一个失误。我们应该尽可能地不用偏函数。如果要将head转化为一个全函数，只需使用上面的<code>Maybe</code>：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">headSafe</span> :: [<span class="type">Maybe</span> a] -&gt; <span class="type">Maybe</span> a</span><br><span class="line"><span class="title">head</span> [] = <span class="type">Nothing</span></span><br><span class="line"><span class="title">head</span> (x : _) = <span class="type">Just</span> x</span><br></pre></td></tr></table></figure>
<p>尽可能地使用全函数可以大大减少我们犯错的可能。</p>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（四）——高阶编程与类型接口</title>
    <url>/blog/2021/09/06/0024-Re0:Haskell_04/</url>
    <content><![CDATA[<blockquote>
<p>不幸遭遇飞机延误，候机室写下系列第四篇，主题是高阶编程与类型接口。</p>
</blockquote>
<span id="more"></span>
<h2 id="匿名函数lambda表达式">匿名函数（lambda表达式）</h2>
<p>设想一下这样的函数，功能仅仅是简单的：保留数列中大于100的数。如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">greaterThan100</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>,<span class="number">4</span>,<span class="number">245</span>] = [<span class="number">300</span>,<span class="number">245</span>]</span><br></pre></td></tr></table></figure>
<p>我们可以使用很棒的方法实现：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">gt100</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">gt100</span> x = x &gt; <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="title">greaterThan100</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100</span> xs = filter gt100 xs</span><br></pre></td></tr></table></figure>
<p>但我们可能并不希望定义<code>gt100</code>这样的只使用一次的函数。此时就可以使用lambda表达式来代替<code>gt100</code>：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">greaterThan100_new</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100_new</span> xs = filter (\x -&gt; x &gt; <span class="number">100</span>) xs</span><br></pre></td></tr></table></figure>
<p>其中<code>\x -&gt; x &gt; 100</code>就是一个lambda表达式，它也可以有多个参数，如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 结果为6</span></span><br><span class="line">(\x y z -&gt; x + y + z) <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>lambda已经足够简单了，但这个函数还有一种更好的写法：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">greaterThan100_newer</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100_newer</span> xs = filter (&gt;<span class="number">100</span>) xs</span><br></pre></td></tr></table></figure>
<p>这里的<code>(&gt;100)</code>是一个操作片段，操作片段允许我们使用一个函数的部分调用。对于任意一个二元操作符<code>?</code>：<code>(?y)</code>等价于<code>\x -&gt; x?y</code>；<code>(y?)</code>等价于<code>\x -&gt; y?x</code>。即将缺少的部分作为函数的参数。例如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(&gt;<span class="number">100</span>) <span class="number">110</span> <span class="comment">-- True</span></span><br><span class="line">(<span class="number">100</span>&gt;) <span class="number">110</span> <span class="comment">-- False</span></span><br><span class="line"><span class="title">map</span> (*<span class="number">2</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">-- [2,4,6]</span></span><br></pre></td></tr></table></figure>
<h2 id="函数组成">函数组成</h2>
<p>试写出一个类型为<code>(b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)</code>的函数。首先我们能知道这个函数的两个参数都是函数，并且该函数的返回值也是一个函数。首先我们给出类型签名：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)</span><br></pre></td></tr></table></figure>
<p>试着写出函数的参数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> f g = ...</span><br></pre></td></tr></table></figure>
<p>由于返回值是一个函数，我们可以使用lambda表达式来实现：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> f g = \x -&gt; ...</span><br></pre></td></tr></table></figure>
<p>根据类型签名可以看出<code>x</code>先由<code>g</code>处理再由<code>f</code>处理就得到了类型为<code>c</code>的值，因此有：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> f g = \x -&gt; f (g x)</span><br></pre></td></tr></table></figure>
<p>思考一下，这个函数有什么用？答案是组合两个函数。Haskell中这样的操作是非常常用的，因此语言内置了这个操作，用操作符<code>.</code>表示，上式可写为：<code>f.g</code>。</p>
<p>题外话，在引入了函数式范式后，C++也能实现类似操作了（什么叫头号粉丝啊，战术后仰.jpg）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> a, <span class="keyword">typename</span> b, <span class="keyword">typename</span> c&gt;</span></span><br><span class="line"><span class="function">function&lt;<span class="title">c</span><span class="params">(a)</span>&gt; <span class="title">foo</span><span class="params">(<span class="type">const</span> function&lt;c(b)&gt; &amp;f, <span class="type">const</span> function&lt;b(a)&gt; &amp;g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [&amp;f, &amp;g](a x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">f</span>(<span class="built_in">g</span>(x));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见C++在这方面已经挻不错了，不过与真正的函数式编程语言相比仍有些距离。</p>
<p>言归正传，<code>.</code>操作乍看起来好像没什么用，但下面这个例子会为其用途提供一个有力的说明：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">test</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">test</span> xs = even (length (greatThan100 xs))</span><br><span class="line"><span class="comment">-- 可以写作</span></span><br><span class="line"><span class="title">test&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">test&#x27;</span> = even.length.greatThan100</span><br></pre></td></tr></table></figure>
<p>去掉了层层叠叠的括号和有些累缀的参数后，看起来优雅多了。<code>.</code>运算将函数<code>test'</code>的定义表示为了几个小函数的组合。接下来让我们再看看<code>.</code>运算：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (.)</span><br><span class="line">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c</span><br></pre></td></tr></table></figure>
<p>疑点出现了：返回值为什么不是<code>(a -&gt; c)</code>?</p>
<h2 id="柯里化">柯里化</h2>
<p>回顾我们的函数定义，如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">f</span> x y = <span class="number">2</span>*x + y</span><br></pre></td></tr></table></figure>
<p>还记得之前说过使用连续的<code>-&gt;</code>作为参数与返回值的声明背后有非常<del>暖心</del>优雅的理由吗？现在就是揭晓谜底的时刻了，先说结论：<strong>Haskell中的任何函数都接收一个参数</strong>。等等，难道上面刚定义的函数<code>f</code>不是接收了<code>x</code>和<code>y</code>两个参数吗？确实不是，实际上<code>f</code>是接收<code>x</code>作为参数，同时返回一个<code>Int -&gt; Int</code>型的函数，<code>y</code>是作为这个返回函数的参数被接收的。实际上就是lambda演算，之后会单独写一篇文章介绍lambda演算。也就是说，函数<code>f</code>的定义等价于：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span> -&gt; <span class="type">Int</span>)</span><br></pre></td></tr></table></figure>
<p>由于<code>-&gt;</code>符合右结合律，因此上式括号可以不写。这也解释了上一节末尾的疑问。同时，函数调用符合左结合律，因此：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> x y = ((f x) y)</span><br></pre></td></tr></table></figure>
<p>思考一下，<code>f x</code>的类型是一个<code>Int -&gt; Int</code>型的函数，而表达式中这个函数又接受了<code>y</code>返回一个<code>Int</code>。整个运算过程就是将参数逐个输入到对应的函数中，因此使用<code>-&gt;</code>符号来声明函数再贴切不过了。</p>
<h2 id="函数的部分应用">函数的部分应用</h2>
<p>函数的部分调用本质上就是对柯里化的应用，但永远记住每个函数本质上只有一个参数，因此我们<strong>只能对函数的第一个参数进行部分应用</strong>。唯一的例外是中缀函数，正如之前的例子所示，可以对中缀函数两个参数中的任何一个进行部分应用。</p>
<p>由于只能对第一个参数进行部分应用，因此我们的参数顺序应该遵循由普通到特殊的规则。即最容易相同的参数放在最前面。</p>
<h2 id="全麦编程">全麦编程</h2>
<p>记得一开始介绍过的全麦编程概念吗？站在整体的角度思考问题，考虑如何处理整个列表而不是处理列表中的元素，就像全麦面粉一样，直接对麦子打粉而不考虑脱壳。现在是时候体会下全麦风格的威力了，考虑下面程序：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foobar</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">foobar</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">foobar</span> (x:xs)</span><br><span class="line">    | x &gt; <span class="number">3</span> = (<span class="number">7</span> * x + <span class="number">2</span>) + foobar xs</span><br><span class="line">    | otherwise foobar xs</span><br></pre></td></tr></table></figure>
<p>这个程序的功能看起来很直观，但并不是良好的Haskell风格，主要存在两点问题：</p>
<ol type="1">
<li>一个程序同时处理了过多的事务。</li>
<li>代码工作得太底层了。</li>
</ol>
<p>我们可以将其功能实现为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foobar&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">foobar&#x27;</span> sum . map (\x -&gt; <span class="number">7</span> * x + <span class="number">2</span>) . filter (&gt;<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>这样的实现将很多只做好一件事的小函数组合起来，使得函数更加清晰与直观。</p>
<h2 id="折叠">折叠</h2>
<p>增加了许多知识后，我们可以讨论上一节中被搁置的折叠操作了。先来直观体会折叠操作：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sum&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sum&#x27;</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">sum&#x27;</span> (x:xs) = x + sum&#x27; xs</span><br><span class="line"></span><br><span class="line"><span class="title">product&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">product&#x27;</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">product&#x27;</span> (x:xs) = x * product&#x27; xs</span><br><span class="line"></span><br><span class="line"><span class="title">length&#x27;</span> :: [a] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">length&#x27;</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">length&#x27;</span> (x:xs) = <span class="number">1</span> + length&#x27; xs</span><br></pre></td></tr></table></figure>
<p>这三个函数的共性是什么？是通过某种方式将元素们组合成一个最终结果。我们可以将其抽象为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fold</span> :: b -&gt; (a -&gt; b -&gt; b) -&gt; [a] -&gt; b</span><br><span class="line"><span class="title">fold</span> z f [] = z</span><br><span class="line"><span class="title">fold</span> z f (x:xs) = f x (fold z f xs)</span><br></pre></td></tr></table></figure>
<p>此时函数运算过程可以做如下展开：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fold</span> z f [a,b,c] == f a (f b (f c z))</span><br><span class="line"><span class="comment">-- 写成中缀形式可能更好理解</span></span><br><span class="line"><span class="title">fold</span> z f [a,b,c] == a `f` (b `f` (c `f` z))</span><br></pre></td></tr></table></figure>
<p>看出来了吗？<code>fold</code>函数是把一个列表最右边的两个元素进行组合，并使用组合后的元素代替原来的两个函数，直到列表为空。</p>
<p>有了这个函数，之前的几个函数就可以写为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sum&#x27;&#x27;</span> = fold <span class="number">0</span> (+)</span><br><span class="line"><span class="title">product&#x27;&#x27;</span> = fold <span class="number">0</span> (*)</span><br><span class="line"><span class="title">length&#x27;&#x27;</span> = fold <span class="number">0</span> (\_ s -&gt; s + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>观察<code>\_ s -&gt; s + 1</code>，可以消去两边的<code>s</code>，化为<code>\_ -&gt; (+1)</code>。</p>
<p>另一种思路是使用<code>const</code>函数。<code>const</code>函数的类型为<code>a-&gt;b-&gt;a</code>，效果是输入两个参数，并返回第一个参数作为结果（即丢弃第二个参数），和C++的const关键字完全不是一回事。</p>
<p><code>\_ s -&gt; s + 1</code>的作用显然是丢弃第一个参数，并返回第二个参数+1后的值。可写为<code>const (+1)</code>。</p>
<p>解说一下：<code>const (+1)</code>是一个对<code>const</code>的部分应用，即使用<code>(+1)</code>作为<code>const</code>的第一个参数，此时这个部分应用变成了接受一个参数并返回<code>(+1)</code>的函数。不要忘记<code>(+1)</code>本身也是一个部分应用，其类型为<code>a -&gt; a</code>，则<code>const (+1)</code>的类型就是<code>b -&gt; a -&gt; a</code>。符合了我们<code>fold</code>函数对参数<code>f</code>的要求。</p>
<p>具体举例，对于<code>f 2 3</code>，有：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- f = \_ s -&gt; s + 1</span></span><br><span class="line"><span class="title">f</span> <span class="number">2</span> <span class="number">3</span> == <span class="number">3</span> + <span class="number">1</span> == <span class="number">4</span></span><br><span class="line"><span class="comment">-- f = \_ -&gt; (+1)</span></span><br><span class="line"><span class="title">f</span> <span class="number">2</span> <span class="number">3</span> == (+<span class="number">1</span>) <span class="number">3</span> == <span class="number">4</span></span><br><span class="line"><span class="comment">-- f = const (+1)</span></span><br><span class="line"><span class="title">f</span> <span class="number">2</span> <span class="number">3</span> == const (+<span class="number">1</span>) <span class="number">2</span> <span class="number">3</span> == (+<span class="number">1</span>) <span class="number">3</span> == <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>作为一个常用的函数，<code>fold</code>在<code>Prelude</code>中当然也有定义，即为<code>foldr</code>。<code>Prelude</code>中依赖于<code>foldr</code>定义的函数有：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">length</span> :: [a] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sum</span> :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br><span class="line"><span class="title">product</span> :: <span class="type">Num</span> a =&gt; [a] -&gt; a</span><br><span class="line"><span class="title">and</span> :: [<span class="type">Bool</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">or</span> :: [<span class="type">Bool</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">any</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">all</span> :: (a-&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<p>你可能会对<code>=&gt;</code>感到默生，这个符号我们会在下一节进行介绍。</p>
<p>还有一个<code>foldl</code>函数，表示从左边折叠，与<code>foldr</code>的区别如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foldr</span> f z [a,b,c] = a `f` (b `f` (c `f` z))</span><br><span class="line"><span class="title">foldl</span> f z [a,b,c] = ((z `f` a) `f` b) `f` c</span><br></pre></td></tr></table></figure>
<p>注意<code>foldr</code>和<code>foldl</code>的参数顺序与我们的<code>fold</code>函数不同。</p>
<p>一般来说我们还可以使用<code>Data.List</code>模块中的<code>foldl'</code>函数，它是<code>foldl</code>的一个更高性能的实现。</p>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（五）——更多多态与类型类</title>
    <url>/blog/2021/09/10/0025-Re0:Haskell_05/</url>
    <content><![CDATA[<blockquote>
<p>系列第五篇，介绍更强的多态性和类型类。</p>
</blockquote>
<span id="more"></span>
<p>Haskell关于多态性的一个广为人知的特点是参数多态，即一个多态函数对任何类型的输入都应该有一个一致的行为。这个特性导致了许多有趣的隐患，对程序开发者和多态函数的使用者皆有影响。</p>
<h2 id="参数化">参数化</h2>
<p>考虑如下类型：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">a</span> -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>记住<code>a</code>是一个能代表任何类型的类型变量。哪些函数是这种类型？下面这个函数怎么样？</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> :: a -&gt; a -&gt; a</span><br><span class="line"><span class="title">f</span> x y = x &amp;&amp; y</span><br></pre></td></tr></table></figure>
<p>这个函数是无法工作的，即使它符合语法。因为无法通过类型检查。我们可以获取以下报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">• Couldn&#x27;t match expected type ‘Bool’ with actual type ‘a’</span><br><span class="line">  ‘a’ is a rigid type variable bound by</span><br><span class="line">    the type signature for:</span><br><span class="line">      f :: forall a. a -&gt; a -&gt; a</span><br><span class="line">    at test.hs:1:1-12</span><br><span class="line">• In the first argument of ‘(&amp;&amp;)’, namely ‘x’</span><br><span class="line">  In the expression: x &amp;&amp; y</span><br><span class="line">  In an equation for ‘f’: f x y = x &amp;&amp; y</span><br></pre></td></tr></table></figure>
<p>无法工作的原因是多态函数的调用者可以选择类型，而这个我们——函数的实现者——已经选择了一个特定的类型（Bool），但我们仍可能接收到一个<code>String</code>，或<code>Int</code>甚至是一个用户自定义类型。因此这个函数无法工作，换言之，你可以将类型声明视为一个保证，<code>a-&gt;a-&gt;a</code>保证这个函数无论接收了什么类型的参数都可以正常工作。</p>
<p>为了处理这种情况，我们或许为想到类似这样的处理方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f a1 a2 = case (typeOf a1) of</span><br><span class="line">   Int  -&gt; a1 + a2</span><br><span class="line">   Bool -&gt; a1 &amp;&amp; a2</span><br><span class="line">   _    -&gt; a1</span><br></pre></td></tr></table></figure>
<p>这里<code>f</code>为特定类型定义特定的行为，我们可以使用C++实现出一个这样的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::is_same;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">f</span><span class="params">(T a1, T a2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_same&lt;T, <span class="type">int</span>&gt;::value) &#123;</span><br><span class="line">        <span class="keyword">return</span> a1 + a2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_same&lt;T, <span class="type">bool</span>&gt;::value) &#123;</span><br><span class="line">        <span class="keyword">return</span> a1 &amp;&amp; a2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="literal">true</span>, <span class="literal">false</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="number">2.1</span>, <span class="number">3.0</span>) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果为： 5 0 2.1</span></span><br></pre></td></tr></table></figure>
<p>但这种方式在Haskell中是行不通的，Haskell并没有类似<code>is_same</code>的类型检查函数，这主要是因为Haskell是一种静态强类型语言，在通过编译期类型检查后Haskell就不再保留任何类型信息了。同时我们即将看到一个更好的理由。</p>
<p>C++与Java中对多态的支持主要是通过泛型提供的，而泛型编程这一思想正是受到Haskell的启发而诞生的。言归正传，什么样的函数可以是<code>a -&gt; a -&gt; a</code>类型的？其实只有两个函数可以：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f1</span> :: a -&gt; a -&gt; a</span><br><span class="line"><span class="title">f1</span> x y = x</span><br><span class="line"></span><br><span class="line"><span class="title">f2</span> :: a -&gt; a -&gt; a</span><br><span class="line"><span class="title">f2</span> x y = y</span><br></pre></td></tr></table></figure>
<p>来做一个参数化游戏！考虑以下的多态类型，确定每种类型可能具有的行为方式。</p>
<ul>
<li><p><code>a -&gt; a</code></p>
<p>这类型的函数仅可能是接受一个参数并返回参数本身的函数。</p></li>
<li><p><code>a -&gt; b</code></p>
<p>这类型的函数很难写出来，因为它的含义不是“接受一个任意类型的参数并<strong>任意返回一个类型</strong>的值”，而是“接受一个任意类型的参数并<strong>返回一个任意类型</strong>的值”。也就是说这个返回值必须能被视作任意类型。</p>
<p>可能只有<code>f _ = undefined</code>与<code>f x = f x</code>符合这个要求。</p></li>
<li><p><code>a -&gt; b -&gt; a</code></p>
<p>这个函数可以是一个返回第一个参数并抛弃第二个参数的的函数，如<code>const</code>。</p></li>
<li><p><code>[a] -&gt; [a]</code></p>
<p>操作列表但不操作元素的函数皆可，比如<code>f xs = [head xs]</code>。</p></li>
<li><p><code>(b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)</code></p>
<p><code>f g h = \x -&gt; g(h x)</code>，即<code>.</code>运算符。也就是对函数进行操作，但不对具体类型进行操作即可。</p></li>
<li><p><code>(a -&gt; a) -&gt; a -&gt; a</code></p>
<p>由于函数的返回类型和参数类型相同，符合要求的函数可以是一个自已定义自己的函数，如：<code>f = f</code>。</p></li>
</ul>
<p>经过这几个例子的思考，你可能会发现，想要实现多态性，就不要对元素进行任何操作。因为你要接受一个任意类型的参数，而无论什么操作，总会有不支持的类型。这并不只是一个约束，同时是一个非常强大的保护。这样严格的类型系统使得函数的使用者可以更放心的调用函数，同时也使得一个函数的类型说明包含了足够大致了解一个函数的信息。</p>
<p>比如你看到一个<code>a -&gt; a</code>类型的函数就可以肯定这个函数接受任意接收一个类型的值并返回一个同类型的值，而无需担心其它影响。而一个函数签名为<code>T func(T)</code>的C++函数则无法提供如此担保，你可能会担心这个函数对全局状态产生影响，或是传入的类型不对导致程序崩溃。</p>
<p>等等，既然如此，<code>+</code>是怎么实现的？对<code>Integer</code>的加法和对<code>Double</code>的加法完全是两回事，难道不需要判断类型吗？事实上确实不需要判断类型，但也并非什么魔法，看一下<code>+</code>的定义：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(+) :: <span class="type">Num</span> a =&gt; a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>又见<code>=&gt;</code>，还有前面看起来像一个ADT的奇怪符号<code>Num a</code>。还有其它几个函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(==) :: <span class="type">Eq</span> a   =&gt; a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line">(&lt;)  :: <span class="type">Ord</span> a  =&gt; a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">show</span> :: <span class="type">Show</span> a =&gt; a -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure>
<p>所以这些符号是什么意思？</p>
<h2 id="类型类">类型类</h2>
<p>揭晓答案的时候到了，<code>Num</code>、<code>Eq</code>、<code>Ord</code>和<code>Show</code>都是类型类，并且使用了类型类的函数称为“类型类多态”。类型类是对函数接受的类型的约束，它表示定义了指定操作的类型的集合。同时类型类多态函数仅为符合类型类定义的类型工作。</p>
<p>通俗点说，C++等语言中的函数无论什么参数都得先请进来看看，不合适再请出去，或者一个想不开就崩溃了。而Haskell的函数做为一等公民比较霸道，可以事先对参数类型作一个要求，并且让那些达不到要求的参数爬。这个要求就是类型类，例如<code>Eq</code>的定义如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span></span><br><span class="line">  (==) :: a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line">  (/=) :: a -&gt; a -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<p>这个定义可以这么理解：一个接受一个参数的类型类<code>Eq</code>，符合<code>Eq</code>要求的类型必须定义两个操作：<code>==</code>和<code>/=</code>。比如要使<code>Int</code>成为<code>Eq</code>的实例，就必须定义函数<code>(==) :: Int -&gt; Int -&gt; Bool</code>和<code>(/=) :: Int -&gt; Int -&gt; Bool</code>。再看看<code>(==)</code>的定义：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(==) :: <span class="type">Eq</span> a =&gt; a -&gt; a -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<p>这个定义理解为：一个类型如果是<code>Eq</code>的实例，那么对两个参数进行比较并返回比较结果，如果参数不是<code>Eq</code>的实例则解释期报错。一个普通多态函数保证对任何类型生效，而一个类型类多态函数仅保证对类型类实例类生效。</p>
<p>需要注意的是，当调用<code>(==)</code>时，编译器根据类型选择使用哪个实例。这个机制与C++中的多态比较类似，即根据类型选择合适的实例。</p>
<p>为了更好的掌握类型类的概念，我们来构建一个ADT并使其成为<code>Eq</code>的实例。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Foo</span> = <span class="type">F</span> <span class="type">Int</span> | <span class="type">G</span> <span class="type">Char</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> <span class="type">Foo</span> <span class="keyword">where</span></span></span><br><span class="line">  (<span class="type">F</span> i1) == (<span class="type">F</span> i2) = i1 == i2</span><br><span class="line">  (<span class="type">G</span> c1) == (<span class="type">G</span> c2) = c1 == c2</span><br><span class="line">  _ == _ = <span class="type">False</span></span><br><span class="line">  </span><br><span class="line">  foo1 /= foo2 = not (foo1 == foo2)</span><br></pre></td></tr></table></figure>
<p>定义了<code>==</code>还要定义<code>/=</code>。我们可以修改一下<code>Eq</code>的定义，来为<code>/=</code>定义一个默认实现模式。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span></span><br><span class="line">  (==) :: a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line">  (/=) :: a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line">  x /= y = not (x == y)</span><br></pre></td></tr></table></figure>
<p>这样就可以仅定义<code>==</code>，由默认实现模式去生成<code>/=</code>的定义。实际上<code>Eq</code>的定义如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span></span><br><span class="line">  (==), (/=) :: a -&gt; a -&gt; <span class="type">Bool</span></span><br><span class="line">  x == y = not (x /= y)</span><br><span class="line">  x /= y = x == y</span><br></pre></td></tr></table></figure>
<p>这个定义可以使我们只用定义<code>==</code>与<code>/=</code>中的任意一个，但要小心，如果我们一个也没定义就会导致一个无限循环。</p>
<p>对于<code>Eq</code>与其它几个比较特殊的类型类，GHC可以为我们自动生成它们的实例，就像我们之前使用过的那样：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Foo&#x27;</span> = <span class="type">F&#x27;</span> <span class="type">Int</span> | <span class="type">G&#x27;</span> <span class="type">Char</span></span></span><br><span class="line">  <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>)</span><br></pre></td></tr></table></figure>
<h3 id="类型类与面向对象接口">类型类与面向对象接口</h3>
<p>类型类可能看起来与面向对象语言中的接口比较相似，但它更为强大，体现在：</p>
<ol type="1">
<li><p>接口的实例类一但定义就必须实现所有接口，而类型类可以被每个类型自由组合。</p></li>
<li><p>类型类在处理多类型时更为强大，目前Java没有简单的方法可以做到：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Blerg</span> a b <span class="keyword">where</span></span></span><br><span class="line">  blerg :: a -&gt; b -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure></li>
<li><p>并且类型类可以更方便的处理多元运算，如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Num</span> a <span class="keyword">where</span></span></span><br><span class="line">  (+) :: a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>而在Java或C++中，对多元运算符的重载总是以某一个类型为主，比较尴尬。</p></li>
</ol>
<h3 id="其它标准类型类">其它标准类型类</h3>
<p><code>Ord</code>：确保类型可以被完全排序，在C++中的常见做法是实现<code>&lt;</code>运算符。</p>
<p><code>Num</code>：数字类型，使得类型可以进行加减法等运算。一个非常重要的事情是，数字常量也是类型类多态：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t <span class="number">5</span></span><br><span class="line"><span class="number">5</span> :: <span class="type">Num</span> a =&gt; a</span><br></pre></td></tr></table></figure>
<p>这意味着5可以被用作任何数字类型，包括自己定义的类型。</p>
<p><code>Show</code>：定义模式show，将值转换为<code>String</code>类型。</p>
<p><code>Read</code>：<code>Show</code>的逆运算。</p>
<p><code>Integal</code>：表示整数类型，如<code>Int</code>和<code>Integer</code>。</p>
<h3 id="类型类实例">类型类实例</h3>
<p>这一节我们来定义一个自己的类型类，如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Listable</span> a <span class="keyword">where</span></span></span><br><span class="line">  toList :: a -&gt; [<span class="type">Int</span>]</span><br></pre></td></tr></table></figure>
<p><code>Listable</code>类型类表示可以转换为<code>Int</code>列表的类型。首先，<code>Int</code>和<code>Bool</code>都可以简单的转换为一个只有一个元素的列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> <span class="type">Int</span> <span class="keyword">where</span></span></span><br><span class="line">  toList x = [x]</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> <span class="type">Bool</span> <span class="keyword">where</span></span></span><br><span class="line">  toList <span class="type">True</span> = [<span class="number">1</span>]</span><br><span class="line">  toList <span class="type">False</span> = [<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>我们无需对<code>[Int]</code>类型进行转换：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> [<span class="type">Int</span>] <span class="keyword">where</span></span></span><br><span class="line">  toList = id</span><br></pre></td></tr></table></figure>
<p>最后，我们也可以将一个自定义类型转换为<code>[Int]</code>列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> (<span class="type">Tree</span> <span class="type">Int</span>) <span class="keyword">where</span></span></span><br><span class="line">  toList <span class="type">Empty</span> = []</span><br><span class="line">  toList (<span class="type">Node</span> x l r) = toList l ++ [x] ++ toList r</span><br></pre></td></tr></table></figure>
<p>我们可以使用<code>Listable</code>的特性定义其它函数，如：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sumL</span> :: <span class="type">Listable</span> a =&gt; a -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sumL</span> x = sum (toList x)</span><br></pre></td></tr></table></figure>
<p><code>sumL</code>只为<code>Listable</code>类型工作，那么下面的函数呢？</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> x y = sum (toList x) == sum (toList y) || x &lt; y</span><br></pre></td></tr></table></figure>
<p><code>foo</code>的类型为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> :: (<span class="type">Listable</span> a, <span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<p>即它的参数类型必须同时是<code>Listable</code>和<code>Ord</code>的实例。</p>
<p>最后，来看一个复杂点的实例：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Listable</span> <span class="title">a</span>, <span class="type">Listable</span> <span class="title">b</span>) =&gt; <span class="type">Listable</span> (<span class="title">a</span>, <span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">  toList (x, y) = toList x ++ toList y</span><br></pre></td></tr></table></figure>
<p>只要类型变量在函数定义中，我们就可以为它指定类型类。注意，这个函数并不是递归函数，调用的<code>toList x</code>与<code>toList y</code>是其它类型的实例，而不是该函数本身。</p>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（六）——惰性求值</title>
    <url>/blog/2021/09/15/0026-Re0:Haskell_06/</url>
    <content><![CDATA[<blockquote>
<p>系列第六篇，介绍惰性求值。</p>
</blockquote>
<span id="more"></span>
<h1 id="section"></h1>
<p>经过了前几篇的折磨，是时候介绍惰性求值了。</p>
<h2 id="直接求值">直接求值</h2>
<p>在讨论惰性求值之前首先来了解一下直接求值。在直接求值方式下，参数在传入函数之前就已经计算过了，传入函数的是计算结果。考虑如下函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> x y = x + <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>在直接求值的语言中，<code>f 5 (29^35792)</code>会先分别计算出<code>5</code>和<code>29^35792</code>的值，然后才将这两个值传入函数中进行处理。对于我们这个函数而言，这样做显然浪费了计算<code>29^35792</code>耗费的计算资源。因为我们跟本没有使用参数<code>y</code>。</p>
<p>那么为什么要使用直接求值呢？一个显著的好处是直接求值可以很方便的预测处理表达式的时机，对于有副作用的语言而言，比如C++中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">f</span> (<span class="built_in">x</span>(), <span class="built_in">y</span>());</span><br></pre></td></tr></table></figure>
<p>可以确保在函数<code>f</code>调用之前已经对<code>x()</code>与<code>y()</code>函数进行了处理，比如更改全局变量的值。因此我们可以使程序的行为和我们的预期相符。</p>
<h2 id="副作用和纯净">副作用和纯净</h2>
<p>所谓的副作用就是指表达式计算时对该表达式之外的事物造成了影响。这里的关键是对外界事物的影响是时间敏感的。比如：</p>
<ul>
<li>更改全局变量：当全局变量的值改变时可能会对其它表达式的结果造成影响。</li>
<li>在屏幕上打印内容：需要一个确定的打印顺序。</li>
<li>读取文件或网络内容：文件中的内容会影响表达式的结果。</li>
</ul>
<p>就像我们之前看到的，惰性求值使得确定事情何时发生变得很难。因此如果引入副作用将会使得程序非常不直观。这就是Haskell没有副作用的历史原因，当时设计者想设计一门惰性求值语言，但他很快意识到只有禁止表达式产生副作用才可能实现。</p>
<p>但是没有副作用的语言几乎没有什么用。你能做的唯一一件事就是使用你的程序去翻译和计算表达式。你不能获取任何用户输入或是读写文件，也不能在屏幕上输出任何东西。Haskell的设计者面对的挑战是设计一种严格且规范的方式去允许一部分副作用，并且不能影响到基础语言部分的纯净。他们最终搞出来一个叫做<code>IO monad</code>的东西，这个我们之后再说。</p>
<h2 id="惰性求值">惰性求值</h2>
<p>现在我们已经知道了什么是直接求值，是时候看看惰性求值长什么样了。在惰性求值方式下，对函数参数的计算会尽可能地拖延：只有在必须用到它们的值的时候才计算它们。当向函数传递一个参数的时候，它们被整个打包（这个包称为thunk），以未计算表达式的方式传入。这过程中不作任何实际处理。</p>
<p>举例来说，计算<code>f 5 (29^35792)</code>时，第二个参数被简单的打包成thunk并且不做任何实际的计算，并且<code>f</code>会被立刻调用。因为<code>f</code>实际上根本没用到第二个参数，这个thunk会被GC系统直接抛弃。</p>
<h2 id="模式匹配驱动计算">模式匹配驱动计算</h2>
<p>所以一个表达式什么时候才必须进行计算呢？一个关键是看它什么时候被使用，但实际上这 并不是最重要的区别。考虑下面的例子：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f1</span> :: <span class="type">Maybe</span> a -&gt; [<span class="type">Maybe</span> a]</span><br><span class="line"><span class="title">f1</span> m = [m, m]</span><br><span class="line"></span><br><span class="line"><span class="title">f2</span> :: <span class="type">Maybe</span> a -&gt; [a]</span><br><span class="line"><span class="title">f2</span> <span class="type">Nothing</span> = []</span><br><span class="line"><span class="title">f2</span> <span class="type">Just</span> x = [x]</span><br></pre></td></tr></table></figure>
<p>这里的<code>f1</code>与<code>f2</code>都使用了它们的参数，但其中有很大的区别。<code>f1</code>并不在乎参数是个什么东西，只要把它整个地丢进列表里就行了。而<code>f2</code>就必须知道参数的值，来决定如何处理参数。</p>
<p>另一个关键是，thunk只会被计算到足够使用的程度，比如说<code>safeHead [3 ^ 500, 49]</code>会得到结果<code>Just (3^500)</code>，而不会接着计算<code>3 ^ 500</code>（属实够懒的......）。至于这个<code>3 ^ 500</code>之后会不会被计算，取决于这个thunk的使用方式。</p>
<p>一个方便记忆的口诀就是本节标题：<strong>模式匹配驱动计算</strong>。两个重点：</p>
<ul>
<li>表达式仅在被模式匹配时计算。</li>
<li>表达式仅计算到足够当前模式使用的程度。</li>
</ul>
<p>来看一个更有趣的例子，<code>take 3 (repeat 7)</code>。作为参考，<code>take</code>和<code>repeat</code>的定义如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">repeat</span> a -&gt; [a]</span><br><span class="line"><span class="title">repeat</span> x = x : repeat x</span><br><span class="line"></span><br><span class="line"><span class="title">take</span> :: <span class="type">Int</span> -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">take</span> n _ | n &lt;= <span class="number">0</span> = []</span><br><span class="line"><span class="title">take</span> _ [] = []</span><br><span class="line"><span class="title">take</span> n (x:xs) = x : take (n - <span class="number">1</span>) xs</span><br></pre></td></tr></table></figure>
<p>来一步一步地考虑这个式子：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">take</span> <span class="number">3</span> (repeat <span class="number">7</span>) <span class="comment">-- 首先对take的第一个模式进行匹配，3 &lt;= 0为False，因此第一个模式不匹配，此时尝试匹配第二模式，这里需要知道第二个参数是不是空列表，因此我们必须展开repeat 7。但我们是惰性求值，所以先展开一步看看。</span></span><br><span class="line"><span class="title">take</span> <span class="number">3</span> (<span class="number">7</span> : repeat <span class="number">7</span>) <span class="comment">-- 这里已经足够看出第二个参数不是空列表了，所以不用继续展开，尝试匹配第三个模式，匹配。因此使用第三个表达式进行处理。注意（3-1）还不需要计算。</span></span><br><span class="line"><span class="number">7</span> : take (<span class="number">3</span> - <span class="number">1</span>) (repeat <span class="number">7</span>) <span class="comment">-- 尝试对第一个模式进行匹配，判断(3 - 1) &lt;= 0时需要对（3 - 1）进行计算。</span></span><br><span class="line"><span class="number">7</span> : take <span class="number">2</span> (repeat <span class="number">7</span>) <span class="comment">-- 2 &lt;= 0为False，试图匹配第二个模式，过程不再赘述。</span></span><br><span class="line"><span class="number">7</span> : take <span class="number">2</span> (<span class="number">7</span> : repeat <span class="number">7</span>)</span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : take (<span class="number">2</span> - <span class="number">1</span>) (repeat <span class="number">7</span>)</span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : take <span class="number">1</span> (repeat <span class="number">7</span>)</span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : take <span class="number">1</span> (<span class="number">7</span> : repeat <span class="number">7</span>)</span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : <span class="number">7</span> : take (<span class="number">1</span> - <span class="number">1</span>) (repeat <span class="number">7</span>)</span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : <span class="number">7</span> : take <span class="number">0</span> (repeat <span class="number">7</span>) <span class="comment">-- 0 &lt;= 0为True，匹配第一个模式。</span></span><br><span class="line"><span class="number">7</span> : <span class="number">7</span> : <span class="number">7</span> : []</span><br></pre></td></tr></table></figure>
<p>注意，虽然逻辑上一个表达示是这样步步展开的，但大多数Haskell的编译器实现会使用一些更有效率的方式进行处理，以提高性能。</p>
<h2 id="惰性求值带来的影响">惰性求值带来的影响</h2>
<p>惰性求值带来了一些有趣、无处不在而又不甚明显的影响，试说明几例。</p>
<h3 id="纯净">纯净</h3>
<p>正如之前所说，惰性求值特性迫使了我们选择纯净（除非你不想要程序员活了）。</p>
<h3 id="理解空间消耗">理解空间消耗</h3>
<p>惰性求值也有其缺点，其中之一就是很难估算程序对空间资源的消耗。考虑下例：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给出标准库foldl定义作为参考</span></span><br><span class="line"><span class="title">foldl</span> :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br><span class="line"><span class="title">foldl</span> _ z []  = z</span><br><span class="line"><span class="title">foldl</span> f z (x:xs) = foldl f (f z x) xs</span><br></pre></td></tr></table></figure>
<p>来看看如何处理<code>foldl (+) 0 [1,2,3]</code>：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foldl</span> (+) <span class="number">0</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">= foldl (+) (<span class="number">0</span>+<span class="number">1</span>) [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">= foldl (+) ((<span class="number">0</span>+<span class="number">1</span>)+<span class="number">2</span>) [<span class="number">3</span>]</span><br><span class="line">= foldl (+) (((<span class="number">0</span>+<span class="number">1</span>)+<span class="number">2</span>)+<span class="number">3</span>) []</span><br><span class="line">= (((<span class="number">0</span>+<span class="number">1</span>)+<span class="number">2</span>)+<span class="number">3</span>)</span><br><span class="line">= ((<span class="number">1</span>+<span class="number">2</span>)+<span class="number">3</span>)</span><br><span class="line">= (<span class="number">3</span>+<span class="number">3</span>)</span><br><span class="line">= <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>这个式子一开始被处理为一个大的thunk<code>(((0+1)+2)+3)</code>并且没有进行实际上的运算，然后最终才由thunk计算出一个数值。这里至少存在两个问题，其一是将一个列表转换成一个类似列表的东西并没有任何价值。其二是处理这样的thunk将会消耗很多空间资源，比如在计算<code>1+2</code>时要先将<code>3</code>推入栈中。在这样的小例子中可能看不出什么消耗，但在处理大列表时这样的空间消耗是非常巨大的。</p>
<p>这个问题的解决方案是使用<code>foldl'</code>，它是一个更接近直接求值的<code>foldl</code>实现，因此不会构建出一个巨大的thunk：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foldl&#x27;</span> (+) <span class="number">0</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">= foldl&#x27; (+) (<span class="number">0</span> + <span class="number">1</span>) [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">= foldl&#x27; (+) <span class="number">1</span> [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">= foldl&#x27; (+) (<span class="number">1</span> + <span class="number">2</span>) [<span class="number">3</span>]</span><br><span class="line">= foldl&#x27; (+) <span class="number">3</span> [<span class="number">3</span>]</span><br><span class="line">= foldl&#x27; (+) (<span class="number">3</span> + <span class="number">3</span>) []</span><br><span class="line">= foldl&#x27; (+) <span class="number">6</span> []</span><br><span class="line">= <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h3 id="短路运算符">短路运算符</h3>
<p>对C++和Java比较熟悉的话，一定知道其中<code>&amp;&amp;</code>和<code>||</code>运算符的短路现象。对于这样的直接求值语言而言，函数的参数在传入之前应该先计算。显然短路是不符合这个特性的，因此短路其实是这些语言的一个特例。</p>
<p>而对于Haskell，短路就显得非常自然了，比如<code>(&amp;&amp;)</code>函数定义如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(&amp;&amp;) :: <span class="type">Bool</span> -&gt; <span class="type">Bool</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="type">True</span>  &amp;&amp; x = x</span><br><span class="line"><span class="type">False</span> &amp;&amp; _ = <span class="type">False</span></span><br></pre></td></tr></table></figure>
<p>同时也有一个不短路的版本<code>&amp;&amp;!</code>，定义为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(&amp;&amp;!) :: <span class="type">Bool</span> -&gt; <span class="type">Bool</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="type">True</span>  &amp;&amp;! <span class="type">True</span>  = <span class="type">True</span></span><br><span class="line"><span class="type">True</span>  &amp;&amp;! <span class="type">False</span> = <span class="type">True</span></span><br><span class="line"><span class="type">False</span> &amp;&amp;! <span class="type">True</span>  = <span class="type">True</span></span><br><span class="line"><span class="type">False</span> &amp;&amp;! <span class="type">False</span> = <span class="type">True</span></span><br></pre></td></tr></table></figure>
<h3 id="用户定义的控制结构">用户定义的控制结构</h3>
<p>基于与上面的短路同样的思路，我们可以定义自己的用户控制结构。大多数语言有内置的<code>if</code>语句，而在Haskell中可以简单的将<code>if</code>定义为一个函数，定义如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">if&#x27;</span> <span class="type">Bool</span> -&gt; a -&gt; a -&gt; a</span><br><span class="line"><span class="title">if&#x27;</span> <span class="type">True</span>  x _ = x</span><br><span class="line"><span class="title">if&#x27;</span> <span class="type">False</span> _ y = y</span><br></pre></td></tr></table></figure>
<p>然而Haskell还是存在一个内置的<code>if</code>语句，可能是语言设计者觉得大家需要吧。不过<code>if</code>在Haskell中并没有许多用处，最好还是使用模式匹配和哨卫。</p>
<p>我们也能定议其它的控制结构，这些会在讨论<code>monad</code>时展开。</p>
<h3 id="无限数据结构">无限数据结构</h3>
<p>由于惰性求值特性，我们可以定义无限的数据结构，比如<code>repeat 7</code>这样的无限列表，或是一个完整的记录状态空间的树（比如棋类游戏）。由于我们只会计算使用到的部分，这样的定义并不会带来额外的负担。</p>
<h3 id="管道全麦编程">管道/全麦编程</h3>
<p>之前我们说过使用管道的形式组合小函数成获得更好的内存性能，现在可以解释为什么了。因为管道中的每个小函数的值在传递给下一个函数时都会被计算出来。因此对内存的浪费局限在了一个小的范围内。</p>
<h3 id="动态规划">动态规划</h3>
<p>惰性求值给我们带来了更方便的动态规划技术。通常我们使用动态规划时要小心考虑状态表的求值顺序，如果顺序错了就将得到一个完全错误的结果。</p>
<p>然而，我们可以使用惰性求值特性来让Haskell运行时为我们选择求值顺序。比如对于经典的0-1背包问题，我们可以这样解决：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">knapsack01</span> :: [<span class="type">Double</span>]   <span class="comment">--物品价值</span></span><br><span class="line">           -&gt; [<span class="type">Integer</span>]  <span class="comment">--物品重量</span></span><br><span class="line">           -&gt; <span class="type">Integer</span>    <span class="comment">--背包载量</span></span><br><span class="line">           -&gt; <span class="type">Double</span>     <span class="comment">--最大价值</span></span><br><span class="line"><span class="title">knaspsack01</span> vs ws maxW = m!(numItems - <span class="number">1</span>, maxW)</span><br><span class="line">    <span class="keyword">where</span> numItems = length vs</span><br><span class="line">          m = array ((-<span class="number">1</span>, <span class="number">0</span>), (numItems - <span class="number">1</span>, maxW)) $</span><br><span class="line">                [((-<span class="number">1</span>, w), <span class="number">0</span>) | w &lt;- [<span class="number">0</span> .. maxW]] ++</span><br><span class="line">                [((i, <span class="number">0</span>), <span class="number">0</span>) | i &lt;- [<span class="number">0</span> .. numItems - <span class="number">1</span>]] ++</span><br><span class="line">                [((i, w), best)</span><br><span class="line">                    | i &lt;- [<span class="number">0</span> .. numItems - <span class="number">1</span>]</span><br><span class="line">                    , w &lt;- [<span class="number">1</span> .. maxW]</span><br><span class="line">                    , <span class="keyword">let</span> best</span><br><span class="line">                           | ws!!i &gt; w = m!(i - <span class="number">1</span>, w)</span><br><span class="line">                           | otherwise = max (m!(i - <span class="number">1</span>, w))</span><br><span class="line">                                          (m!(i - <span class="number">1</span>, w - ws!!i) + vs!!i)</span><br><span class="line">                ]</span><br></pre></td></tr></table></figure>
<p>为了理解这个程序，首先解释一下<code>array</code>，其作用为封装一个指定范围内索引到值的映射列表，并提供运算符<code>!</code>实现方便的<code>k-v</code>映射，用法为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- array key范围 映射列表</span></span><br><span class="line"><span class="comment">-- array (min, max) [(index, value)]</span></span><br><span class="line"><span class="title">array</span> :: <span class="type">Ix</span> i =&gt; (i, i) -&gt; [(i, e)] -&gt; <span class="type">Array</span> i e</span><br><span class="line"><span class="comment">-- 如下例生成一个索引范围从1到10的映射，每个索引对应的值为索引值+1</span></span><br><span class="line"><span class="title">a</span> = array (<span class="number">1</span>, <span class="number">10</span>) [(i, i + <span class="number">1</span>) | i &lt;- [<span class="number">1</span>..<span class="number">10</span>]]</span><br><span class="line"><span class="comment">-- 取该映射中的一个value时，使用array！key的方式，如</span></span><br><span class="line"><span class="title">a</span>!<span class="number">1</span> == <span class="number">1</span></span><br><span class="line"><span class="comment">-- 似乎等效于直接对列表进行如下操作</span></span><br><span class="line"><span class="title">l</span> = [(i, i + <span class="number">1</span>) | i &lt;- [<span class="number">1</span>..<span class="number">10</span>]]</span><br><span class="line"><span class="title">snd</span> $ l!!<span class="number">1</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>再回顾一下0-1背包问题，问题描述为:</p>
<blockquote>
<p>给定n个物品与一个最大载重为maxW的背包。每个物品的重量w与价值v各不相同，可以选定任意物品装入背包，但背包中物品重量总和不可超过背包的最大载重。求背包最多可以装入多少价值的物品。</p>
</blockquote>
<p>而解决思路可以概括为：</p>
<blockquote>
<p>maxV(i, w)视作前i个物品在限重w时的最大价值。此时，如果没有将第i个物品加入背包，则其值等于maxV(i - 1, w)；如果将第i个物品加入了背包，其值则等于maxV(i - 1, w - ws[i]) + vs[i]。因此，只要选择两种情况下值比较大的作为maxV(i,w)的值就可以确保这个值是最优解。</p>
<p>同时要注意，如果当前物品价值超过了背包最大载重，则只有不加入背包一个选择。</p>
</blockquote>
<p>现在来逐步解析这个程序：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">knapsack01</span> :: [<span class="type">Double</span>]   <span class="comment">--物品价值</span></span><br><span class="line">           -&gt; [<span class="type">Integer</span>]  <span class="comment">--物品重量</span></span><br><span class="line">           -&gt; <span class="type">Integer</span>    <span class="comment">--背包载量</span></span><br><span class="line">           -&gt; <span class="type">Double</span>     <span class="comment">--最大价值</span></span><br><span class="line"><span class="comment">-- 我们知道了m是一个Array类型，!运算可以取其对应索引的值</span></span><br><span class="line"><span class="comment">-- m (i, w)这个形式即是之前所说的maxV(i,w)，求前n个物品的在限重w下的最大价值</span></span><br><span class="line"><span class="comment">-- 这里numItems - 1是因为数组下标从0开始，第一个物品对应的i值为0</span></span><br><span class="line"><span class="title">knaspsack01</span> vs ws maxW = m!(numItems - <span class="number">1</span>, maxW)</span><br><span class="line">    <span class="keyword">where</span> numItems = length vs</span><br><span class="line">          <span class="comment">-- 这里构建一个二维数组作状态表</span></span><br><span class="line">          <span class="comment">-- 索引范围是(-1, 0)到(numItems - 1, maxW)</span></span><br><span class="line">          m = array ((-<span class="number">1</span>, <span class="number">0</span>), (numItems - <span class="number">1</span>, maxW)) $</span><br><span class="line">                <span class="comment">-- 对边界条件初始化，所有0个物品与载重为0是情况取值都为0</span></span><br><span class="line">                [((-<span class="number">1</span>, w), <span class="number">0</span>) | w &lt;- [<span class="number">0</span> .. maxW]] ++</span><br><span class="line">                [((i, <span class="number">0</span>), <span class="number">0</span>) | i &lt;- [<span class="number">0</span> .. numItems - <span class="number">1</span>]] ++</span><br><span class="line">                <span class="comment">-- 定义一般情况的映射关系</span></span><br><span class="line">                [((i, w), best)</span><br><span class="line">                    | i &lt;- [<span class="number">0</span> .. numItems - <span class="number">1</span>]</span><br><span class="line">                    , w &lt;- [<span class="number">1</span> .. maxW]</span><br><span class="line">                    <span class="comment">-- 这里就是上面说的对两种情况的比较</span></span><br><span class="line">                    , <span class="keyword">let</span> best</span><br><span class="line">                           | ws!!i &gt; w = m!(i - <span class="number">1</span>, w)</span><br><span class="line">                           | otherwise = max (m!(i - <span class="number">1</span>, w))</span><br><span class="line">                                          (m!(i - <span class="number">1</span>, w - ws!!i) + vs!!i)</span><br><span class="line">                ]</span><br></pre></td></tr></table></figure>
<p>这样看除了语法默生一点外似乎并没有什么太特别的地方，为了对比，给出这个问题的C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">kanpsack01</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">double</span>&gt; &amp;vs, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;ws</span></span></span><br><span class="line"><span class="params"><span class="function">                , <span class="type">int</span> maxW)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> numItems = vs.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 留出物品数与载重为0的情况所需空间</span></span><br><span class="line">    <span class="keyword">auto</span> m = <span class="built_in">vector</span>(numItems + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(maxW + <span class="number">1</span>， <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= numItems; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; w &lt;= maxW; ++w) &#123;</span><br><span class="line">            <span class="keyword">auto</span> unadd = m[i - <span class="number">1</span>][w];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由于物品数量从1开始，物品属性下标从0开始，当前物品索引应为i-1</span></span><br><span class="line">            <span class="keyword">auto</span> index = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ws[index] &gt; w) &#123;</span><br><span class="line">                m[i][w] = unadd;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> added = m[i - <span class="number">1</span>][w - ws[index]] + vs[index];</span><br><span class="line">            m[i][w] = (added &gt; unadd) ? added : unadd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m[numItems][maxW];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>亲自动手写出这两个程序，就会发现C++程序要格外地考虑状态表的求值顺序。另一方面，C++程序在运行时要浪费许多计算资源在可能根本没用到的状态上（然而还是比较快）。而Haskell在这些方面的心智负担要小得多。</p>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>基于C++的Java入门笔记</title>
    <url>/blog/2021/09/19/0027-Java:Getting_started_base_on_C++/</url>
    <content><![CDATA[<blockquote>
<p>前言：Java的语法和C++实在是很相似，这一方面方便了C++选手们上手Java，另一方面也使得我们在使用Java的时候总是串语法。不得不写篇文章总结一下Java的语法差异。</p>
</blockquote>
<span id="more"></span>
<h2 id="基本概念">基本概念</h2>
<p>Java分为三个版本：SE（Standard Edition）、EE（Enterprise Edition）和ME（Micro Edition）。</p>
<p>Java有三个重要工具：JRE（Java Runtime Environment）、JDK（Java Development Toolkit）和JVM（Java Virtual Machine）。其中JDK是开发中使用到的工具集；JRE是运行Java程序所必需的环境，它包括了JVM和一些类库等文件。</p>
<p>Java程序后缀为<code>.java</code>通过将其编译为后缀<code>.class</code>的字节码文件，交由JVM运行。</p>
<h2 id="语言特性">语言特性</h2>
<p>Java是一个静态弱类型语言。即一个变量声明后就不可以改变类型，并且语言支持隐式类型转换。Java虽然是弱类型，但没有完全弱，它仅支持小类型向大类型的隐式类型转换，换言之，不存在精度丢失的问题。</p>
<p>同时Java中并不存在指针类型，对于大类型的处理策略是<strong>默认为引用</strong>，同时语言带有GC系统。这大大减少了程序员的心智负担，但同时也带来了深浅拷贝这样的需要留意的问题。</p>
<p>同C++相比，Java牺牲了不少运行效率。因此具体场所使用Java还是C++还需自行斟酌。不过这个时代需要极高性能的场所正在渐渐减少，且语言性能带来的提升很多时候比不上一个更优秀的算法带来的提升。</p>
<p>总体而言，Java是一门非常实用的语言，能带来更高的开发效率和更少的折磨。</p>
<h2 id="程序结构">程序结构</h2>
<p>Java中的任何函数或变量都必须定义在类里，不允许出现类外的全局变量。</p>
<p>Java程序以一个函数签名为<code>public static void main(String args[]）&#123;&#125;</code>的函数为入口。这个函数同样要定义在一个类里。</p>
<h3 id="编译单元">编译单元</h3>
<p>一个<code>.java</code>文件就是一个编译单元，每个编译单元中只能有一个<code>public</code>类。这个<code>public</code>类的名字必须与<code>.java</code>文件的名字相同。编译单元中的其它类由于不能声明为<code>public</code>，只能在编译单元内访问与使用。</p>
<h3 id="包package">包(Package)</h3>
<p>Java并不存在头文件源文件之分，所有类都定义在<code>.java</code>文件中。这样的结构会引发一个经典问题——命名冲突，于是Java引入了<code>包(Package)</code>的概念，同时引入了<code>import</code>关键字用以指定一个包中的类的简称。</p>
<p>系统中会为每个包建立文件夹，以避免文件重名。</p>
<p>这其实和C++的<code>namespace</code>与<code>using</code>比较相似。不过存在一些区别：</p>
<ol type="1">
<li>包可以嵌套，但是每个包的命名空间是独立的。也就是说不存在C++中可以访问上层命名空间中的名字的情况。</li>
<li><code>import</code>只取<code>using</code>的声明这一层含义，并不能给类型起别名。</li>
</ol>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译单元开头声明，表示该编译单元属于此包</span></span><br><span class="line"><span class="keyword">package</span> name1[.name2.name3 ... .namen];</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> name1[.name2.name3 ... .classname]; <span class="comment">// 使用classname代替其全称。</span></span><br><span class="line"><span class="keyword">import</span> name1[.name2.name3 ... .*] <span class="comment">//对包内所有public类，使用类名代替全称。</span></span><br></pre></td></tr></table></figure>
<p>同时，由于包之间是独立的，默认包中的类将不能被其它包中的类访问。</p>
<h2 id="基础语法差异">基础语法差异</h2>
<h3 id="类型">类型</h3>
<p><code>char</code>是一个16位的Unicode字符，表示一字节长的类型叫<code>byte</code>。</p>
<p><code>boolean</code>类型并非数值类型，其值为<code>true</code>或<code>false</code>，不可以进行算数运算。</p>
<p>自动类型转换仅出现在不损失精度的运算中，大类型转小类型要使用强制类型转换，语法与C类似。</p>
<h3 id="运算符">运算符</h3>
<p><code>&lt;&lt;</code>: 丢弃最高位，0补最低位。</p>
<p><code>&gt;&gt;</code>: 符号位不变，高补符号位。</p>
<p><code>&gt;&gt;&gt;</code>：忽略符号位，0补最高位。</p>
<p><code>instanceof</code>：二元中缀运算符，检测左边对象是否为右边指定类型。</p>
<h3 id="修饰符">修饰符</h3>
<p><code>default</code>：什么也不写，同一包内可见。</p>
<p><code>public</code>：所有包可见。</p>
<p><code>private</code>：同一类可见。不能修饰外部类。</p>
<p><code>protected</code>：同一包内所有子类skmb。不能修饰外部类。</p>
<p><code>static</code>：用以声明独立于类的变量与函数。不可以修饰局部变量。</p>
<p><code>final</code>：变量不能变、函数不能重写、类不能继承。</p>
<p><code>abstract</code>：声明抽象方法与抽象类，与<code>final</code>冲突，有抽象方法的类一定是抽象类。</p>
<p><code>synchronized</code>：同一时间仅能被一个线程访问。</p>
<p><code>transient</code>：使变量跳过序列化。</p>
<p><code>volatile</code>：用来修饰需线程同步的变量。</p>
<h3 id="表达式和语句">表达式和语句</h3>
<p>不产生任何副作用的表达式不是语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i;  <span class="comment">// 非法，表达式没有任何副作用。</span></span><br><span class="line">i++; <span class="comment">// 合法，改变了i的值。</span></span><br></pre></td></tr></table></figure>
<h3 id="函数方法">函数/方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;修饰符&gt; 返回值类型 方法名(参数) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类">类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;修饰符&gt; 类名 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 花括号后没有分号</span></span><br></pre></td></tr></table></figure>
<p>构造函数名称与类名相同。</p>
<p>析构函数统一为<code>protected void finalize() &#123;...&#125;</code>。</p>
<p><code>this</code>是自身的引用。<code>super</code>是直接基类的引用。</p>
<h2 id="面向对象">面向对象</h2>
<p>Java作为一门面向对象语言，引入了一些特性来提供更好的面向对象支持。除了基本类型的对象外，对象一律使用<code>new</code>来声明。因为有GC机制，并不需要使用<code>delete</code>来手动释放对象。</p>
<p>Java中没有提供指针，为了解决类的拷贝开销过大问题，默认使用引用的方式来使用类。换言之，用<code>new</code>声明的对象都可以看作限制版的指针。传参的时候就要注意实际上传的是值还是引用。</p>
<p>这时就出现了一个问题，要使用引用类型的副本可以手动拷贝一份，可是要使用值类型的引用时怎么办呢？比如一个简单的交换：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用C++可以使用引用与指针两种方式实现。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而Java里既不能使用引用也不能使用指针，就比较棘手。只能曲线救国，将基本类型封装到引用类型里，比如一个类或者数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> fst_, <span class="type">int</span> snd_)</span> &#123;</span><br><span class="line">        fst = fst_;</span><br><span class="line">        snd = snd_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fst;</span><br><span class="line">    <span class="type">int</span> snd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时可以使用Pair传递两个值并交换了。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Pair p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> p.fst;</span><br><span class="line">    p.fst = p.snd;</span><br><span class="line">    p.snd = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 但这样写并不如直接在Pair类里写成员函数自然。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> fst;</span><br><span class="line">        fst = snd;</span><br><span class="line">        snd = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样看来传基本类型的引用基本上是一个伪需求。</p>
<h3 id="数组">数组</h3>
<p>数组使用<code>type[] var = new type[size]</code>来声明。等号左边也可以写成C风格的<code>type var[]</code>，但不推荐。也可以使用<code>type[] var = &#123;...&#125;</code>的方式来更方便的使用。</p>
<p>数组提供<code>length</code>成员保存大小。</p>
<p>数组的一些常用操作以<code>static</code>方法的方式提供在<code>java.util.Arrays</code>类中。</p>
<h3 id="继承">继承</h3>
<p>Java不支持多继承，即一个类只能有一个父类。子类继承父类的非<code>private</code>方法。子类使用<code>extend</code>关键字继承父类。</p>
<p>Java中所有类都是<code>java.lang.Object</code>类的子类。</p>
<h3 id="重写与重载">重写与重载</h3>
<p>子类可以重写父类的函数，可以理解为所有函数都是虚函数，而<code>abstract</code>函数相当于纯虚函数。</p>
<h3 id="抽象类与接口">抽象类与接口</h3>
<p>含有任何<code>abstract</code>函数的类或被显式声明为<code>abstract</code>的类为抽象类，抽象类不能被实例化的类。</p>
<p>接口使用<code>interface</code>声明，是一个抽象方法的集合。接口可以使用<code>extends</code>来继承其它接口，允许多继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[可见度] interface [名称] [extends 其它接口名] &#123;</span><br><span class="line">    <span class="comment">// 抽象方法，隐式指定为public abstract，同时也只能是这种类型。</span></span><br><span class="line">    <span class="comment">// 变量，隐式指定为public static final，同时只能是这种类型。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类可以通过<code>implements</code>关键字实现接口。抽象类可以不实现接口中的方法，但普通类必需全部实现。</p>
<h2 id="异常处理">异常处理</h2>
<p>使用<code>try-catch-finally</code>语句块来处理异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 变量名) &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 变量名) &#123;</span><br><span class="line">&#125; <span class="keyword">final</span> &#123; </span><br><span class="line">&#125; <span class="comment">// catch数量大于等于1个，final是可选的，处理未被catch的类型异常。</span></span><br></pre></td></tr></table></figure>
<p>程序中使用<code>throw</code>抛出异常，一个可能抛出异常的函数要使用<code>throws</code>声明可能抛出的异常的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="泛型">泛型</h2>
<h3 id="声明">声明</h3>
<p>泛型这个概念是C++的模板带来的，因此声明语法上也大差不差。但有两点不同：</p>
<ol type="1">
<li>参数只能是类型，不能是值。</li>
<li>参数必需是引用类型， 不能是基础类型。</li>
</ol>
<p><strong>泛型类/接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">name</span> &lt;T1, T2,...,Tn&gt; &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">name</span> &lt;T1, T2,...,Tn&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p><strong>泛型函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">func</span><span class="params">(T obj)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类型擦除">类型擦除</h3>
<p>Java的泛型是使用类型擦除的方式实现的，运行时丢失所有类型信息。因此不能使用与类型有关的操作，如：转型、<code>instanceof</code>和<code>new</code>。这也意味着，泛型类无法向上转型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer ---&gt; Object</span><br><span class="line">ArrayList&lt;Integer&gt; ---&gt; List&lt;Interger&gt;</span><br><span class="line">List&lt;Integer&gt; -x--&gt; List&lt;Object&gt;</span><br></pre></td></tr></table></figure>
<p><code>Integer</code>继承了<code>Object</code>，可以转为<code>Object</code>。<code>ArrayList</code>继承了<code>List</code>，可以转为<code>List</code>。但<code>List&lt;Integer&gt;</code>不能转为<code>List&lt;object&gt;</code>。</p>
<p>因为泛型类并不存在独有的Class对象，即不存在<code>List&lt;Object&gt;.class</code>或<code>List&lt;Integer&gt;.class</code>，编译器会将两者都视为<code>List.class</code>。</p>
<h3 id="类型边界">类型边界</h3>
<p>可以使用<code>extends</code>限制类型必需是某个类的子类或实现了哪些接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T <span class="keyword">extends</span> <span class="title class_">A</span> &amp; B &amp; C&gt; <span class="comment">// 可以有多个限制，使用&amp;隔开。只有第一个限制可以是类，其它的必需是接口。</span></span><br></pre></td></tr></table></figure>
<h3 id="类型通配符">类型通配符</h3>
<p>使用泛型类实例时可以通过通配符匹配类型，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt;; <span class="comment">// 可以是任何类型</span></span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">A</span> &amp; B &amp; C&gt;; <span class="comment">// 匹配A &amp; B &amp; C的子类或实现</span></span><br><span class="line">List&lt;? <span class="built_in">super</span> S&gt; <span class="comment">// 匹配S的父类</span></span><br></pre></td></tr></table></figure>
<p>可以使用通配符实现向上转型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; intList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Number&gt;  numList1 = intList1; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Integer</span>&gt; intList2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;  numList2 = intList2; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树概念解析与C++实现</title>
    <url>/blog/2021/09/23/0028-RB_Tree_C++/</url>
    <content><![CDATA[<blockquote>
<p>整理了红黑树的性质与基本操作的C++实现</p>
</blockquote>
<span id="more"></span>
<h2 id="基本概念">基本概念</h2>
<p>红黑树（Red Black Tree，简称R-B Tree）是一种特殊的二叉查找树。它的特殊性体现在：</p>
<ol type="1">
<li>每个节点都有颜色，可以是红色或黑色。</li>
<li>根节点是黑色。</li>
<li>每个叶子节点（NULL）是黑色。尤其注意这里的结子节点指的是NULL。</li>
<li>红色节点的子节点必为黑色。</li>
<li>任一结点到其所有后代叶节点的路径中具有相同数目的黑色节点。</li>
</ol>
<p><em>特性5保证了任一路径不会超过最短路径的两倍，因而红黑树是接近平衡的二叉树。</em></p>
<h2 id="存储结构">存储结构</h2>
<p>一个红黑树节点可以使用三叉链表的形式实现为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">R_BNode</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">COLOR</span> &#123;BLACK = <span class="number">0</span>, RED = <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">R_BNode</span><span class="params">(<span class="type">int</span> data = <span class="number">0</span>, R_BNode::COLOR color = RED)</span> </span></span><br><span class="line"><span class="function">        : left_(Nil), right_(Nil), parent_(Nil)</span></span><br><span class="line"><span class="function">        , color_(color), data_(data)  &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    R_BNode *left_;</span><br><span class="line">    R_BNode *right_;</span><br><span class="line">    R_BNode *parent_;</span><br><span class="line">    COLOR color_;</span><br><span class="line">    <span class="type">int</span> data_;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> R_BNode *Nil;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">R_BNode *R_BNode::Nil = <span class="keyword">new</span> <span class="built_in">R_BNode</span>(<span class="number">0</span>, R_BNode::BLACK);</span><br></pre></td></tr></table></figure>
<p>这里为简化问题将data定为int类型，这并不会影响对红黑树的研究。如有需要可以使用类模板或<code>void*</code>等方式来实现泛型的红黑树。</p>
<p>定义红黑树类型为指向红黑树节点的指针。并创建一个静态变量<code>Nil</code>作为所有叶子节点的指代，这样做就可以把本不存在的叶子节点视为普通节点来处理了。</p>
<p>红黑树可以实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">R_BTree</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">R_BTree</span><span class="params">()</span> : root_(R_BNODE::Nil) &#123;</span>&#125;</span><br><span class="line">	</span><br><span class="line">    R_BNode *root_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="基本操作旋转">基本操作：旋转</h2>
<h3 id="概念">概念</h3>
<p>当修改红黑树上的节点时，可能会破坏树的性质，使得树不再是红黑树。此时需要调整一些节点的颜色与指针结构，使树重新成为红黑树。</p>
<p>其中对指针结构的调整就需要借助旋转操作，这是一种能保持二叉搜索树性质的局部操作。旋转分为左旋与右旋，下面以左旋为例介绍旋转操作：</p>
<p>任一右孩子不为Nil的结点x都可进行左旋操作，设其右孩子是y，则左旋后：</p>
<ol type="1">
<li>y成为子树新的根节点。</li>
<li>x在新子树中成为y的左孩子。</li>
<li>上述变化后，x的右孩子变成双亲了，空出一个位置，而y原来的左孩子无家可归，由此让y原来的左孩子成为x新的右孩子。</li>
</ol>
<p>而右旋是左旋的镜像操作。两种旋转如下图所示：</p>
<figure>
<img src="https://img.xilong.site/20210923/rotate.png" alt="" /><figcaption>rotate</figcaption>
</figure>
<h3 id="实现">实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅给出实现，声明可以自行添加到对应的类中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::LeftRotate</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right_ == R_BNode::Nil) <span class="keyword">throw</span> <span class="string">&quot;Error while left rotate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> y = x-&gt;right_;</span><br><span class="line">    x-&gt;right_ = y-&gt;left_;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left_ != R_BNode::Nil) &#123;</span><br><span class="line">        y-&gt;left_-&gt;parent_ = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    y-&gt;parent_ = x-&gt;parent_;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent_ == R_BNode::Nil) &#123;</span><br><span class="line">        root_ = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">        x-&gt;parent_-&gt;left_ = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x-&gt;parent_-&gt;right_ = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    y-&gt;left_ = x;</span><br><span class="line">    x-&gt;parent_ = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::RightRotate</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;left_ == R_BNode::Nil) <span class="keyword">throw</span> <span class="string">&quot;Error while right rotate&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> y = x-&gt;left_;</span><br><span class="line">    x-&gt;left_ = y-&gt;right_;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;right_ != R_BNode::Nil) &#123;</span><br><span class="line">        y-&gt;right_-&gt;parent_ = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    y-&gt;parent_ = x-&gt;parent_;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent_ == R_BNode::Nil) &#123;</span><br><span class="line">        root_ = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">        x-&gt;parent_-&gt;left_ = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x-&gt;parent_-&gt;right_ = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    y-&gt;right_ = x;</span><br><span class="line">    x-&gt;parent_ = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基本操作插入">基本操作：插入</h2>
<p>红黑树是一种特殊的二叉查找树，因此插入节点时先按照二叉查找树的方法进行插入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::Insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> y = R_BNode::Nil;</span><br><span class="line">    <span class="keyword">auto</span> x = root_;</span><br><span class="line">    <span class="keyword">auto</span> z = <span class="keyword">new</span> <span class="built_in">R_BNode</span>(value, R_BNode::RED);</span><br><span class="line">    <span class="keyword">while</span> (x != R_BNode::Nil) &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; x-&gt;data_) &#123;</span><br><span class="line">            x = x-&gt;left_;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = x-&gt;right_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    z-&gt;parent_ = y;</span><br><span class="line">    <span class="keyword">if</span> (y = R_BNode::Nil) &#123;</span><br><span class="line">        root_ = z;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;data_ &lt; y-&gt;data_) &#123;</span><br><span class="line">        y-&gt;left_ = z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;right_ = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">InsertFixup</span>(z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来我们可能破坏了树的结构，因此，我们寄希望于最后调用的<code>InsertFixup</code>函数。</p>
<p>如何实现<code>InsertFixup</code>函数呢？这就得慢慢分析：</p>
<blockquote>
<p>规则1：节点有颜色，且是红色或黑色。</p>
<p>规则3：叶子节点是黑色节点。</p>
</blockquote>
<p>这两条显然是不会违反的。</p>
<blockquote>
<p>规则5：任一结点到其所有后代叶节点的路径中具有相同数目的黑色节点。</p>
</blockquote>
<p>这就是我们插入的节点总是红色的原因，插入红色的结点并不影响树中原有路径中的黑色节点数目。因此不会违反规则5。</p>
<blockquote>
<p>规则2：根节点是黑色节点。</p>
</blockquote>
<p>当我们插入的节点作为根节点时，就违反了规则2。此时只要改变节点的颜色就可以修复红黑树。此时可以实现出：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::InsertFixup</span><span class="params">(R_BNode *z)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    root_-&gt;color = R_BNode::BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>规则4：红色节点的孩子一定是黑色节点。</p>
</blockquote>
<p>当插入节点的父节点是红色时，违反规则4。总共存在三种可能的情况：</p>
<h3 id="情况一叔节点是红色">情况一：叔节点是红色</h3>
<p>此时将叔节点与父节点都设为黑色，并把祖父节点设为红色。然后对祖父节点使用<code>InsertFixup</code>函数即可。因为对祖父节点的任何子孙节点，都必然途径祖父节点，以及父节点、叔节点中的一个。将父节点与叔节点都设成黑色等于所有路径的黑色节点数加一，而将祖父节点设为红色等于所有路径的黑色节点数减一。因此不会违反规则5。同时这样将规则4的违反提升到了更高的层次去处理，这样至多处理log(h)（h为树高）次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::InsertFixup</span><span class="params">(R_BNode *z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (z-&gt;parent-&gt;color == R_BNode::RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (z-&gt;parent_ = z-&gt;parent_-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">            <span class="keyword">auto</span> y = z-&gt;parent_-&gt;parent_-&gt;right_;</span><br><span class="line">            <span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color_ = R_BNode::RED) &#123;</span><br><span class="line">                z-&gt;parent_-&gt;color_ == R_BNode::BLACK;</span><br><span class="line">                y-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">                z = z-&gt;parent_-&gt;parent_;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> y = z-&gt;parent_-&gt;parent_-&gt;left_;</span><br><span class="line">            <span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color_ = R_BNode::RED) &#123;</span><br><span class="line">                z-&gt;parent_-&gt;color_ == R_BNode::BLACK;</span><br><span class="line">                y-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">                z = z-&gt;parent_-&gt;parent_;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root_-&gt;color = R_BNode::BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="情况二叔节点是黑色且z与父节点异侧">情况二：叔节点是黑色，且z与父节点异侧</h3>
<p>所谓同侧，就是说z相对于父节点的方向和父节点相对于祖父节点的方向相同。如都是左孩子或都是右孩子。异侧则反之。</p>
<p>此时可以通过对父节点的一次旋转将情况二转化为情况三。</p>
<h3 id="情况三叔节点是黑色且z与父节点同侧">情况三：叔节点是黑色，且z与父节点同侧</h3>
<p>此时对祖父节点进行一次与情况二反向的旋转即可修复红黑树。</p>
<p>以一个不同侧且父节点为左孩子的情况为例：</p>
<figure>
<img src="https://img.xilong.site/20210923/insert.png" alt="" /><figcaption>insert</figcaption>
</figure>
<p>如上图，对c而言，叔节点是Nil，为黑色。且c是b的右孩子，而b是a的左孩子，因此c与父节点不同侧，即为情况2。</p>
<p>此时要想使bc同侧，只需对b进行左旋，并将b当做插入节点重新考虑。显然一次左旋过后，b的叔节点为Nil，为黑色。且与父节点c同侧。即为情况3。</p>
<p>此时只需交换父节点与祖父节点的颜色，并对祖父节点进行右旋，即可完成对红黑树的修复。</p>
<p><strong>注意：上述旋转方向是父节点为左孩子时的情况，对于父节点为右孩子的情况，需要进行镜像操作，即左右互换。</strong></p>
<p>最终实现为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::InsertFixup</span><span class="params">(R_BNode *z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (z-&gt;parent_-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (z-&gt;parent_ == z-&gt;parent_-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">            <span class="keyword">auto</span> y = z-&gt;parent_-&gt;parent_-&gt;right_;</span><br><span class="line">            <span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">                z-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                y-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">                z = z-&gt;parent_-&gt;parent_;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z == z-&gt;parent_-&gt;right_) &#123;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                z = z-&gt;parent_;</span><br><span class="line">                <span class="built_in">LeftRotate</span>(z);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// case 3</span></span><br><span class="line">            z-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">            z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">            <span class="built_in">RightRotate</span>(z-&gt;parent_-&gt;parent_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> y = z-&gt;parent_-&gt;parent_-&gt;left_;</span><br><span class="line">            <span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">                z-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                y-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">                z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">                z = z-&gt;parent_-&gt;parent_;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z == z-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                z = z-&gt;parent_;</span><br><span class="line">                <span class="built_in">RightRotate</span>(z);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// case 3</span></span><br><span class="line">            z-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">            z-&gt;parent_-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">            <span class="built_in">LeftRotate</span>(z-&gt;parent_-&gt;parent_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基本操作删除">基本操作：删除</h2>
<p>要删除一个节点，首先要定义一个辅助操作，用以使用一个节点去替换另一个节点的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用v去替换u</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::Transplant</span><span class="params">(R_BNode *u, R_BNode *v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;parent_ == R_BNode::Nil) &#123;</span><br><span class="line">        root_ = v;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u == u-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">        u-&gt;parent_-&gt;left_ = v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        u-&gt;parent_-&gt;right_ = v;</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;parent_ = u-&gt;parent_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除一个节点的操作与二叉搜索树相似，当目标节点只有两个以下孩子时，使用它的孩子替换它自身。当目标节点存在两个孩子时则比较麻烦，需要找出目标节点的后继，并使用这个后继替换自身。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::Delete</span><span class="params">(R_BNode *z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> y = z;</span><br><span class="line">    <span class="keyword">auto</span> y_origin_color = z-&gt;color_;</span><br><span class="line">    R_BNode *x = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (z-&gt;left_ == R_BNode::Nil) &#123;</span><br><span class="line">        x = z-&gt;right_;</span><br><span class="line">        <span class="built_in">Transplant</span>(z, z-&gt;right_);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;right_ == R_BNode::Nil) &#123;</span><br><span class="line">        x = z-&gt;left_;</span><br><span class="line">        <span class="built_in">Transplant</span>(z, z-&gt;left_);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = z-&gt;right_;</span><br><span class="line">        <span class="keyword">while</span> (y-&gt;left_ != R_BNode::Nil) &#123;</span><br><span class="line">            y = y-&gt;left_;</span><br><span class="line">        &#125;</span><br><span class="line">        y_origin_color = y-&gt;color_;</span><br><span class="line">        x = y-&gt;right_;</span><br><span class="line">        <span class="keyword">if</span> (y-&gt;parent_ != z) &#123;</span><br><span class="line">            <span class="built_in">Transplant</span>(y, y-&gt;right_);</span><br><span class="line">            y-&gt;right_ = z-&gt;right_;</span><br><span class="line">            y-&gt;right_-&gt;parent_ = y;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">Transplant</span>(z, y);</span><br><span class="line">        y-&gt;left_ = z-&gt;left_;</span><br><span class="line">        y-&gt;left_-&gt;parent_ = y;</span><br><span class="line">        y-&gt;color_ = z-&gt;color_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y_origin_color == R_BNode::BLACK) &#123;</span><br><span class="line">        <span class="built_in">DeleteFixup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序中，y用来标记删除或移动的节点。x用来标记y在移动或删除之前的位置。如果y是红色节点，那么移动或删除y并不会破坏红黑树的性质。因为：</p>
<ol type="1">
<li>树的黑高（只计算黑色节点时的高度）没有改变。</li>
<li>y移动到z的位置并继承了z的颜色，而z的位置与颜色在删除操作前是合法的，因此y不会改变该位置合法性。</li>
<li>如果y为红色，则y不是根结点，因此根结点仍为黑色。</li>
</ol>
<p>现在考虑对破坏的修复，如果y黑色，将导致3个问题：</p>
<ol type="1">
<li>如果y是原来的节结点，而继承它位置的节点是红色，则违反了性质2。</li>
<li>如果x和x.p是红色的，则违反了性质4。</li>
<li>移动y导致先前树中所有包含y的简单路径中黑色节点的数目减一，导致了所有y的祖先节点都不符合性质5。</li>
</ol>
<p>解决办法是将占有了y原来位置的节点x视为还有一层额外的黑色，这使得性质5成立，但因为现在的x要么是红黑色（颜色属性为红）要么是双重黑色（颜色属性为黑），又违反了性质1。注意这里所说的额外黑色是针对x节点的，并不反应在节点的颜色属性上。</p>
<p>对于x，如果：</p>
<ol type="1">
<li>x是红黑色，则可以将x着为黑色。</li>
<li>x是根结点，则可以简单的消去一层黑色，什么也不做。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::DeleteFixup</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == root_ || x-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">        x-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时要修复红黑树，需要分成4种情况：</p>
<h3 id="情况1x的兄弟节点m为红色">情况1：x的兄弟节点m为红色</h3>
<p>此时由于m的两个子节点都为黑色，可以改变m和父节点的颜色，然后对父节点进行一次旋转。并令x的新兄弟节点为新的m，这样情况就转移到了2、3或4。</p>
<figure>
<img src="https://img.xilong.site/20210923/delete1.png" alt="" /><figcaption>delete1</figcaption>
</figure>
<p>此时可以实现为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::DeleteFixup</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == root_ || x-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">        x-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">        <span class="keyword">auto</span> m = x-&gt;parent_-&gt;right_;</span><br><span class="line">        <span class="comment">// case 1</span></span><br><span class="line">        <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">            m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">            x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">            <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">            m = x-parent_-&gt;right_;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> m = x-&gt;parent_-&gt;left_;</span><br><span class="line">        <span class="comment">// case 1</span></span><br><span class="line">        <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">            m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">            x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">            <span class="built_in">RightRotate</span>(x-&gt;parent_);</span><br><span class="line">            m = x-parent_-&gt;left_;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="情况2x的兄弟节点m为黑色且m的两个子节点都为黑色">情况2：x的兄弟节点m为黑色，且m的两个子节点都为黑色</h3>
<p>此时由于x是双重黑色，而m与其两个子节点构成了两层黑色，因此可以从x与m上分别消去一层黑色，使得x为黑色，而m为红色。并令x-&gt;parent_为新的x，并对其进行<code>DeleteFixup</code>。</p>
<figure>
<img src="https://img.xilong.site/20210923/delete2.png" alt="" /><figcaption>delete2</figcaption>
</figure>
<p>此时由于重复调用，改变之前的程序结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::DeleteFixup</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != root_ &amp;&amp; x-&gt;color_ != R_BNode::RED) &#123;</span><br><span class="line">       <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-parent_-&gt;right_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">RightRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-parent_-&gt;left_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     x-&gt;color_ = R_BNode::Black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="情况3x的兄弟节点m为黑色且m的异侧孩子为红色同侧孩子为黑色">情况3：x的兄弟节点m为黑色，且m的异侧孩子为红色，同侧孩子为黑色</h3>
<p>此时交换m与异侧孩子的颜色，并进行旋转。使m的异侧孩子成为x新的兄弟节点，m成为新m的同侧孩子。这样就转化成了情况4。</p>
<figure>
<img src="https://img.xilong.site/20210923/delete3.png" alt="" /><figcaption>delete3</figcaption>
</figure>
<p>实现为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::DeleteFixup</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != root_ &amp;&amp; x-&gt;color_ != R_BNode::RED) &#123;</span><br><span class="line">       <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-parent_-&gt;right_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::RED</span><br><span class="line">                     &amp;&amp; m-&gt;right_color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               <span class="comment">// case 3</span></span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               m-&gt;left_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               <span class="built_in">RightRotate</span>(m);</span><br><span class="line">               m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">RightRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-parent_-&gt;left_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m-&gt;right_-&gt;color_ == R_BNode::RED</span><br><span class="line">                     &amp;&amp; m-&gt;left_color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               <span class="comment">// case 3</span></span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               m-&gt;right_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               <span class="built_in">LeftRotate</span>(m);</span><br><span class="line">               m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           &#125;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     x-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="情况4x的兄弟节点为黑色且m的同侧孩子为红色">情况4：x的兄弟节点为黑色，且m的同侧孩子为红色。</h3>
<p>使m为父节点的颜色，并将父节点与m的同侧孩子设为黑色。对父节点进行旋转，使m成为新的取代父节点的位置，并设x为根节点。即可修复红黑树。</p>
<figure>
<img src="https://img.xilong.site/20210923/delete4.png" alt="" /><figcaption>delete4</figcaption>
</figure>
<p>此时得出了最终实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_BTree::DeleteFixup</span><span class="params">(R_BNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != root_ &amp;&amp; x-&gt;color_ != R_BNode::RED) &#123;</span><br><span class="line">       <span class="keyword">if</span> (x == x-&gt;parent_-&gt;left_) &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::RED</span><br><span class="line">                     &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               <span class="comment">// case 3</span></span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               m-&gt;left_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               <span class="built_in">RightRotate</span>(m);</span><br><span class="line">               m = x-&gt;parent_-&gt;right_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 4</span></span><br><span class="line">           m-&gt;color_ = x-&gt;parent_-&gt;color_;</span><br><span class="line">           x-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">           m-&gt;right_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">           <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">           x = root_;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">auto</span> m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           <span class="comment">// case 1</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;color_ == R_BNode::RED) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               x-&gt;parent_-&gt;color_ = R_BNode::RED;</span><br><span class="line">               <span class="built_in">RightRotate</span>(x-&gt;parent_);</span><br><span class="line">               m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 2</span></span><br><span class="line">           <span class="keyword">if</span> (m-&gt;left_-&gt;color_ == R_BNode::BLACK</span><br><span class="line">               &amp;&amp; m-&gt;right_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               x = x-&gt;parent_;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m-&gt;right_-&gt;color_ == R_BNode::RED</span><br><span class="line">                     &amp;&amp; m-&gt;left_-&gt;color_ == R_BNode::BLACK) &#123;</span><br><span class="line">               <span class="comment">// case 3</span></span><br><span class="line">               m-&gt;color_ = R_BNode::RED;</span><br><span class="line">               m-&gt;right_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">               <span class="built_in">LeftRotate</span>(m);</span><br><span class="line">               m = x-&gt;parent_-&gt;left_;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// case 4</span></span><br><span class="line">           m-&gt;color_ = x-&gt;parent_-&gt;color_;</span><br><span class="line">           x-&gt;parent_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">           m-&gt;left_-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">           <span class="built_in">LeftRotate</span>(x-&gt;parent_);</span><br><span class="line">           x = root_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     x-&gt;color_ = R_BNode::BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>红黑树是一种特殊的二叉搜索树，因此适用二叉搜索树的所有不改变树结构的操作。而对于改变了红黑树结构的操作则需要牢记，主要分为旋转、插入和删除。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>APUE学习笔记00——UNIX基础</title>
    <url>/blog/2021/10/27/0029-APUE_chapter1/</url>
    <content><![CDATA[<blockquote>
<p>APUE这本书实在是干而松散，不自己消化消化确实看不下去。这篇文章简单总结一下前两章，Unix基础与标准。</p>
</blockquote>
<span id="more"></span>
<h2 id="基础介绍">基础介绍</h2>
<p>操作系统在狭义上单指一种控制硬件单元，为程序提供运行环境的软件，称为内核（Kernel）。内核的接口称为系统调用（System call）。</p>
<p>广义上，操作系统包括内核以及一些软件，这些软件包括了公用函数库、shell和系统实用程序（system utility）以及一些应用程序。</p>
<p>其中，公用函数库就是建立在系统调用的基础上的一些函数。应用程序既可以使用系统调用也可以使用公用函数库。shell是一个特殊的应用程序，为运行其它程序提供了一个接口。</p>
<h2 id="登录">登录</h2>
<p>用户键入用户名与口令，系统在口令文件中读取相关信息并进行相应操作。口令文件通常是<code>/etc/passwd</code>，其中每行记录一个登录项。登录项由7个以冒号分隔的字段组成，依次是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:UID:GID:注释:起始目录:shell程序</span><br></pre></td></tr></table></figure>
<p>目前所有系统都将加密口令移到另一个文件中，但这里先略过。</p>
<p>登录后，通常进入到shell程序，shell是一个命令行解释器，它读取用户输入然后执行命令。</p>
<h2 id="文件和目录">文件和目录</h2>
<p><strong>文件系统</strong></p>
<p>UNIX文件系统是目录和文件的一种层次结构，所有东西的起点是根(root)目录，其名称是<code>/</code>。</p>
<p>我们总听说UNIX中一切皆文件，对于目录也是适用的。实际上目录是一个包含目录项的文件，逻辑上可以认为每个目录项都包含一个文件名与文件属性信息。</p>
<p><strong>文件名</strong></p>
<p>目录中的各项拥有一个文件名(filename)。只有斜线<code>/</code>和空字符不能出现在文件名中。因为斜线用来分隔路径名和文件名而空字符表示路径结束。</p>
<p>但习惯上最好还是使用字母、数字、<code>.</code>、<code>-</code>、<code>_</code>作为文件名，这可以避免很多麻烦。</p>
<p>新的目录会创建两个文件名<code>.</code>、<code>..</code>，<code>.</code>指向当前目录，<code>..</code>指向上级目录。在根目录中都指向根目录。</p>
<p><strong>路径名</strong></p>
<p>由<code>/</code>分隔的一个或多个文件名组成的序列构成一个路径名，以<code>/</code>开头的称为绝对路径，以文件名开头称为相对路径。相对路径名指向相对于当前目录的文件。</p>
<p><strong>工作目录</strong></p>
<p>每个进程有一个工作目录，所有相对路径名从工作目录开始解释，进程可以使用<code>chdir</code>来更改工作目录。</p>
<p><strong>起始目录</strong></p>
<p>登录时的工作目录为起始目录，记录在口令文件中。</p>
<h2 id="输入与输出">输入与输出</h2>
<p><strong>文件描述符</strong></p>
<p>文件描述符通常是一个小的非负整数，内核用以标识一个特定的进程正在访问的文件。当内核打开一个现有文件或创建一个新文件时，它都返回一个文件描述符。在读写文件时，可以使用这个文件描述符。</p>
<p><strong>标准输入</strong>、标准输出和标准错误</p>
<p>惯例上，每当运行一个新程序时，所有shell都为其打开3个文件描述符，分别为标准输入、标准输出、标准错误。如果不做特殊处理，它们都链接终端。</p>
<p>大多数shell提供一种方法，使其中任何一个都能重定向至某个文件。</p>
<p><strong>缓冲</strong></p>
<p>不带缓冲的I/O直接向文件中写入，而带缓冲的I/O在缓冲区满后才写入文件。</p>
<h2 id="程序和进程">程序和进程</h2>
<p>程序是存储在磁盘上的可执行文件。内核使用<code>exec</code>函数将程序读入内存，并执行程序。</p>
<p>程序的执行实例被称为进程。UNIX系统确保每个进程都有一个唯一的数字标识符，称为PID，PID总是一个非负整数。</p>
<p>系统主要使用三个函数控制进程：<code>fork</code>、<code>exec</code>、<code>waitpid</code>。</p>
<p>通常一个进程只有一个控制线程——某一时刻执行的一组机器指令。但某些情况下可以拥有多个线程。一个进程内的所有线程共享同一地址空间、文件描述符、栈以及进程相关属性。因为它们能访问同一存储区，所以各线程在访问共享数据时需要采取同步措施以避免不一致性。</p>
<p>线程也用ID标识，称为TID。TID只在进程内起作用，对其它进程没有意义。</p>
<h2 id="出错处理">出错处理</h2>
<p>当UNIX系统函数出错时通常返回一个负值，且整型变量<code>errno</code>通常被设置为具有特定信息的值。文件<code>&lt;errno.h&gt;</code>中定义了<code>errno</code>及可以赋予它的常量。这些常量都以字母<code>E</code>开头。对于<code>errno</code>有两条规则：</p>
<ol type="1">
<li>只有出错时才改变它的值。</li>
<li>任何程序都不会将它的值设为0。</li>
</ol>
<p>两个函数可以用于打印出错消息，分别是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strerror</span><span class="params">(<span class="type">int</span> errnum)</span>; <span class="comment">// errnum通常是errno值，函数将其映射为一个出错消息的字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *msg)</span>; <span class="comment">// 先输出msg，然后接一个冒号，一个空格，errno对应的消息，一个换行符。</span></span><br></pre></td></tr></table></figure>
<h2 id="用户标识">用户标识</h2>
<p><strong>UID</strong></p>
<p>UID是一个数值，向系统标识各个不同的用户。系统管理员在确定一个用户的登录名的同时，确定其UID。用户不能更改其UID。</p>
<p>UID为0的用户为root用户。root用户拥有系统的自由支配权。</p>
<p><strong>GID</strong></p>
<p>GID是一个标识用户所在组的ID，也是由系统管理员在创建用户时分配的。组文件将组名映射为数值的GID，通常是<code>/etc/group</code>。</p>
<p><strong>SGID</strong></p>
<p>SGID是附属组ID，UNIX允许一个用户同时属于多至16个其它的组。这些信息也存在组文件中。</p>
<h2 id="信号">信号</h2>
<p>信号用于通知进程发生了某种情况。进程有3种处理信号的方式：</p>
<ol type="1">
<li>忽略信号。</li>
<li>按系统默认方式处理。</li>
<li>提供一个函数，信号发生时调用该函数，称为捕捉信号。</li>
</ol>
<h2 id="时间值">时间值</h2>
<p><strong>日历时间</strong>：从1970年1月1日00:00:00以来经过的秒数时间值，使用<code>time_t</code>保存。</p>
<p><strong>进程时间</strong>：被称为CPU时间，用以度量进程使用的中央处理器资源。进程时间以时钟tick计算。当一个进程创建时，系统维护3个进程时间值：</p>
<ol type="1">
<li>时钟时间，进程消耗的总时间。</li>
<li>用户CPU时间，进程执行用户指令所用的时间。</li>
<li>系统CPU时间，进程执行内核程序所用的时间。</li>
</ol>
<p>其中用户CPU时间与系统CPU时间之和称为CPU时间。</p>
<h2 id="系统调用与库函数">系统调用与库函数</h2>
<p>系统调用是内核提供的良好定义、数量有限、直接进入内核的入口点。从应用角度考虑，可以将系统调用看做C函数。通用库函数通常调用一个或多个系统调用，其中一个关键区别在于，我们可以在需要的时候替换库函数，但无法替换系统调用。另一方面，系统调用通常提供简单而单一的功能，而库函数则更加复杂。</p>
]]></content>
      <categories>
        <category>APUE学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>UNIX</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配之KMP</title>
    <url>/blog/2021/11/01/0030-string_matching_KMP/</url>
    <content><![CDATA[<blockquote>
<p>字符串匹配算法半壁江山之KMP算法。</p>
</blockquote>
<span id="more"></span>
<h2 id="kmp算法介绍">KMP算法介绍</h2>
<p>KMP算法是一种利用模式串中的信息来尽可能减少与待匹配串的匹配次数从而大副提高效率的算法。它的核心是一个<code>next</code>表，用以记录一次匹配失败后，下次匹配开始的位置。</p>
<h2 id="kmp匹配过程">KMP匹配过程</h2>
<p>如何生成<code>next</code>表是KMP的核心内容，但在此之前，不妨先看看KMP算法是如何工作的。</p>
<p>设模式串为"ABAABAC"，待匹配串为"ABABAABAABAC"。根据模式串生成的<code>next</code>表为：{0, 0, 1, 1, 2, 3, 0}。之后会介绍如何生成<code>next</code>表。这里先解释这个表的意义，<code>next[n] = k</code>意为<strong>在模式串前n位构成的子串中，其最长相等严格前后缀的长度为k。</strong></p>
<p>解释一下黑体字就是说，对于模式串“ABAABAC”而言，其前6位构成的子串是"ABAABA"。所谓的严格前/后缀就是指除了串本身的前/后缀：<code>&#123;前/后缀&#125; - &#123;串本身&#125;</code>。相等严格前后缀是指既是串的严格前缀也是串的严格后缀的子串，对于"ABAABA"而言，其相等严格前后缀有："A"、"ABA"两个。最长相等严格前后缀显然就是"ABA"。</p>
<p>上面这段话就可以表示为<code>next[6] = 3</code>。</p>
<p>从位置0开始匹配，结果如下：</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101183430703.png" alt="" /><figcaption>image-20211101183430703</figcaption>
</figure>
<p>成功匹配的位数是3，查询匹配表项<code>next[3] = 1</code>。也就是已匹配部分的末位与首位相等，因此可以直接将首位移到末位位置开始下一轮匹配：</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101191242087.png" alt="" /><figcaption>image-20211101191242087</figcaption>
</figure>
<p>成功匹配的位数是6，注意匹配并不是从位置2开始的，而是从位置3——上次匹配失败的位置开始，查询匹配表项<code>next[6] = 3</code>。说明已匹配部分前3位与后3位相等，将前3位移到后3位的位置开始下一轮匹配：</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101190744058.png" alt="" /><figcaption>image-20211101190744058</figcaption>
</figure>
<p>匹配成功。</p>
<p>注意到，所谓移动其实就是从模式串的下标<code>next[匹配成功位数]</code>开始，从失败位置继续匹配。</p>
<p>代码表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// str:待匹配串, pattern:模式串, next[pattern.size()]:失配表</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">kmp</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">const</span> string&amp; pattern)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="comment">// j与i匹配失败而j不为0时，说明有j - 1位匹配成功。</span></span><br><span class="line">        <span class="comment">// 尝试使用pattern[next[j - 1]]从失败位置继续匹配，直到</span></span><br><span class="line">        <span class="comment">//    1. j == 0</span></span><br><span class="line">        <span class="comment">//    2. 匹配成功</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern[j] != str[i]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配成功则成功位数+1</span></span><br><span class="line">        <span class="keyword">if</span> (pattern[j] == str[i]) &#123;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若匹配成功位数等于模式串大小，说明模式匹配成功，记录下这个位置。</span></span><br><span class="line">        <span class="keyword">if</span> (j == pattern.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(i - pattern.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="next表生成">next表生成</h2>
<p>next表的生成方法可以理解成使用模式串去匹配自身。数学证明太过复杂按下不表，先上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(<span class="type">const</span> string &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(str.length(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; result.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="comment">// k &gt; 0且匹配失败说明之前存在k - 1位的匹配成功。</span></span><br><span class="line">        <span class="comment">// 尝试使用str[result[k - 1]]与str[i]继续匹配</span></span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; str[k] != str[i]) &#123;</span><br><span class="line">            k = result[k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果匹配成功，则说明str前i位这个子串的后k位与前k位相同</span></span><br><span class="line">        <span class="comment">// 即result[i] = k;</span></span><br><span class="line">        <span class="keyword">if</span> (str[k] == str[i]) &#123;</span><br><span class="line">            ++k;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出与kmp匹配过程的代码非常相似，图解如下：</p>
<p>例P="ABCDABA"</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101211913745.png" alt="" /><figcaption>image-20211101211913745</figcaption>
</figure>
<p>因为严格前/后缀不能等于自身，因此从第2位开始匹配，并将第一位结果置0。可见匹配失败，且<code>k=0</code>，将此位结果置0，进入下一位。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212012168.png" alt="" /><figcaption>image-20211101212012168</figcaption>
</figure>
<p>依然不匹配，且<code>k=0</code>，置0进入下一位。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212117026.png" alt="" /><figcaption>image-20211101212117026</figcaption>
</figure>
<p>还是不匹配，且<code>k=0</code>，置0进入下一位。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212427058.png" alt="" /><figcaption>image-20211101212427058</figcaption>
</figure>
<p>匹配，<code>++k</code>，并置<code>结果=k=1</code>。由于下一步比较时<code>k=1</code>增量与比较步长相同，看起来好像没有移动。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212506554.png" alt="" /><figcaption>image-20211101212506554</figcaption>
</figure>
<p>匹配，<code>++k</code>，并置<code>结果=k=2</code>。进入下一步。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212649204.png" alt="" /><figcaption>image-20211101212649204</figcaption>
</figure>
<p>不匹配，且<code>k &gt; 0</code>试图取<code>next[k - 1] = next[1] = 0</code>与该位比较。</p>
<figure>
<img src="https://img.xilong.site/20211101/image-20211101212832132.png" alt="" /><figcaption>image-20211101212832132</figcaption>
</figure>
<p>匹配，且<code>k=0</code>，<code>++k</code>置<code>结果=k=1</code>。结束匹配过程。</p>
<p>最终结果<code>next=&#123;0,0,0,0,1,2,1&#125;</code>。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配之AC自动机</title>
    <url>/blog/2021/11/02/0031-string_matching_automaton/</url>
    <content><![CDATA[<blockquote>
<p>AC自动机是一种综合了Tire树与KMP算法思想的字符串匹配算法，特点是同时进行多个模式串的匹配。</p>
</blockquote>
<span id="more"></span>
<h2 id="ac自动机介绍">AC自动机介绍</h2>
<p>AC自动机利用KMP的最长成功匹配思想对Tire树进行改造，使得搜索效率大副提高，并且可以对多个模式串进行匹配。缺点是效大的空间复杂度，是一种空间换时间的算法。</p>
<h2 id="tire树">Tire树</h2>
<p>Tire树也就是字典树，可以提供高效的字符串查找。要构造一个Tire树，需要明确：</p>
<ol type="1">
<li>一个字母表，包括所有模式串中可能出现的字符。</li>
<li>至少一个模式串。</li>
</ol>
<p>构造过程为从根节点开始，对每个串的字符逐位判断，若存在字符相同的子节点则转移到子节点。否则创建一个新节点，并令其字符为当前字符。将每个串遍历结束时停留的节点标记为接受节点。下一个串仍从根节点开始构造。</p>
<p>比如字母表限定为“小写英文字母（a-z）”，模式串为{"she","he","her","his","is"}时，可以生成如下所示Tire树：</p>
<figure>
<img src="https://img.xilong.site/20211102/image-20211102120835270.png" alt="" /><figcaption>image-20211102120835270</figcaption>
</figure>
<p>要判断一个串是否与某一模式串相同只需要从根节点开始，对待匹配串逐位判断，若存在与该位字符相同的子节点则转移，否则匹配失败。如果匹配结束时停留在接受节点则匹配成功。例如：</p>
<ul>
<li>待匹配串为"her"：
<ul>
<li>初始位置为根节点，匹配字符'h'，存在字符为'h'的子节点，转移到对应节点。</li>
<li>匹配字符'e'，存在，转移到对应节点。</li>
<li>匹配字符'r'，存在，转移到对应节点。</li>
<li>匹配完成，当前节点为接受节点，匹配成功。</li>
</ul></li>
<li>待匹配串为"sh":
<ul>
<li>初始位置为根节点，匹配字符's'，存在，转移到对应节点。</li>
<li>匹配字符'h'，存在，转移到对应节点。</li>
<li>匹配完成，当前节点不是接受节点，匹配失败。</li>
</ul></li>
<li>待匹配串为"rsg":
<ul>
<li>初始位置为根节点，匹配字符'r'，不存在，匹配失败。</li>
</ul></li>
</ul>
<h2 id="多模式匹配">多模式匹配</h2>
<p>在Tire树中，一个节点表示的是从根节点到该点的路径对应的串。如上图树中最下层的'r'节点表示的是字符串"her"。考虑字符串"sher"，如果要求出各模式串在其中出现的次数，通常做法就是逐位与所有模式进行匹配：</p>
<ul>
<li>”sher"匹配{"she","he","her","his","is"}</li>
<li>”her"匹配{"she","he","her","his","is"}</li>
<li>”er"匹配{"she","he","her","his","is"}</li>
<li>”r"匹配{"she","he","her","his","is"}</li>
</ul>
<p>这里的匹配规则稍作改动，只要到达接受结点就算一次成功。也就是从匹配整个串变为匹配是否存在一个与模式相同的前缀。</p>
<p>问题是，匹配次数太多，且多数是不必要的。比如对"er"与"r"的10次（每个串分别与5个模式进行匹配）。以及"sher"对除"she"外的模式的4次匹配和"her"对"is"与"she"的2次匹配。在20次匹配中共有16次匹配是没有必要的，大大降低了去处效率。</p>
<p>在KMP思想的启发下，可以引入一个最长后缀的概念。当匹配失败时，转移到已匹配部分的最长后缀对应的节点继续匹配，就减少了不必要的匹配。</p>
<p>如对"sher"而言，匹配到"she"模式的末尾时位于第4层的'e'节点。匹配'r'时，无对应子节点而匹配失败，此时不从头开始，而是转移到第3层的'e'节点，其对应的"he"为"she"在该图中的最长后缀，此时继续匹配'r'，发现对应子节点，并转移到'r'。匹配结束，路径上的共有3个接受节点，分别对应"she"、"he"、"her"，这三个模式的匹配次数分别+1。</p>
<p>如果将每个节点的失败后转移节点标记出来，就形成了下图结构（蓝色箭头表示失败后转移节点，没有标记的则转移到根节点）：</p>
<figure>
<img src="https://img.xilong.site/20211102/image-20211102130728715.png" alt="" /><figcaption>image-20211102130728715</figcaption>
</figure>
<h2 id="失配指针">失配指针</h2>
<p>上一节中的匹配方式就构成了AC自动机。AC自动机算法即是在Tire树的基础上加入了匹配失败的处理，使其达成了很高的多次匹配效率，主要用于匹配子串中各模式串出现的位置与次数。其中匹配失败处理就是通过失配指针实现的，即在每个节点中加入一个指针指向匹配失败后转移的节点。</p>
<p>失配指针可以使用如下方法得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// queue: 一个队列，保存节点指针</span><br><span class="line">// root: 根节点</span><br><span class="line">// 将根节点的fail指针设为null，并将其所有子节点入队</span><br><span class="line">root-&gt;fail = null</span><br><span class="line">for p in root.childs:</span><br><span class="line">    queue.push(p)</span><br><span class="line">// 层序遍历tire树</span><br><span class="line">while !queue.empty():</span><br><span class="line">    // 对当前节点，先将其fail值默认为root</span><br><span class="line">    cur = queue.pop();</span><br><span class="line">    cur-&gt;fail = root</span><br><span class="line">    </span><br><span class="line">    for p in cur.childs:</span><br><span class="line">        queue.push(p)</span><br><span class="line">    // 寻找其父节点的fail指针指向的节点的子节点</span><br><span class="line">    // 找到的第一个与当前节点值相同的节点就是当前节点的最长后缀节点</span><br><span class="line">    // 若没有相应的子节点，则迭代寻找fail的fail指针指向的节点。</span><br><span class="line">    fail = cur-&gt;parent-&gt;fail</span><br><span class="line">    while fail != null and cur-&gt;fail == root:</span><br><span class="line">        for p in fail.childs:</span><br><span class="line">            if p-&gt;value == cur-&gt;value:</span><br><span class="line">                cur-&gt;fail = p</span><br><span class="line">        fail = fail-&gt;fail</span><br></pre></td></tr></table></figure>
<h2 id="匹配过程">匹配过程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// str:待匹配串</span><br><span class="line">// root:自动机根节点</span><br><span class="line">// 令cur指向根节点，并对str逐位匹配</span><br><span class="line">cur = root</span><br><span class="line">for i in (0, str.length()):</span><br><span class="line">    // 如果当前节点不存在str[i]对应的子节点，则进入cur-&gt;fail</span><br><span class="line">    // 循环直到存在对应节点或到达根节点</span><br><span class="line">	auto index = Node::get_index(str[i])</span><br><span class="line">	while cur-&gt;childs[index] == nullptr &amp;&amp; cur != root :</span><br><span class="line">		cur = cur-&gt;fail</span><br><span class="line">	// 如果仍没有对应节点，则退出此轮循环</span><br><span class="line">	if cur-&gt;childs[index] == nullptr :</span><br><span class="line">    	continue</span><br><span class="line">   	// 进入到对应节点中，同时使用temp遍历该节点的所有后缀</span><br><span class="line">   	// 将路径上的所有接受节点对应模式出现次数+1</span><br><span class="line">	cur = cur-&gt;childs[index]</span><br><span class="line">	temp = cur</span><br><span class="line">	while temp != nullptr :</span><br><span class="line">		for  p in temp-&gt;patterns :</span><br><span class="line">		    ++nums[p]</span><br><span class="line">		temp = temp-&gt;fail</span><br></pre></td></tr></table></figure>
<h2 id="c实现">C++实现</h2>
<p>给出一个字母表为小写字母且不考虑内存泄露的简单实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ACAutomaton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ACAutomaton</span>(<span class="type">const</span> vector&lt;string&gt; &amp;patterns) </span><br><span class="line">    : <span class="built_in">root</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="literal">nullptr</span>)), <span class="built_in">nums</span>(patterns.<span class="built_in">size</span>(), <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">generate_tire</span>(patterns);</span><br><span class="line">        <span class="built_in">generate_fails</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">(<span class="type">const</span> string&amp; str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = root;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; str.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> index = Node::<span class="built_in">get_index</span>(str[i]);</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;childs[index] == <span class="literal">nullptr</span> &amp;&amp; cur != root) &#123;</span><br><span class="line">                cur = cur-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;childs[index] == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">            cur = cur-&gt;childs[index];</span><br><span class="line">            <span class="keyword">auto</span> temp = cur;</span><br><span class="line">            <span class="keyword">while</span> (temp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> p : temp-&gt;patterns) &#123;</span><br><span class="line">                    ++nums[p];</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;<span class="title">get_nums</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="built_in">Node</span> (Node *parent_) </span><br><span class="line">        : <span class="built_in">value</span>(<span class="number">0</span>), <span class="built_in">parent</span>(parent_), <span class="built_in">fail</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">get_index</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> value;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; patterns;</span><br><span class="line"></span><br><span class="line">        Node *parent;</span><br><span class="line">        Node *fail;</span><br><span class="line">        Node *childs[<span class="number">26</span>] = &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node *root;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generate_tire</span><span class="params">(<span class="type">const</span> vector&lt;string&gt; &amp;patterns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; patterns.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> cur = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c : patterns[i]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> index = Node::<span class="built_in">get_index</span>(c);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;childs[index] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    cur-&gt;childs[index] = <span class="keyword">new</span> <span class="built_in">Node</span>(cur);</span><br><span class="line">                    cur-&gt;childs[index]-&gt;value = c;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur-&gt;childs[index];</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;patterns.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">generate_fails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        root-&gt;fail = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;childs[i])</span><br><span class="line">                q.<span class="built_in">push</span>(root-&gt;childs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            cur-&gt;fail = root;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;childs[i]) </span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;childs[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> f = cur-&gt;parent-&gt;fail;</span><br><span class="line">            <span class="keyword">while</span> (f != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;fail == root) &#123;</span><br><span class="line">                <span class="keyword">auto</span> index = Node::<span class="built_in">get_index</span>(cur-&gt;value);</span><br><span class="line">                <span class="keyword">if</span> (f-&gt;childs[index]) &#123;</span><br><span class="line">                    cur-&gt;fail = f-&gt;childs[index];</span><br><span class="line">                &#125;</span><br><span class="line">                f = f-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// while !q.empty</span></span><br><span class="line">    &#125; <span class="comment">// generate_fails</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>APUE学习笔记01——UNIX标准与限制</title>
    <url>/blog/2021/12/11/0032-APUE_chapter2/</url>
    <content><![CDATA[<blockquote>
<p>本章主要介绍了UNIX的标准与限制，说明了三个标准范围ISO C、POSIX的SUS，并且对三个运行时限制函数sysconf、pathconf和fpathconf进行了介绍。</p>
</blockquote>
<span id="more"></span>
<p>UNIX系统中存在三个标准范围与一些限制。为了写出良好的可移植代码，了解这些标准是非常有必要的。</p>
<h2 id="标准范围">标准范围</h2>
<h3 id="iso-c">ISO C</h3>
<p>所有Unix系统都提供对ISO C标准的完整支持。包括以下头文件：</p>
<table>
<thead>
<tr class="header">
<th>头文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>assert.h</td>
<td>验证程序断言</td>
</tr>
<tr class="even">
<td>complex.h</td>
<td>复数算术运算支持</td>
</tr>
<tr class="odd">
<td>ctype.h</td>
<td>字符分类和映射支持</td>
</tr>
<tr class="even">
<td>errno.h</td>
<td>出错码</td>
</tr>
<tr class="odd">
<td>fenv.h</td>
<td>浮点环境</td>
</tr>
<tr class="even">
<td>float.h</td>
<td>浮点常量及特性</td>
</tr>
<tr class="odd">
<td>inttypes.h</td>
<td>整型格式变换</td>
</tr>
<tr class="even">
<td>iso646.h</td>
<td>赋值、关系及一元操作符宏</td>
</tr>
<tr class="odd">
<td>limits.h</td>
<td>实现常量</td>
</tr>
<tr class="even">
<td>locale.h</td>
<td>本地化类别及相关定义</td>
</tr>
<tr class="odd">
<td>math.h</td>
<td>数学函数、类型声明及常量</td>
</tr>
<tr class="even">
<td>setjmp.h</td>
<td>非局部goto</td>
</tr>
<tr class="odd">
<td>signal.h</td>
<td>信号</td>
</tr>
<tr class="even">
<td>stdarg.h</td>
<td>可变长度参数表</td>
</tr>
<tr class="odd">
<td>stdbool.h</td>
<td>布尔类型和值</td>
</tr>
<tr class="even">
<td>stddef.h</td>
<td>标准定义</td>
</tr>
<tr class="odd">
<td>stdint.h</td>
<td>整型</td>
</tr>
<tr class="even">
<td>stdio.h</td>
<td>标准I/O库</td>
</tr>
<tr class="odd">
<td>stdlib.h</td>
<td>实用函数</td>
</tr>
<tr class="even">
<td>string.h</td>
<td>字符串操作</td>
</tr>
<tr class="odd">
<td>tgmath.h</td>
<td>通用类型数学宏</td>
</tr>
<tr class="even">
<td>time.h</td>
<td>时间和日期</td>
</tr>
<tr class="odd">
<td>wchar.h</td>
<td>扩充的多字节和宽字符支持</td>
</tr>
<tr class="even">
<td>wctype.h</td>
<td>宽字符分类和映射支持</td>
</tr>
</tbody>
</table>
<h3 id="posix">POSIX</h3>
<p>可移植操作系统接口，最初是IEEE POSIX。在1988年由ISO标准化，称为POSIX.1，这个版本被广泛支持。包括三组头文件和一组可选接口组。</p>
<p>POSIX必需头文件：</p>
<table>
<thead>
<tr class="header">
<th>头文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>aio.h</td>
<td>异步I/O</td>
</tr>
<tr class="even">
<td>cpio.h</td>
<td>cpio归档值</td>
</tr>
<tr class="odd">
<td>dirent.h</td>
<td>目录项</td>
</tr>
<tr class="even">
<td>dlfcn.h</td>
<td>动态链接</td>
</tr>
<tr class="odd">
<td>fcntl.h</td>
<td>文件控制</td>
</tr>
<tr class="even">
<td>fnmatch.h</td>
<td>文件名匹配类型</td>
</tr>
<tr class="odd">
<td>glob.h</td>
<td>路径名模式匹配与生成</td>
</tr>
<tr class="even">
<td>grp.h</td>
<td>组文件</td>
</tr>
<tr class="odd">
<td>iconv.h</td>
<td>代码集变换实用程序</td>
</tr>
<tr class="even">
<td>langinfo.h</td>
<td>语言信息变量</td>
</tr>
<tr class="odd">
<td>monetary.h</td>
<td>货币类型与函数</td>
</tr>
<tr class="even">
<td>netdb.h</td>
<td>网络数据库操作</td>
</tr>
<tr class="odd">
<td>nl_types.h</td>
<td>消息类</td>
</tr>
<tr class="even">
<td>poll.h</td>
<td>投票函数</td>
</tr>
<tr class="odd">
<td>pthread.h</td>
<td>线程</td>
</tr>
<tr class="even">
<td>pwd.h</td>
<td>口令文件</td>
</tr>
<tr class="odd">
<td>regex.h</td>
<td>正则表达式</td>
</tr>
<tr class="even">
<td>sched.h</td>
<td>执行调度</td>
</tr>
<tr class="odd">
<td>semaphore.h</td>
<td>信号量</td>
</tr>
<tr class="even">
<td>strings.h</td>
<td>字符串操作</td>
</tr>
<tr class="odd">
<td>tar.h</td>
<td>tar归档值</td>
</tr>
<tr class="even">
<td>termios.h</td>
<td>终端I/O</td>
</tr>
<tr class="odd">
<td>unistd.h</td>
<td>符号常量</td>
</tr>
<tr class="even">
<td>wordexp.h</td>
<td>字扩充类型</td>
</tr>
<tr class="odd">
<td>arpa/inet.h</td>
<td>Internet定义</td>
</tr>
<tr class="even">
<td>net/if.h</td>
<td>socket本地接口</td>
</tr>
<tr class="odd">
<td>netinet/in.h</td>
<td>Internet地址族</td>
</tr>
<tr class="even">
<td>netinet/tcp.h</td>
<td>TCP协议定义</td>
</tr>
<tr class="odd">
<td>sys/mman.h</td>
<td>存储管理声明</td>
</tr>
<tr class="even">
<td>sys/select.h</td>
<td>select函数</td>
</tr>
<tr class="odd">
<td>sys/socket.h</td>
<td>socket接口</td>
</tr>
<tr class="even">
<td>sys/stat.h</td>
<td>文件状态</td>
</tr>
<tr class="odd">
<td>sys/statvfs.h</td>
<td>文件系统信息</td>
</tr>
<tr class="even">
<td>sys/times.h</td>
<td>进程时间</td>
</tr>
<tr class="odd">
<td>sys/types.h</td>
<td>基本系统数据类型</td>
</tr>
<tr class="even">
<td>sys/un.h</td>
<td>UNIX域socket定义</td>
</tr>
<tr class="odd">
<td>sys/utsname.h</td>
<td>系统名</td>
</tr>
<tr class="even">
<td>sys/wait.h</td>
<td>进程控制</td>
</tr>
</tbody>
</table>
<p>XSI可选头文件：</p>
<table>
<thead>
<tr class="header">
<th>头文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>fmtmsg.h</td>
<td>消息显示结构</td>
</tr>
<tr class="even">
<td>ftw.h</td>
<td>文件树漫游</td>
</tr>
<tr class="odd">
<td>libgen.h</td>
<td>路径名管理函数</td>
</tr>
<tr class="even">
<td>ndbm.h</td>
<td>数据库操作</td>
</tr>
<tr class="odd">
<td>search.h</td>
<td>搜索表</td>
</tr>
<tr class="even">
<td>syslog.h</td>
<td>系统出错日志记录</td>
</tr>
<tr class="odd">
<td>utmpx.h</td>
<td>用户账户数据库</td>
</tr>
<tr class="even">
<td>sys/ipc.h</td>
<td>IPC</td>
</tr>
<tr class="odd">
<td>sys/msg.h</td>
<td>XSI消息队列</td>
</tr>
<tr class="even">
<td>sys/resource.h</td>
<td>资源操作</td>
</tr>
<tr class="odd">
<td>sys/sem.h</td>
<td>XSI信号量</td>
</tr>
<tr class="even">
<td>sys/shm.h</td>
<td>XSI共享存储</td>
</tr>
<tr class="odd">
<td>sys/time.h</td>
<td>时间类型</td>
</tr>
<tr class="even">
<td>sys/uio.h</td>
<td>矢量I/O操作</td>
</tr>
</tbody>
</table>
<p>可选头文件：</p>
<table>
<thead>
<tr class="header">
<th>头文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>mqueue.h</td>
<td>消息队列</td>
</tr>
<tr class="even">
<td>spawn.h</td>
<td>实时spawn接口</td>
</tr>
</tbody>
</table>
<p>可选接口组和选项码：</p>
<table>
<thead>
<tr class="header">
<th>选项码</th>
<th>符号常量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADV</td>
<td><code>_POSIX_ADVISORY_INFO</code></td>
<td>建议性信息</td>
</tr>
<tr class="even">
<td>CPT</td>
<td><code>_POSIX_CPUTIME</code></td>
<td>进程CPU时间时钟</td>
</tr>
<tr class="odd">
<td><strong>FSC</strong></td>
<td><code>_POSIX_FSYNC</code></td>
<td>文件同步</td>
</tr>
<tr class="even">
<td>IP6</td>
<td><code>_POSIX_IPV6</code></td>
<td>IPv6接口</td>
</tr>
<tr class="odd">
<td>ML</td>
<td><code>_POSIX_MEMLOCK</code></td>
<td>进程存储区加锁（实时）</td>
</tr>
<tr class="even">
<td>MLR</td>
<td><code>_POSIX_MEMLOCK_RANGE</code></td>
<td>存储区域加锁（实时）</td>
</tr>
<tr class="odd">
<td>MON</td>
<td><code>_POSIX_MONOTONIC_CLOCK</code></td>
<td>单调时钟（实时）</td>
</tr>
<tr class="even">
<td>MSG</td>
<td><code>_POSIX_MSEEAGE_PASSING</code></td>
<td>消息传送（实时）</td>
</tr>
<tr class="odd">
<td>MX</td>
<td><code>__STDC_IEC_559__</code></td>
<td>IEC 60559 浮点选项</td>
</tr>
<tr class="even">
<td>PIO</td>
<td><code>_POSIX_PRIORITIZED_IO</code></td>
<td>优先输入和输出</td>
</tr>
<tr class="odd">
<td>PS</td>
<td><code>_POSIX_PRIORITIZED_SCHEDULING</code></td>
<td>进程调度（实时）</td>
</tr>
<tr class="even">
<td>RPI</td>
<td><code>_POSIX_THREAD_REBUST_PRIO_INHERIT</code></td>
<td>健壮的互斥量优先权继承（实时）</td>
</tr>
<tr class="odd">
<td>RPP</td>
<td><code>_POSIX_THREAD_REBUST_PRIO_PROTECT</code></td>
<td>健壮的互斥量优先权保护（实时）</td>
</tr>
<tr class="even">
<td>RS</td>
<td><code>_POSIX_RAW_SOCKETS</code></td>
<td>原始Socket</td>
</tr>
<tr class="odd">
<td>SHM</td>
<td><code>_POSIX_SHARED_MEMORY_OBJECTS</code></td>
<td>共享存储对象</td>
</tr>
<tr class="even">
<td>SIO</td>
<td><code>_POSIX_SYNCHRONIZED_IO</code></td>
<td>同步输入和输出</td>
</tr>
<tr class="odd">
<td>SPN</td>
<td><code>_POSIX_SPAWN</code></td>
<td>产生</td>
</tr>
<tr class="even">
<td>SS</td>
<td><code>_POSIX_SPORADIC_SERVER</code></td>
<td>进程阵发性服务器</td>
</tr>
<tr class="odd">
<td>TCT</td>
<td><code>_POSIX_THREAD_CPUTIME</code></td>
<td>线程CPU时间时钟</td>
</tr>
<tr class="even">
<td>TPI</td>
<td><code>_POSIX_THREAD_PRIO_INHERIT</code></td>
<td>非健壮的互斥量优先权继承</td>
</tr>
<tr class="odd">
<td>TPP</td>
<td><code>_POSIX_THREAD_PRIO_PROTECT</code></td>
<td>非健壮的互斥量优先权保护</td>
</tr>
<tr class="even">
<td>TPS</td>
<td><code>_POSIX_THREAD_PRIORITY_SCHEDULING</code></td>
<td>线程执行调度</td>
</tr>
<tr class="odd">
<td><strong>TSA</strong></td>
<td><code>_POSIX_THREAD_ATTR_STACKADDR</code></td>
<td>线程栈地址属性</td>
</tr>
<tr class="even">
<td><strong>TSH</strong></td>
<td><code>_POSIX_THREAD_PROCESS_SHARED</code></td>
<td>线程进程共享同步</td>
</tr>
<tr class="odd">
<td>TSP</td>
<td><code>_POSIX_THREAD_SPORADIC_SERVER</code></td>
<td>线程阵发性服务器</td>
</tr>
<tr class="even">
<td><strong>TSS</strong></td>
<td><code>_POSIX_THREAD_ATTR_STACKSIZE</code></td>
<td>线程栈长度属性</td>
</tr>
<tr class="odd">
<td>TYM</td>
<td><code>_POSIX_TYPED_MEMORY_OBJECTS</code></td>
<td>类型存储对象</td>
</tr>
<tr class="even">
<td><strong>XSI</strong></td>
<td><code>_XOPEN_UNIX</code></td>
<td>X/Open扩充接口</td>
</tr>
</tbody>
</table>
<h3 id="sus">SUS</h3>
<p>单一UNIX规范，是POSIX.1标准的一个超集，定义了一些附加接口扩展了POSIX.1。</p>
<p>SUS标准中，必须支持POSIX可选接口组中加粗的5组。同时一个系统必须满足此要求才能称为UNIX系统。</p>
<p>有些标准在SUS中也是可选的，包括：</p>
<ul>
<li>加密：由符号常量<code>_XOPEN_CRYPE</code>标记。</li>
<li>实时：由符号常量<code>_XOPEN_REALTIME</code>标记</li>
<li>高级实时。</li>
<li>实时线程：由符号常量<code>_XOPEN_REALTIME_THREADS</code>标记</li>
<li>高级实时线程。</li>
</ul>
<h2 id="限制">限制</h2>
<p>要使得程序具备良好的可移植性，就需要一种方法来获取系统的各种限制量。主要分为：</p>
<ol type="1">
<li>编译时限制，如整型的最大值。</li>
<li>运行时限制，如文件名最大长度。</li>
</ol>
<p>编译时限制可以定义在头文件里，而运行时限制往往需要运行特定的函数取得。主要包括ISO C 限制、POSIX 限制和XSI限制。</p>
<h3 id="iso-c限制">ISO C限制</h3>
<p>ISO C的所有编译时限制都定义在文件&lt;limits.h&gt;中。这些常量在一个特定的系统中是不会改变的。</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
<th>可接受的最小值</th>
<th>典型值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>CHAR_BIT</code></td>
<td>char的位数</td>
<td>8</td>
<td>8</td>
</tr>
<tr class="even">
<td><code>CHAR_MAX</code></td>
<td>char的最大值</td>
<td>取决于系统使用的字符是否带类型</td>
<td>127</td>
</tr>
<tr class="odd">
<td><code>CHAR_MIN</code></td>
<td>char的最小值</td>
<td>取决于系统使用的字符是否带类型</td>
<td>-128</td>
</tr>
<tr class="even">
<td><code>SCHAR_MAX</code></td>
<td>signed char的最大值</td>
<td>127</td>
<td>127</td>
</tr>
<tr class="odd">
<td><code>SCHAR_MIN</code></td>
<td>signed char的最小值</td>
<td>-127</td>
<td>-127</td>
</tr>
<tr class="even">
<td><code>UCHAR_MAX</code></td>
<td>unsigned char的最大值</td>
<td>255</td>
<td>255</td>
</tr>
<tr class="odd">
<td><code>INT_MAX</code></td>
<td>int的最大值</td>
<td>32767</td>
<td>2147483647</td>
</tr>
<tr class="even">
<td><code>INT_MIN</code></td>
<td>int的最小值</td>
<td>-32767</td>
<td>-2147483647</td>
</tr>
<tr class="odd">
<td><code>UINT_MAX</code></td>
<td>unsigned int的最大值</td>
<td>65535</td>
<td>4294967295</td>
</tr>
<tr class="even">
<td><code>SHRT_MAX</code></td>
<td>short的最大值</td>
<td>32767</td>
<td>32767</td>
</tr>
<tr class="odd">
<td><code>SHRT_MIN</code></td>
<td>short的最小值</td>
<td>-32767</td>
<td>-32767</td>
</tr>
<tr class="even">
<td><code>USHRT_MAX</code></td>
<td>unsigned short的最大值</td>
<td>65535</td>
<td>65535</td>
</tr>
<tr class="odd">
<td><code>LONG_MAX</code></td>
<td>long的最大值</td>
<td>2147483647</td>
<td>2147483647</td>
</tr>
<tr class="even">
<td><code>LONG_MIN</code></td>
<td>long的最小值</td>
<td>-2147483647</td>
<td>-2147483647</td>
</tr>
<tr class="odd">
<td><code>ULONG_MAX</code></td>
<td>unsigned long的最大值</td>
<td>4294967295</td>
<td>4294967295</td>
</tr>
<tr class="even">
<td><code>LLONG_MAX</code></td>
<td>long long的最大值</td>
<td>9223372036854775807</td>
<td>9223372036854775807</td>
</tr>
<tr class="odd">
<td><code>LLONG_MIN</code></td>
<td>long long的最小值</td>
<td>-9223372036854775807</td>
<td>-9223372036854775807</td>
</tr>
<tr class="even">
<td><code>ULLONG_MAX</code></td>
<td>unsigned long long的最大值</td>
<td>18446744073709551615</td>
<td>18446744073709551615</td>
</tr>
<tr class="odd">
<td><code>MB_LEN_MAX</code></td>
<td>一个多字节字符常量中的最大字符数</td>
<td>1</td>
<td>6</td>
</tr>
</tbody>
</table>
<p>表中典型值为主流32位系统的限制值，但在主流64位系统中也仅存在一个差别：long的长度为64bit。</p>
<p>除此之外，关于浮点数的编译时限制定义在文件&lt;float.h&gt;中，若需要大量使用浮点数时应仔细查看该文件。</p>
<p>另外还有一些常量定义在文件&lt;stdio.h&gt;中，<code>FOPEN_MAX</code>保证可同时打开标准I/P流的最小个数。ISO C规定其最小值为8，POSIX中的<code>STREAM_MAX</code>若有定义则应与<code>FOPEN_MAX</code>具有相同的值。<code>TMP_MAX</code>是由tmpnam函数产生的唯一文件名的最大个数，之后的章节中会对其进行说明。<code>FILENAME_MAX</code>是文件名的最大长度，我们应避免使用这个常量，因为POSIX提供了更好的替代常量(<code>NAME_MAX</code>和<code>PATH_MAX</code>)。</p>
<h3 id="posix限制">POSIX限制</h3>
<p>POSIX定义了很多涉及操作系统实现限制的常量。我们只关心其中与基本POSIX接口有关的部分，可以分为下列7类。</p>
<ol type="1">
<li><p>数值限制</p>
<p>基中一部分是对ISO C标准进行的扩充，包括<code>INT_MAX</code>的最小值为2147483647，<code>INT_MIN</code>为-2147483647，<code>UINT_MAX</code>为4294967295，<code>CHAR_BIT</code>必须是8，<code>SCHAR_MIN</code>必须是-128，<code>SCHAR_MAX</code>必须是127，<code>UCHAR_MAX</code>必须是255。</p>
<p>另外还包括<code>LONG_BIT</code>、<code>SSIZE_MAX</code>的<code>WORD_BIT</code>。</p></li>
<li><p>最小值，定义在&lt;limits.h&gt;中</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>_POSIX_ARG_MAX</code></td>
<td>exec函数的参数长度</td>
<td>4096</td>
</tr>
<tr class="even">
<td><code>_POSIX_CHILD_MAX</code></td>
<td>每个实际用户ID的子进程数</td>
<td>25</td>
</tr>
<tr class="odd">
<td><code>_POSIX_DELAYTIMER_MAX</code></td>
<td>定时器最大超限运行次数</td>
<td>32</td>
</tr>
<tr class="even">
<td><code>_POSIX_HOST_NAME_MAX</code></td>
<td>gethostname函数返回的主机名长度</td>
<td>255</td>
</tr>
<tr class="odd">
<td><code>_POSIX_LINK_MAX</code></td>
<td>至一个文件的链接数</td>
<td>8</td>
</tr>
<tr class="even">
<td><code>_POSIX_LOGIN_NAME_MAX</code></td>
<td>登录名长度</td>
<td>9</td>
</tr>
<tr class="odd">
<td><code>_POSIX_MAX_CANON</code></td>
<td>终端规范输入队列的字节数</td>
<td>255</td>
</tr>
<tr class="even">
<td><code>_POSIX_MAX_INPUT</code></td>
<td>终端输入队列的可用空间</td>
<td>255</td>
</tr>
<tr class="odd">
<td><code>_POSIX_NAME_MAX</code></td>
<td>文件名中的字节数，不包括终止null字符</td>
<td>14</td>
</tr>
<tr class="even">
<td><code>_POSIX_NGROUPS_MAX</code></td>
<td>每个进程同时添加的组ID数</td>
<td>8</td>
</tr>
<tr class="odd">
<td><code>_POSIX_OPEN_MAX</code></td>
<td>每个进程的打开文件数</td>
<td>20</td>
</tr>
<tr class="even">
<td><code>_POSIX_PATH_MAX</code></td>
<td>路径名中的字节数，包括终止null字节</td>
<td>256</td>
</tr>
<tr class="odd">
<td><code>_POSIX_PIPE_BUF</code></td>
<td>能原子地写到一个管道中的字节数</td>
<td>512</td>
</tr>
<tr class="even">
<td><code>_POSIX_RE_DUP_MAX</code></td>
<td>当使用间隔表示法时，regexec和regcomp函数允许的基本正则表达式重复发生次数</td>
<td>255</td>
</tr>
<tr class="odd">
<td><code>_POSIX_RTSIG_MAX</code></td>
<td>为应用预留的实时信号编号个数</td>
<td>8</td>
</tr>
<tr class="even">
<td><code>_POSIX_SEM_NSEMS_MAX</code></td>
<td>一个进程可以同时使用的信号量个数</td>
<td>256</td>
</tr>
<tr class="odd">
<td><code>_POSIX_SEM_VALUE_MAX</code></td>
<td>信号量可持有的值</td>
<td>32767</td>
</tr>
<tr class="even">
<td><code>_POSIX_SIGQUEUE_MAX</code></td>
<td>一个进程可发送和挂起的排队信号的个数</td>
<td>32</td>
</tr>
<tr class="odd">
<td><code>_POSIX_SSIZE_MAX</code></td>
<td>能存在ssize_t对象中的值</td>
<td>32767</td>
</tr>
<tr class="even">
<td><code>_POSIX_STREAM_MAX</code></td>
<td>一个进程能同时打开的标准I/O流数</td>
<td>8</td>
</tr>
<tr class="odd">
<td><code>_POSIX_SYMLINK_MAX</code></td>
<td>符号链接中的字节数</td>
<td>255</td>
</tr>
<tr class="even">
<td><code>_POSIX_SYMLOOP_MAX</code></td>
<td>在解析路径名时，可遍历的符号链接数</td>
<td>8</td>
</tr>
<tr class="odd">
<td><code>_POSIX_TIMER_MAX</code></td>
<td>每个进程的定时器数目</td>
<td>32</td>
</tr>
<tr class="even">
<td><code>_POSIX_TTY_NAME_MAX</code></td>
<td>终端设备名长度，包括终止null字节</td>
<td>9</td>
</tr>
<tr class="odd">
<td><code>_POSIX_TZNAME_MAX</code></td>
<td>时区名字节数</td>
<td>6</td>
</tr>
</tbody>
</table>
<p>这些不变值的名字里虽然都有个max，但称为最小值，因为这是一个符合POSIX标准的系统至少应该提供的值。某些不变值在实际应用中太小了。例如大多数UNIX系统中，每个进程可打开的文件数远大于20。另外<code>_POSIX_PATH_MAX</code>的最小限制值为255，也太小了，实际使用中可能会超过这个值。</p></li>
<li><p>最大值：<code>_POSIX_CLOCKRES_MIN</code>。</p></li>
<li><p>运行时可以增加的值：<code>CHAR_CLASS_NAME_MAX</code>、<code>COLL_WEIGHTS_MAX</code>、<code>LINE_MAX</code>、<code>NGROUPS_MAX</code>的<code>RE_DUP_MAX</code>。</p></li>
<li><p>运行时不变值，定义在&lt;limits.h&gt;中</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
<th>最小可接受值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ARG_MAX</code></td>
<td>exec函数族的参数最大长度</td>
<td><code>_POSIX_ARG_MAX</code></td>
</tr>
<tr class="even">
<td><code>ATEXIT_MAX</code></td>
<td>可用atexit函数登记的最大函数个数</td>
<td>32</td>
</tr>
<tr class="odd">
<td><code>CHILD_MAX</code></td>
<td>每个实际用户ID的子进程最大个数</td>
<td><code>_POSIX_CHILD_MAX</code></td>
</tr>
<tr class="even">
<td><code>DELAYTIMER_MAX</code></td>
<td>定时器最大超限运行次数</td>
<td><code>_POSIX_DELAYTIMER_MAX</code></td>
</tr>
<tr class="odd">
<td><code>HOST_NAME_MAX</code></td>
<td>gethostname返回的主机名长度</td>
<td><code>_POSIX_HOST_NAME_MAX</code></td>
</tr>
<tr class="even">
<td><code>LOGIN_NAME_MAX</code></td>
<td>登录名最大长度</td>
<td><code>_POSIX_LOGIN_NAME_MAX</code></td>
</tr>
<tr class="odd">
<td><code>OPEN_MAX</code></td>
<td>赋予新建文件描述符的最大值+1</td>
<td><code>_POSIX_OPEN_MAX</code></td>
</tr>
<tr class="even">
<td><code>PAGESIZE</code></td>
<td>系统内存页大小（以字节为单位）</td>
<td>1</td>
</tr>
<tr class="odd">
<td><code>RTSIG_MAX</code></td>
<td>为应用程序预留的实时信号的最大个数</td>
<td><code>_POSIX_RTSIG_MAX</code></td>
</tr>
<tr class="even">
<td><code>SEM_NSEMS_MAX</code></td>
<td>一个进程可使用的信号量最大个数</td>
<td><code>_POSIX_SEM_NSEMS_MAX</code></td>
</tr>
<tr class="odd">
<td><code>SEM_VALUE_MAX</code></td>
<td>信号量的最大值</td>
<td><code>_POSIX_SEM_VALUE_MAX</code></td>
</tr>
<tr class="even">
<td><code>SIGQUEUE_MAX</code></td>
<td>一个进程可排队信号的最大个数</td>
<td><code>_POSIX_SIGQUEUE_MAX</code></td>
</tr>
<tr class="odd">
<td><code>STREAM_MAX</code></td>
<td>一个进程一次可打开的标准I/O流的最大个数</td>
<td><code>_POSIX_STREAM_MAX</code></td>
</tr>
<tr class="even">
<td><code>SYMLOOP_MAX</code></td>
<td>路径解析过程中可访问的符号链接数</td>
<td><code>_POSIX_SYMLOOP_MAX</code></td>
</tr>
<tr class="odd">
<td><code>TIMER_MAX</code></td>
<td>一个进程的定时器最大个数</td>
<td><code>_POSIX_TIMER_MAX</code></td>
</tr>
<tr class="even">
<td><code>TTY_NAME_MAX</code></td>
<td>终端设备名长度，其中包括终止的null字节</td>
<td><code>_POSIX_TTY_NAME_MAX</code></td>
</tr>
<tr class="odd">
<td><code>TZNAME_MAX</code></td>
<td>时区名的字节数</td>
<td><code>_POSIX_TZNAME_MAX</code></td>
</tr>
</tbody>
</table></li>
<li><p>其他不变值：<code>NL_ARGMAX</code>、<code>NL_MAGMAX</code>、<code>COLL_WEIGHTS_MAX</code>、<code>LINE_MAX</code>、<code>NGROUPS_MAX</code>和<code>RE_DUP_MAX</code>。</p></li>
<li><p>路径名可变值：<code>FILESIZEBITS</code>、<code>LINK_MAX</code>、<code>MAX_CANON</code>、<code>MAX_INPUT</code>、<code>NAME_MAX</code>、<code>PATH_MAX</code>、<code>PIPE_BUF</code>的<code>SYMLINK_MAX</code>。</p></li>
</ol>
<h3 id="xsi限制">XSI限制</h3>
<p>XSI定义了两类常量：</p>
<ol type="1">
<li><p>最小值，定义在&lt;limits.h&gt;中：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
<th>最小可接受值</th>
<th>典型值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>NL_LANGMAX</code></td>
<td>在LANG环境变量中最大字节数</td>
<td>14</td>
<td>14</td>
</tr>
<tr class="even">
<td><code>NZERO</code></td>
<td>默认进程优先级</td>
<td>20</td>
<td>20</td>
</tr>
<tr class="odd">
<td><code>_XOPEN_IOV_MAX</code></td>
<td>readv在writev可使用的最多iovec结构个数</td>
<td>16</td>
<td>16</td>
</tr>
<tr class="even">
<td><code>_XOPEN_NAME_MAX</code></td>
<td>文件名中的字节数</td>
<td>255</td>
<td>255</td>
</tr>
<tr class="odd">
<td><code>_XOPEN_PATH_MAX</code></td>
<td>路径名中的字节数</td>
<td>1024</td>
<td>1024</td>
</tr>
</tbody>
</table>
<p>关于文件名和路径名的两个常量值是SUS为了弥补POSIX中定义的最小值大小（这可能是考虑了嵌入式POSIX设备）而做的弥补。</p></li>
<li><p>运行时不变值（未必真的不变）：<code>IOV_MAX</code>和<code>PAGE_SIZE</code>。</p></li>
</ol>
<h3 id="三个运行时限制相关函数">三个运行时限制相关函数</h3>
<p>之前提到的编译时限制可以在相关头文件中获得，而运行时变量则需要在运行时使用这三个函数之一获取，分别是：<code>sysconf</code>、<code>pathconf</code>和<code>fpathconf</code>。这三个函数都定义在&lt;unistd.h&gt;中，函数原型为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">sysconf</span><span class="params">(<span class="type">int</span> name)</span>;</span><br><span class="line"><span class="type">long</span> <span class="title function_">pathconf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> name)</span>;</span><br><span class="line"><span class="type">long</span> <span class="title function_">fpathconf</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> name)</span>;</span><br></pre></td></tr></table></figure>
<p>对于这三个函数，都使用一个name参数指定要查询的限制，其中：</p>
<ul>
<li>如果name参数并不是一个合适的常量，则返回-1，并将errno置为<code>EINVAL</code>。</li>
<li>如果要返回的值是不确定的，也通过返回-1来体现，不过此时errno不会改变。</li>
<li>其它情况下返回name参数对应的值。</li>
</ul>
<p>其中sysconf用于获取系统限制，用以<code>_SC_</code>开头的常量作为标识运行时限制的name参数，具体参数列表如下：</p>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 58%" />
<col style="width: 21%" />
</colgroup>
<thead>
<tr class="header">
<th>限制名</th>
<th>说明</th>
<th>name参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ARG_MAX</code></td>
<td>exec函数的参数最大长度</td>
<td><code>_SC_ARG_MAX</code></td>
</tr>
<tr class="even">
<td><code>ATEXIT_MAX</code></td>
<td>可用atexit函数登记的最大函数个数</td>
<td><code>_SC_ATEXIT_MAX</code></td>
</tr>
<tr class="odd">
<td><code>CHILD_MAX</code></td>
<td>每个实际用户ID的最大进程数</td>
<td><code>_SC_CHILD_MAX</code></td>
</tr>
<tr class="even">
<td>clock ticks / second</td>
<td>每秒时钟tick数</td>
<td><code>_SC_CLK_TCK</code></td>
</tr>
<tr class="odd">
<td><code>COLL_WEIGHTS_MAX</code></td>
<td>在本地定义文件中可以赋予LC_COLLATE顺序关键字项的最大权重数</td>
<td><code>_SC_COLL_WEIGHTS_MAX</code></td>
</tr>
<tr class="even">
<td><code>DELAYTIMER_MAX</code></td>
<td>定时器最大超限运行次数</td>
<td><code>_SC_DELAYTIMER_MAX</code></td>
</tr>
<tr class="odd">
<td><code>HOST_NAME_MAX</code></td>
<td>gethostname函数返回的主机名最大长度</td>
<td><code>_SC_HOST_NAME_MAX</code></td>
</tr>
<tr class="even">
<td><code>IOV_MAX</code></td>
<td>readv或writev函数可以使用最多的iovec结构的个数</td>
<td><code>_SC_IOV_MAX</code></td>
</tr>
<tr class="odd">
<td><code>LINE_MAX</code></td>
<td>实用程序输入行的最大长度</td>
<td><code>_SC_LINE_MAX</code></td>
</tr>
<tr class="even">
<td><code>LOGIN_NAME_MAX</code></td>
<td>登录名的最大长度</td>
<td><code>_SC_LOGIN_NAME_MAX</code></td>
</tr>
<tr class="odd">
<td><code>NGROUPS_MAX</code></td>
<td>每个进程同时添加的最大进程组ID数</td>
<td><code>_SC_NGROUPS_MAX</code></td>
</tr>
<tr class="even">
<td><code>OPEN_MAX</code></td>
<td>每个进程最大打开文件数</td>
<td><code>_SC_OPEN_MAX</code></td>
</tr>
<tr class="odd">
<td><code>PAGESIZE</code></td>
<td>系统存储页最大长度</td>
<td><code>_SC_PAGESIZE</code></td>
</tr>
<tr class="even">
<td><code>PAGE_SIZE</code></td>
<td>系统存储页最大长度</td>
<td><code>_SC_PAGE_SIZE</code></td>
</tr>
<tr class="odd">
<td><code>RE_DUP_MAX</code></td>
<td>当使用间隔表示法时，函数regexec和regcomp允许的基本正则表达式重复发生次数</td>
<td><code>_SC_RE_DUP_MAX</code></td>
</tr>
<tr class="even">
<td><code>RTSIG_MAX</code></td>
<td>为应用程序预留的实时信号的最大个数</td>
<td><code>_SC_RTSIG_MAX</code></td>
</tr>
<tr class="odd">
<td><code>SEM_NSEMS_MAX</code></td>
<td>一个进程可使用的信号量的最大个数</td>
<td><code>_SC_SEM_NSEMS_MAX</code></td>
</tr>
<tr class="even">
<td><code>SEM_VALUE_MAX</code></td>
<td>信号量的最大值</td>
<td><code>_SC_SEM_VALUE_MAX</code></td>
</tr>
<tr class="odd">
<td><code>SIGQUEUE_MAX</code></td>
<td>一个进程可排除信号的最大个数</td>
<td><code>_SC_SIGQUEUE_MAX</code></td>
</tr>
<tr class="even">
<td><code>STREAM_MAX</code></td>
<td>一个SC_STREAM_MAX进程在任意给定时刻标准I/O流的最大个数。如果定义，必须与FOPEN_MAX有相同的值。</td>
<td><code>_SC_STREAM_MAX</code></td>
</tr>
<tr class="odd">
<td><code>SYMLOOP_MAX</code></td>
<td>解析路径名时，可遍历的符号链接数。</td>
<td><code>_SC_SYMLOOP_MAX</code></td>
</tr>
<tr class="even">
<td><code>TIMER_MAX</code></td>
<td>每个进程的最大定时器个数。</td>
<td><code>_SC_TIMER_MAX</code></td>
</tr>
<tr class="odd">
<td><code>TTY_NAME_MAX</code></td>
<td>终端设备名长度，包括终止null字节。</td>
<td><code>_SC_TTY_NAME_MAX</code></td>
</tr>
<tr class="even">
<td><code>TZNAME_MAX</code></td>
<td>时区名中的最大字节数</td>
<td><code>_SC_TZNAME_MAX</code></td>
</tr>
</tbody>
</table>
<p>而pathconf和fpathconf用以标识与路径相关的限制，它们的差别是前者使用路径作为参数，而后者使用一个文件描述符。它们都使用以<code>_PC_</code>开头的常量来表示name值，如下：</p>
<table>
<thead>
<tr class="header">
<th>限制名</th>
<th>说明</th>
<th>name参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>FILESIZEBITS</code></td>
<td>以带符号整型值表示在指定目录中允许的普通文件最大长度所需的最小位数</td>
<td><code>_PC_FILESIZEBITS</code></td>
</tr>
<tr class="even">
<td><code>LINK_MAX</code></td>
<td>文件链接计数的最大值</td>
<td><code>_PC_LINK_MAX</code></td>
</tr>
<tr class="odd">
<td><code>MAX_CANON</code></td>
<td>终端规范输入队列的最大字节数</td>
<td><code>_PC_MAX_CANON</code></td>
</tr>
<tr class="even">
<td><code>MAX_INPUT</code></td>
<td>终端输入队列可用空间的字节数</td>
<td><code>_PC_MAX_INPUT</code></td>
</tr>
<tr class="odd">
<td><code>NAME_MAX</code></td>
<td>文件名的最大字节数</td>
<td><code>_PC_NAME_MAX</code></td>
</tr>
<tr class="even">
<td><code>PATH_MAX</code></td>
<td>相对路径名的最大字节数，包括终止null字节</td>
<td><code>_PC_PATH_BUF</code></td>
</tr>
<tr class="odd">
<td><code>PIPE_BUF</code></td>
<td>能原子地写到管道的最大字节数</td>
<td><code>_PC_PIPE_BUF</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_TIMESTAMP_RESOLUTION</code></td>
<td>文件时间戳的纳秒精度</td>
<td><code>_PC_TIMESTAMP_RESOLUTION</code></td>
</tr>
<tr class="odd">
<td><code>SYMLINK_MAX</code></td>
<td>符号链接的字节数</td>
<td><code>_PC_SYMLINK_MAX</code></td>
</tr>
</tbody>
</table>
<p>其中：</p>
<ul>
<li><p><code>_PC_MAX_CANON</code>和<code>_PC_MAX_INPUT</code>引用的文件必须是终端文件。</p></li>
<li><p><code>_PC_LINK_MAX</code>和<code>_PC_TIMESTAMP_RESOLUTION</code>引用的文件可以是文件或目录，如果是目录则返回值作用与目录本身，而不用于目录的文件名项。</p></li>
<li><p><code>_PC_FILESIZEBITS</code>的<code>_PC_NAME_MAX</code>引用的文件必须是目录，返回值用于目录中的文件名。</p></li>
<li><p><code>_PC_PATH_MAX</code>引用的文件必须是目录。当所指定的目录是工作目录时，返回值是相对路径名的最大长度。</p></li>
<li><p><code>_PC_PIPE_BUF</code>引用的文件必须是管道、FIFO或目录，当引用管道或FIFO时返回的值是对所引用的文件的限制值，引用目录时返回该目录中创建的任一FIFO的限制值。</p></li>
<li><p><code>_PC_SYMLINK_MAX</code>引用的文件必须是目录。返回值是该目录中符号链接可包含字符串的最大长度。</p></li>
</ul>
<h2 id="选项">选项</h2>
<p>如果编写的程序需要用到XSI选项组中的可选功能，我们就需要一种方法来判断实现是否支持一个给定的选项。和对限制的处理很类似，POSIX定义了三种处理选项的方法：</p>
<ul>
<li>编译时选项定义在&lt;unistd.h&gt;中</li>
<li>与文件或目录无关的运行时选项用sysconf来判断。</li>
<li>与文件或目录有关的运行时选项用pathconf或fpathconf来判断。</li>
</ul>
<p>对于每一个选项有三种可能的支持状态：</p>
<ul>
<li>如果符号常量没有定义或定义值为-1，则不受支持。</li>
<li>如果符号常量定义值大于0，则受支持。</li>
<li>如果符号常量的定义值等于0，则必须调用sysconf、pathconf或fpathconf来判断是否受支持。</li>
</ul>
<p>pathconf和fpathconf的选项与name参数：</p>
<table>
<thead>
<tr class="header">
<th>选项名</th>
<th>说明</th>
<th>name参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>_POSIX_CHOWN_RESTRICTED</code></td>
<td>使用chown是否是受限的</td>
<td><code>_PC_CHOWN_RESTRICTED</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_NO_TRUNC</code></td>
<td>路径名长于NAME_MAX是否出错</td>
<td><code>_PC_NO_TRUNC</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_VDISABLE</code></td>
<td>若定义，可用此值禁用终端特殊字符</td>
<td><code>_PC_VDISABLE</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_ASYNC_IO</code></td>
<td>对相关联的文件是否可以使用异步I/O</td>
<td><code>_PC_ASYNC_IO</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_PRIO_IO</code></td>
<td>对相关联的文件是否可以使用优先I/O</td>
<td><code>_PC_PRIO_IO</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_SYNC_IO</code></td>
<td>对相关联的文件是否可以使用同步I/O</td>
<td><code>_PC_SYNC_IO</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX2_SYMLINKS</code></td>
<td>目录中是否支持符号链接</td>
<td><code>_PC_2_SYMLINKS</code></td>
</tr>
</tbody>
</table>
<p>sysconf的选项及name参数：</p>
<table>
<thead>
<tr class="header">
<th>选项名</th>
<th>说明</th>
<th>name参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>_POSIX_ASYNCHRONOUS_TO</code></td>
<td>是否支持POSIX异步I/O</td>
<td><code>_SC_ASYNCHRONOUS_TO</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_BARRIERS</code></td>
<td>是否支持屏障</td>
<td><code>_SC_BARRIERS</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_CLOCK_SELECTION</code></td>
<td>是否支持时钟选择</td>
<td><code>_SC_CLOCK_SELECTION</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_JOB_CONTROL</code></td>
<td>是否支持作业控制</td>
<td><code>_SC_JOB_CONTROL</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_MAPPED_FILES</code></td>
<td>是否支持存储映像文件</td>
<td><code>_SC_MAPPED_FILES</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_MEMORY_PROTECTION</code></td>
<td>是否支持存储保护</td>
<td><code>_SC_MEMORY_PROTECTION</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_READER_WRITER_LOCKS</code></td>
<td>是否支持读者写者保护</td>
<td><code>_SC_READER_WRITER_LOCKS</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_REALTIME_SIGNALS</code></td>
<td>是否支持实时信号</td>
<td><code>_SC_REALTIME_SIGNALS</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_SAVED_IDS</code></td>
<td>是否支持保存的设置用户ID的保存的的设置组ID</td>
<td><code>_SC_SAVED_IDS</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_SEMAPHORES</code></td>
<td>是否支持POSIX信号量</td>
<td><code>_SC_SEMAPHORES</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_SHELL</code></td>
<td>是否支持POSIX shell</td>
<td><code>_SC_SHELL</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_SPIN_LOCKS</code></td>
<td>是否支持旋转锁</td>
<td><code>_SC_SPIN_LOCKS</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_THREAD_SAFE_FUNCTIONS</code></td>
<td>是否支持线程安全函数</td>
<td><code>_SC_THREAD_SAFE_FUNCTIONS</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_THREADS</code></td>
<td>是否支持线程</td>
<td><code>_SC_THREADS</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_TIMEOUTS</code></td>
<td>是否支持基于超时的变量选择函数</td>
<td><code>_SC_TIMEOUTS</code></td>
</tr>
<tr class="even">
<td><code>_POSIX_TIMERS</code></td>
<td>是否支持定时器</td>
<td><code>_SC_TIMERS</code></td>
</tr>
<tr class="odd">
<td><code>_POSIX_VERSION</code></td>
<td>POSIX版本</td>
<td><code>_SC_VERSION</code></td>
</tr>
<tr class="even">
<td><code>_XOPEN_CRYPT</code></td>
<td>是否支持XSI加密可靠组</td>
<td><code>_XOPEN_CRYPT</code></td>
</tr>
<tr class="odd">
<td><code>_XOPEN_REALTIME</code></td>
<td>是否支持实时选项组</td>
<td><code>_SC_XOPEN_REALTIME</code></td>
</tr>
<tr class="even">
<td><code>_XOPEN_REALTIME_THREADS</code></td>
<td>是否支持实时线程选项组</td>
<td><code>_SC_XOPEN_REALTIME_THREADS</code></td>
</tr>
<tr class="odd">
<td><code>_XOPEN_SHM</code></td>
<td>是否支持XSI共享存储选项组</td>
<td><code>_SC_XOPEN_SHM</code></td>
</tr>
<tr class="even">
<td><code>_XOPEN_VERSION</code></td>
<td>XSI版本</td>
<td><code>_SC_XOPEN_VERSION</code></td>
</tr>
</tbody>
</table>
<h2 id="基本系统数据类型">基本系统数据类型</h2>
<p>基本系统数据类型，定义在&lt;sys/types.h&gt;中，用于将系统变量与C数据类型联系在一起。这样就不用考虑具体系统实现细节。包括：</p>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>clock_t</td>
<td>时钟滴答计数器</td>
</tr>
<tr class="even">
<td>comp_t</td>
<td>压缩的时针滴答</td>
</tr>
<tr class="odd">
<td>dev_t</td>
<td>设备号</td>
</tr>
<tr class="even">
<td>fd_set</td>
<td>文件描述符集</td>
</tr>
<tr class="odd">
<td>fpos_t</td>
<td>文件位置</td>
</tr>
<tr class="even">
<td>gid_t</td>
<td>数值组ID</td>
</tr>
<tr class="odd">
<td>ino_t</td>
<td>i节点编号</td>
</tr>
<tr class="even">
<td>mode_t</td>
<td>文件类型，文件创建模式</td>
</tr>
<tr class="odd">
<td>nlink_t</td>
<td>目录项链接计数</td>
</tr>
<tr class="even">
<td>off_t</td>
<td>文件长度的偏移量</td>
</tr>
<tr class="odd">
<td>pid_t</td>
<td>进程ID和进程组ID</td>
</tr>
<tr class="even">
<td>pthread_t</td>
<td>线程ID</td>
</tr>
<tr class="odd">
<td>ptrdiff_t</td>
<td>两个指针相减的结果</td>
</tr>
<tr class="even">
<td>rlim_t</td>
<td>资源限制</td>
</tr>
<tr class="odd">
<td>sig_atomic_t</td>
<td>能原子性地访问的数据类型</td>
</tr>
<tr class="even">
<td>sigset_t</td>
<td>信号集</td>
</tr>
<tr class="odd">
<td>size_t</td>
<td>对象</td>
</tr>
<tr class="even">
<td>ssize_t</td>
<td>返回字节计数的函数</td>
</tr>
<tr class="odd">
<td>time_t</td>
<td>日历时间的秒计数器</td>
</tr>
<tr class="even">
<td>uid_t</td>
<td>数值用户ID</td>
</tr>
<tr class="odd">
<td>wchar_t</td>
<td>能表示所有不同的字符码</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>APUE学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>UNIX</tag>
      </tags>
  </entry>
  <entry>
    <title>Haskell：理解惰性求值与运算符优先级</title>
    <url>/blog/2022/01/08/0033-Haskell:operator_and_lazy/</url>
    <content><![CDATA[<blockquote>
<p>做 <a class="link"   href="https://www.seas.upenn.edu/~cis194/spring13/hw/06-laziness.pdf" >CIS 194 HomeWork6<i class="fas fa-external-link-alt"></i></a>时遇到了各种思维方面的困难。试图通过梳理它们加深对运算符优先级和惰性求值的理解。</p>
</blockquote>
<span id="more"></span>
<h2 id="引言fibonacci数列">引言：Fibonacci数列</h2>
<p>斐波那契数列，相信大家都很熟悉了，每个人刚接触递归与动态规划的思想时候都会看到它的身影。其定义为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fib(1) = 1</span><br><span class="line">fib(2) = 1</span><br><span class="line">fib(n) = fib(n - 1) + fib(n - 2), n &gt; 2</span><br></pre></td></tr></table></figure>
<p>这在Haskell中是很容易实现的：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fib</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fib</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fib</span> <span class="number">2</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fib</span> n = fib (n - <span class="number">1</span>) + fib (n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="fib函数的递推实现">fib函数的递推实现</h2>
<p>不难看出，上面的实现非常自然，几乎与数学方式给出的定义一样。然而大家可能都知道，这种定义方式的计算效率是很低的，在过程式语言中可以引出DP思想：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> fibs[n] = &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        fibs[i] = fibs[i - <span class="number">1</span>] + fibs[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibs[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的计算方法将可能重复使用的资源记录了下来，使用少量空间换取了大量的时间。并且也很符合人的直觉。可以拆解成两步：</p>
<ol type="1">
<li>维护一个长度至少为n的数列。</li>
<li>取出数列中对应的元素。</li>
</ol>
<p>那么在Haskell这样的无副作用语言中如何实现对列表的维护呢？如果使用下面方式：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fibs</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">fibs</span> = map fib [<span class="number">1</span>..]</span><br></pre></td></tr></table></figure>
<p>则不仅无法使用这个列表记录已使用的计算，反而每一步都要耗费大量的计算资源。这里如果根据直觉实现递推，或许会实现出这样的东西：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fibs</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">fibs</span> = map fib&#x27; [<span class="number">1</span>..]</span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		fib&#x27; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">		fib&#x27; <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">		fib&#x27; n = fibs!!(n - <span class="number">1</span>) + fibs!!(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>然而，这样会寻致计算<code>!!</code>的时候试图求出<code>fib</code>的值，因此会进入一个死循环。不可行。</p>
<p>那么我们在<a class="link"   href="https://www.seas.upenn.edu/~cis194/spring13/lectures/06-laziness.html" >Lecture 6<i class="fas fa-external-link-alt"></i></a>中见过的<code>Data.Array</code>可以完成这个任务吗？答案是不行，它仅仅是一个对列表的封装，本身不支持处理无限列表。且此处并不需要使用映射。</p>
<p>黔驴技穷了，上网搜索解法，发现可以使用<code>zipWith</code>实现如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fibs</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">fibs</span> = <span class="number">1</span>:<span class="number">1</span>:zipWith (+) fibs (tail fibs)</span><br></pre></td></tr></table></figure>
<p>于是开始了我的迷惑之旅。</p>
<h2 id="惰性求值">惰性求值</h2>
<p>对于<code>fibs = 1:1:zipWith (+) fibs (tail fibs)</code>这种形式的定义，我简直闻所未闻。定义中不仅出现了自身，甚至出现了对自身的嵌套运算。将上式转换为C++形式可以帮助我们快速发现蹊跷：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1:1:zipWith (+) fibs (tail fibs) == (:) (1) ((:) (1) (zipWith (+) fibs (tail fibs)))</span></span><br><span class="line"><span class="function">list <span class="title">cons</span><span class="params">(Num i, list tail)</span></span>;</span><br><span class="line"><span class="function">list <span class="title">zipWith</span><span class="params">(operation op, list a, list b)</span></span>;</span><br><span class="line"><span class="function">list <span class="title">tail</span><span class="params">(list l)</span></span>;</span><br><span class="line"><span class="function">list <span class="title">fibs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cons</span>(<span class="number">1</span>, <span class="built_in">cons</span>(<span class="number">1</span>, <span class="built_in">zipWith</span>(plus, <span class="built_in">fibs</span>(), <span class="built_in">tail</span>(<span class="built_in">fibs</span>()))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现一个很明显的问题，这个函数没有递归终止条件。而在C++这样的直接求值语言中，这会导致传参时无限递归，计算不出任何结果。然而对于惰性求值的Haskell而言，就不存在这个问题了，首先看看<code>zipWith</code>的定义：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">zipWith</span> :: (a-&gt;b-&gt;c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br><span class="line"><span class="title">zipWith</span> f = go</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    go [] _ = []</span><br><span class="line">    go _ [] = []</span><br><span class="line">    go (x:xs) (y:ys) = f x y : go xs ys</span><br></pre></td></tr></table></figure>
<p>由于这个函数没有用到如<code>!!</code>或<code>length</code>这类需要先将值计算出来的函数，符合惰性求值的作用条件，计算过程如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fibs</span> = <span class="number">1</span>:<span class="number">1</span>:zipWith (+) fibs (tail fibs)</span><br><span class="line"> == <span class="number">1</span>:<span class="number">1</span>:(go (<span class="number">1</span>: (<span class="number">1</span>:ys))</span><br><span class="line"> == <span class="number">1</span>:<span class="number">1</span>:((<span class="number">1</span> + <span class="number">1</span>) : xs : ys)</span><br><span class="line"> == <span class="number">1</span>:<span class="number">1</span>:((<span class="number">1</span> + <span class="number">1</span>) : tail fibs : tail (tail fibs))</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>可以总结出一条规律，要想使用惰性求值特性，就要使每一个计算步骤都不依赖完整的结果。</p>
<h2 id="谈谈运算符优先级">谈谈运算符优先级</h2>
<ul>
<li>Why not <code>fib = 1:1:(zipWith (+) fibs (tail fibs))</code></li>
</ul>
<p>这里的答案是<code>:</code>运算符是<code>cons</code>函数的语法糖，而<code>[emelments]</code>又是<code>:</code>的语法糖，关系如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == <span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>:[] == cons <span class="number">1</span> (cons <span class="number">2</span> (cons <span class="number">3</span> []))</span><br></pre></td></tr></table></figure>
<p>不难看出，为满足这个关系，<code>:</code>是一个右结合运算符。因此：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>:<span class="number">1</span>:(zipWith (+) fibs (tail fibs))</span><br><span class="line">== <span class="number">1</span>:(<span class="number">1</span>:((zipWith (+) fibs (tail fibs))))</span><br><span class="line">== <span class="number">1</span>:(<span class="number">1</span>:(zipWith (+) fibs (tail fibs)))</span><br><span class="line">== <span class="number">1</span>:<span class="number">1</span>:zipWith (+) fibs (tail fibs)</span><br></pre></td></tr></table></figure>
<p>之所以可以将<code>zipWith (+) fibs (tail fibs)</code>看做一个整体，是因为前缀函数调用的优先级高于中缀函数。</p>
<p>而不可以将<code>zipWith (+) fibs (tail fibs)</code>写做<code>zipWith (+) fibs tail fibs</code>，则是因为前缀函数调用优先级相同，且从左向右开始分析。因此上式等价于：<code>(zipWith (+) fibs tail) fibs</code>。</p>
<ul>
<li>Why not <code>fib = 1:1:zipWith (+) fibs $ tail fibs</code></li>
</ul>
<p>根据<code>$</code>运算符的作用是“<em>省略之后的括号</em>”来理解，这样写是可行的，然而这个理解是错误的。<code>$</code>运算符真正的作用是，将<strong>前后两部分都括上括号</strong>。因此上式转换为前缀写法后，错误就显而易见了，如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">($) (<span class="number">1</span>:<span class="number">1</span>:zipWith (+) fibs) (tail fibs)</span><br><span class="line">($) (cons <span class="number">1</span> (cons <span class="number">1</span> (zipWith (+) fibs))) (tail fibs)</span><br></pre></td></tr></table></figure>
<p>值得一提的是<code>$</code>的函数原型：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">($) :: (a -&gt; b) -&gt; a -&gt; b</span><br><span class="line">($) = id</span><br></pre></td></tr></table></figure>
<p>即接受一个函数，然后返回该函数本身。唯一的作用就是用其极低的运算优先级来省略多余的括号。没错，是极低的优先级，这有违直觉。因为直觉上似乎是：<em>“<code>$</code>运算符以极高的运算优先级为它的左右两边加上了括号”</em>。然而我们不妨思考一下，括号的意义正是优先运算，为了让自己的左右都先于自己运算，它的优先级必然很低。（事实上<code>$</code>的运算优先级是最低的一级，参见后附优先级表。）</p>
<p>考虑以下例子：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> :: a -&gt; b</span><br><span class="line"><span class="title">g</span> :: c -&gt; a</span><br><span class="line"></span><br><span class="line"><span class="title">f</span> g x == (f g) x</span><br><span class="line"><span class="title">f</span> $ g x /= ((f $) g) x</span><br><span class="line"><span class="title">map</span> + [<span class="number">1</span>] /= map (+) [<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>为什么同样是占据高优先级函数的参数位置，中缀运算符不会被当作参数传递呢？因为当我们使用中缀函数时，实际上表达式会被当作等价的前缀形式来处理，即：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f</span> $ g x == ($) (f) (g x) == ($ f) (g x) == f (g x) <span class="comment">-- 注意：当转换为前缀形式后，由于所有的函数都成为了前缀函数，不再有优先级一说。</span></span><br><span class="line"><span class="title">map</span> + [<span class="number">1</span>] == (+) (map) ([<span class="number">1</span>]) == (+ map) ([<span class="number">1</span>]) <span class="comment">-- 错误：函数(+ map)参数类型与[]不匹配。</span></span><br></pre></td></tr></table></figure>
<p>上例也可看出，所谓的优先级只在中缀表达式到前缀表达式的转换中有效，即：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">(f.g) x == ((.) f g) (x)</span><br><span class="line"><span class="title">f</span>.g $ x == ($) (f.g) (x) == ($) ((.) f g) (x)</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> + <span class="number">4</span> </span><br><span class="line">  == (+) (<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>) + (<span class="number">4</span>) </span><br><span class="line">  == (+) ((+) (<span class="number">1</span>) (<span class="number">2</span> * <span class="number">3</span>)) (<span class="number">4</span>) </span><br><span class="line">  == (+) ((+) (<span class="number">1</span>) ((*) <span class="number">2</span> <span class="number">3</span>)) <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>这里又可看出一个有趣的规律：优先级不同的运算符先转换较低级的，同级的运算符则根据结合律来决定顺序（转换顺序与结合顺序相反）。即后运算的先转换。</p>
<p>这种将中缀函数转换成前缀的方式可以帮助我们理解两个内容：</p>
<ol type="1">
<li>运算符优先级。</li>
<li>引用中缀函数时要加上括号。</li>
</ol>
<h2 id="附运算符优先级表">附：运算符优先级表</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+----------------------+-----------------------+-------------------+</span><br><span class="line">| Prec-  |   Left associative   |    Non-associative    | Right associative |</span><br><span class="line">| edence |      operators       |       operators       |    operators      |</span><br><span class="line">+--------+----------------------+-----------------------+-------------------+</span><br><span class="line">| 9      | !!                   |                       | .                 |</span><br><span class="line">| 8      |                      |                       | ^, ^^, **         |</span><br><span class="line">| 7      | *, /, `div`,         |                       |                   |</span><br><span class="line">|        | `mod`, `rem`, `quot` |                       |                   |</span><br><span class="line">| 6      | +, -                 |                       |                   |</span><br><span class="line">| 5      |                      |                       | :, ++             |</span><br><span class="line">| 4      |                      | ==, /=, &lt;, &lt;=, &gt;, &gt;=, |                   |</span><br><span class="line">|        |                      | `elem`, `notElem`     |                   |</span><br><span class="line">| 3      |                      |                       | &amp;&amp;                |</span><br><span class="line">| 2      |                      |                       | ||                |</span><br><span class="line">| 1      | &gt;&gt;, &gt;&gt;=              |                       |                   |</span><br><span class="line">| 0      |                      |                       | $, $!, `seq`      |</span><br><span class="line">+--------+----------------------+-----------------------+-------------------+</span><br></pre></td></tr></table></figure>
<ul>
<li>函数调用拥有更高的优先级，可以认为其优先级是10。</li>
</ul>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的Haskell（七）——折叠与幺半群</title>
    <url>/blog/2022/01/10/0034-Re0:Haskell_07/</url>
    <content><![CDATA[<blockquote>
<p>系列第七篇，介绍了更一般性的折叠以及幺半群。</p>
</blockquote>
<span id="more"></span>
<h2 id="折叠又见折叠">折叠，又见折叠</h2>
<p>我们已经知道怎么折叠一个列表了，但我们也可以将折叠思想更一般性地用于其它数据类型。比如对于下面这个二叉树，考虑一些函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span></span></span><br><span class="line">            | <span class="type">Node</span> (<span class="type">Tree</span> a) a (<span class="type">Tree</span> a)</span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Eq</span>)</span><br><span class="line">    </span><br><span class="line"><span class="title">leaf</span> :: a -&gt; <span class="type">Tree</span> a</span><br><span class="line"><span class="title">leaf</span> x = <span class="type">Node</span> <span class="type">Empty</span> x <span class="type">Empty</span></span><br></pre></td></tr></table></figure>
<p>写一个函数来计算树的节点数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeSize</span> :: <span class="type">Tree</span> a -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeSize</span> <span class="type">Empty</span> = <span class="number">0</span></span><br><span class="line"><span class="title">treeSize</span> (<span class="type">Node</span> l _ r) = <span class="number">1</span> + treeSize l + treeSize r</span><br></pre></td></tr></table></figure>
<p>计算一个<code>Tree Integer</code>的数据总和：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeSum</span> :: <span class="type">Tree</span> <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeSum</span> <span class="type">Empty</span> = <span class="number">0</span></span><br><span class="line"><span class="title">treeSum</span> (<span class="type">Node</span> l x r) = x + treeSum l + treeSum r</span><br></pre></td></tr></table></figure>
<p>计算树的高度：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeDepth</span> :: <span class="type">Tree</span> a -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeDepth</span> <span class="type">Empty</span> = <span class="number">0</span></span><br><span class="line"><span class="title">treeDepth</span> (<span class="type">Node</span> l _ r) = <span class="number">1</span> + max (treeDepth l) (treeDepth r)</span><br></pre></td></tr></table></figure>
<p>将树内元素展开成一个列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">flatten</span> :: <span class="type">Tree</span> a -&gt; [a]</span><br><span class="line"><span class="title">flatten</span> <span class="type">Empty</span> = []</span><br><span class="line"><span class="title">flatten</span> (<span class="type">Node</span> l x r) = flatten l ++ [x] ++ flatten r</span><br></pre></td></tr></table></figure>
<p>你是否从中看出一些相似的模式？对于上述每个函数，有：</p>
<ol type="1">
<li>接受一个树作为输入</li>
<li>对输入的树进行模式匹配</li>
<li>对于<code>Empty</code>节点，返回一个简单的值</li>
<li>对于<code>Node</code>节点：
<ol type="1">
<li>递归的处理左右子树</li>
<li>以某种方式组合递归的结果，并生成最终结果</li>
</ol></li>
</ol>
<p>作为一名好的程序员，我们总是希望将抽象出重复的模式。首先需要将各例子中变化的部分作为参数，它们是：</p>
<ol type="1">
<li>返回类型</li>
<li>空节点的值</li>
<li>组合递归调用的方式</li>
</ol>
<p>设树处理的类型为<code>a</code>，函数的返回类型为<code>b</code>，有：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeFold</span> :: b -&gt; (b -&gt; a -&gt; b -&gt; b) -&gt; <span class="type">Tree</span> a -&gt; b</span><br><span class="line"><span class="title">treeFold</span> e _ <span class="type">Empty</span> = e</span><br><span class="line"><span class="title">treeFold</span> e f (<span class="type">Node</span> l x r) = f (treeFold e f l) x (treeFold e f r)</span><br></pre></td></tr></table></figure>
<p>有了这个折叠函数，我们就可以更轻易地定义上面的几个例子了：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeSize&#x27;</span> :: <span class="type">Tree</span> a -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeSize&#x27;</span> = treeFold <span class="number">0</span> (\l _ r -&gt; l + <span class="number">1</span> + r)</span><br><span class="line"></span><br><span class="line"><span class="title">treeSum&#x27;</span> :: <span class="type">Tree</span> <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeSum&#x27;</span> = treeFold <span class="number">0</span> (\l x r -&gt; l + x + r)</span><br><span class="line"></span><br><span class="line"><span class="title">treeDepth&#x27;</span> :: <span class="type">Tree</span> a -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeDepth&#x27;</span> = treeFold <span class="number">0</span> (\l _ r -&gt; <span class="number">1</span> + max l r)</span><br><span class="line"></span><br><span class="line"><span class="title">flatten&#x27;</span> :: <span class="type">Tree</span> a -&gt; [a]</span><br><span class="line"><span class="title">flatten&#x27;</span> = treeFold [] (\l x r -&gt; l ++ [x] ++ r)</span><br></pre></td></tr></table></figure>
<p>我们也可以轻松实现其它的树折叠函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">treeMax</span> :: (<span class="type">Ord</span> a, <span class="type">Bounded</span> a) =&gt; <span class="type">Tree</span> a -&gt; a</span><br><span class="line"><span class="title">treeMax</span> = treeFold minBound (\l x r -&gt; max l $ max x r)</span><br></pre></td></tr></table></figure>
<p>这样感觉就好多了，去除了大量重复模式，非常优雅。</p>
<h3 id="折叠表达式">折叠表达式</h3>
<p>回想下Homework5中的<code>ExprT</code>类型和相应的<code>eval</code>函数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">ExprT</span> = <span class="type">Lit</span> <span class="type">Integer</span></span></span><br><span class="line">           | <span class="type">Add</span> <span class="type">ExprT</span> <span class="type">ExprT</span></span><br><span class="line">           | <span class="type">Mul</span> <span class="type">ExprT</span> <span class="type">ExprT</span></span><br><span class="line"></span><br><span class="line"><span class="title">eval</span> :: <span class="type">ExprT</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">eval</span> (<span class="type">Lit</span> i) = i</span><br><span class="line"><span class="title">eval</span> (<span class="type">Add</span> a b) = eval a + eval b</span><br><span class="line"><span class="title">eval</span> (<span class="type">Mul</span> a b) = eval a * eval b</span><br></pre></td></tr></table></figure>
<p>看着就欠抽象！来试试这样写：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">exprTFold</span> :: (<span class="type">Integer</span> -&gt; b) -&gt; (b -&gt; b -&gt; b) -&gt; (b -&gt; b -&gt; b) -&gt; <span class="type">ExprT</span> -&gt; b</span><br><span class="line"><span class="title">exprTFold</span> f _ _ (<span class="type">Lit</span> i) = f i</span><br><span class="line"><span class="title">exprTFold</span> f g h (<span class="type">Add</span> a b) = g (exprTFold f g h a) (exprTFold f g h b)</span><br><span class="line"><span class="title">exprTFold</span> f g h (<span class="type">Mul</span> a b) = h (exprTFold f g h a) (exprTFold f g h b)</span><br><span class="line"></span><br><span class="line"><span class="title">eval&#x27;</span> :: <span class="type">ExprT</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">eval&#x27;</span> exprTFold id (+) (*)</span><br></pre></td></tr></table></figure>
<p>现在我们可以做一些别的事，比如计算表达式中数字的个数：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">numLiterals</span> :: <span class="type">ExprT</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">numLiterals</span> = exprTFold (const <span class="number">1</span>) (+) (+)</span><br></pre></td></tr></table></figure>
<h3 id="普适的折叠">普适的折叠</h3>
<p>这里透露的信息是我们可以为很多（并非全部）数据类型创建折叠操作。作用于<code>T</code>类型的折叠操作会为<code>T</code>的每个构造器取一个（高层面的）参数，考虑怎么把构造器中的数据类型转换成返回值的类型——直到所有递归过程被折叠成一个结果。</p>
<p>很多我们可能想为<code>T</code>实现的的函数在折叠操作下会很易于表达。</p>
<h2 id="幺半群monoids">幺半群（Monoids）</h2>
<p>离散数学里接触过幺半群的概念，定义如下：</p>
<ul>
<li>幺半群是一个带有二元运算`* : M * M -&gt; M<code>的集合</code>M`，其符合以下公理
<ul>
<li>结合律：对任意<code>M</code>内的元素<code>a</code>、<code>b</code>、<code>c</code>，有<code>(a * b) * c = a * (b * c)</code></li>
<li>单位元：存在<code>M</code>内的元素<code>e</code>，使任一存于<code>M</code>内的元素<code>a</code>满足<code>a * e = e * a = a</code></li>
<li>封闭性（内含于二元运算中）：对任意在<code>M</code>内的元素<code>a</code>、<code>b</code>，<code>a*b</code>也在<code>M</code>中</li>
</ul></li>
</ul>
<p>Haskell中幺半群是一种基本类型类，定义在<code>Data.Monoid</code>模块里：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monoid</span> m <span class="keyword">where</span></span></span><br><span class="line">    mempty  :: m</span><br><span class="line">    mappend :: m -&gt; m -&gt; m</span><br><span class="line">    </span><br><span class="line">    mconcat :: [m] -&gt; m</span><br><span class="line">    mconcat = foldr mappend mempty</span><br><span class="line"></span><br><span class="line">(&lt;&gt;) <span class="type">Monoid</span> m =&gt; m -&gt; m -&gt; m</span><br><span class="line">(&lt;&gt;) = mappend</span><br></pre></td></tr></table></figure>
<p>其中<code>mempty</code>相当于单位元的定义，<code>mappend</code>与其符号简写<code>&lt;&gt;</code>为幺半群中的二元运算。<code>mconcat</code>用于将整个列表折叠成一个值，默认使用<code>foldr</code>来实现，但由于对某种特定的<code>Monoid</code>类型可能存在更高效的实现，模块中提供了它的定义供修改。</p>
<p>正如之前提到的幺半群的性质，对任何<code>Monoid</code>类型的值<code>x</code>、<code>y</code>、<code>z</code>有：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">mempty</span> &lt;&gt; x = x</span><br><span class="line"><span class="title">x</span> &lt;&gt; mempty = x</span><br><span class="line">(x &lt;&gt; y) &lt;&gt; z = x &lt;&gt; (y &lt;&gt; z)</span><br></pre></td></tr></table></figure>
<h3 id="monoid-实例">Monoid 实例</h3>
<p>在知道这些概念后就会发现，<code>Monoid</code>无处不在。比如一个列表：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> [a] <span class="keyword">where</span></span></span><br><span class="line">    mempty  = []</span><br><span class="line">    mappend = (++)</span><br></pre></td></tr></table></figure>
<p>考虑下会发现这是完美符合<code>Monoid</code>性质的。同理可以发现数值类型的加法和乘法也完美符合<code>Monoid</code>的性质。但要怎样分别实现数值加法和乘法的<code>Monoid</code>呢？我们不能在一个类型类中创建同一个类型的两个不同实例，即以下方法：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span></span><br><span class="line">    mempty  = <span class="number">0</span></span><br><span class="line">    mappend = (+)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span></span><br><span class="line">    mempty  = <span class="number">0</span></span><br><span class="line">    mappend = (*)</span><br></pre></td></tr></table></figure>
<p>是非法的，因为有重复定义。为解决这个问题，我们可以创建两个新类型作为数值类型的不同封装：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Sum</span> a = <span class="type">Sum</span> a</span></span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Num</span>, <span class="type">Show</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">getSum</span> :: <span class="type">Sum</span> a -&gt; a</span><br><span class="line"><span class="title">getSum</span> (<span class="type">Sum</span> a) = a</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty  = <span class="type">Sum</span> <span class="number">0</span></span><br><span class="line">    mappend = (+)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Product</span> a = <span class="type">Product</span> a</span></span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Num</span>, <span class="type">Show</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">getProduct</span> :: <span class="type">Product</span> a -&gt; a</span><br><span class="line"><span class="title">getProduct</span> (<span class="type">Product</span> a) = a</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty  = <span class="type">Product</span> <span class="number">0</span></span><br><span class="line">    mappend = (*)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类型的定义方式：</p>
<p>data: ADT</p>
<p>newtype: 单构造器的零代价ADT</p>
<p>type: 类型别名</p>
</blockquote>
<p>在上述定义后，我们可以使用以下方式计算一个数列中所有元素的乘积：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">lst</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">lst</span> = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">423</span>,<span class="number">99</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">prod</span> :: <span class="type">Integer</span></span><br><span class="line"><span class="title">prod</span> = getProduct . mappend . map <span class="type">Product</span> $ lst</span><br></pre></td></tr></table></figure>
<p>当然这个例子显得舍近求远，非常地蠢。但这个模式可以方便的说明<code>Monoid</code>的应用方式。</p>
<p>两个可以作为<code>Monoid</code>实例的类组成的<code>Pair</code>也可以作为<code>Monoid</code>的实例，如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Monoid</span> <span class="title">a</span>, <span class="type">Monoid</span> <span class="title">b</span>) =&gt; <span class="type">Monoid</span> (<span class="title">a</span>, <span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty  = (mempty, mempty)</span><br><span class="line">    (a,b) `mappend` (c,d) = (a `mappend` c, b `mappend` d)</span><br></pre></td></tr></table></figure>
<p>试图构造一个<code>Bool</code>类型的<code>Monoid</code>，如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Or</span> = <span class="type">Or</span> &#123;<span class="title">getOr</span> :: <span class="type">Bool</span>&#125;</span></span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Or</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Or</span> <span class="type">False</span> </span><br><span class="line">    <span class="type">Or</span> x `mappend` <span class="type">Or</span> y = <span class="type">Or</span> $ x || y</span><br></pre></td></tr></table></figure>
<p>这个定义确实没错，但是无法通过语法检查。原因是<code>No instance for (Semigroup Or)</code>。</p>
<h2 id="补充半群semigroup">补充：半群（Semigroup）</h2>
<p>上面的报错信息意为<code>Or</code>类型不是<code>Semigroup</code>类型类的实例，而Semigroup是半群的意思。这是怎么回事呢？</p>
<p>我们知道，幺半群就是有单位元的半群，则半群定义为一个带有符合结合律的二元运算符<code>* : M * M -&gt; M</code>的集合。因此Haskell把幺半群的二元运算符部分抽象出来作为半群类型类，如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) :: a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>而幺半群的真实定义则为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span></span><br><span class="line">    mempty  :: a</span><br><span class="line">    mappend :: a -&gt; a -&gt; a</span><br><span class="line">    mconcat :: foldr mappend mempty</span><br><span class="line">    </span><br><span class="line">(&lt;&gt;) <span class="type">Monoid</span> m =&gt; m -&gt; m -&gt; m</span><br><span class="line">(&lt;&gt;) = mappend</span><br></pre></td></tr></table></figure>
<p>关于<code>&lt;&gt;</code>与<code>mappend</code>的关系更准确的说法是，<code>mappend</code>是<code>&lt;&gt;</code>的别名。因而，<code>&lt;&gt;</code>才是主要定义，就是说一个类要成为<code>Monoid</code>的实例就必须也成为<code>Semigroup</code>的实例。则<code>Bool</code>类型的<code>Monoid</code>应定义为：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Or</span> = <span class="type">Or</span> &#123;<span class="title">getOr</span> :: <span class="type">Bool</span>&#125;</span></span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Or</span> <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Or</span> x &lt;&gt; <span class="type">Or</span> y = <span class="type">Or</span> $ x || y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Or</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Or</span> <span class="type">False</span> </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">And</span> = <span class="type">And</span> &#123;<span class="title">getAnd</span> :: <span class="type">Bool</span>&#125;</span></span><br><span class="line">    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">And</span> <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">And</span> x &lt;&gt; <span class="type">And</span> y = <span class="type">And</span> $ x &amp;&amp; y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">And</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">And</span> <span class="type">True</span></span><br></pre></td></tr></table></figure>
<p>甚至可以实现函数类型的<code>Monoid</code>：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Dot</span> a = <span class="type">Dot</span> &#123;<span class="title">run</span> :: <span class="title">a</span> -&gt; <span class="title">a</span>&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">Dot</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Dot</span> x &lt;&gt; <span class="type">Dot</span> y = <span class="type">Dot</span> $ x . y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">Dot</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Dot</span> id</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>从零开始的Haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>CF-R765-B题解</title>
    <url>/blog/2022/01/13/0035-CF-R765-B/</url>
    <content><![CDATA[<blockquote>
<p><a class="link" href="https://codeforces.com/contest/1625">Codeforces Round #765<i class="fas fa-external-link-alt"></i></a>被橄榄了。但B与C两题都刚好处在有思路而没解出来的难度，是很好的学习机会。</p>
</blockquote>
<span id="more"></span>
<h1 id="section"></h1>
<h2 id="题目描述">题目描述</h2>
<p>Elementary Particles</p>
<p>Martians(火星人) are actively engaged(吸引，卷入) in interplanetary trade. Olymp City, the Martian city known for its spaceport, has become a place where goods from all the corners of our Galaxy come. To deliver even more freight(货物；运费) from faraway planets, Martians need fast spaceships.</p>
<p>A group of scientists conducts experiments to build a fast engine for the new spaceship. In the current experiment, there are <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> elementary(基本的；元素的) particles, the <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>-th of them has type <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>.</p>
<p>Denote <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span> subsegment of the particle sequence <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.52ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6418 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1354.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1799.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2764.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3209.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4548.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4992.8,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6029,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> as a sequence <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.68ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6930.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g><g data-mml-node="mo" transform="translate(1211.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1656.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(298,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1076,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3382.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3827.5,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5166.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5610.8,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6541.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> for some left bound <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container></span> and right bound <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.015ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7078.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(840,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1617.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2673.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(3249.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4305.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5033.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(6089.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6689.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>. For instance, the sequence (1 4 2 8 5 7) for <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.823ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2131.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1631.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span> and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 2284.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1784.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span> has the sequence (4 2 8) as a subsegment. <strong>Two subsegments are considered different if at least one bound of those subsegments differs</strong>.</p>
<p>Note that the <strong>subsegments can be equal as sequences but still considered different.</strong> For example, consider the sequence (1 1 1 1 1) and two of its subsegments: one with <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.823ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2131.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1631.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="1.69ex" role="img" focusable="false" viewBox="0 -665 2284.6 747"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1784.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span> and another with <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.823ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2131.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1631.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span> and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 2284.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(728.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1784.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span>. Both subsegments are equal to (1 1 1), but still considered different, as their left and right bounds differ.</p>
<p>The scientists want to conduct(指导；引导；指挥) a reaction(反应) to <strong>get two different subsegments of the same length.</strong> Denote this length <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span>. The resulting pair of subsegments must be <strong>harmonious</strong>, i. e. for some <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.665ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5156.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(734,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1511.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2567.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3190.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4246.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4767.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> it must be true that the types of particles on the <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>-th position are the same for these two subsegments. For example, the pair (1 7 3) and (4 7 8) is harmonious, as both subsegments have 7 on the second position. The pair (1 2 3) and (3 1 2) is not harmonious.</p>
<p>The longer are harmonious subsegments, the more chances for the scientists to design a fast engine. So, they asked you to <strong>calculate the maximal possible length of harmonious pair made of different subsegments.</strong></p>
<h3 id="input">Input</h3>
<p>The first line contains an integer <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="25.329ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11195.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(750,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1527.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2583.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3222.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4278.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(6555.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(7611.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(8250.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(9306.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(10806.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> — the number of test cases. The following are descriptions of the test cases.</p>
<p>The first line contains an integer <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="18.428ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8145.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(989,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1766.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2822.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3700.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(4756.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path></g><g data-mml-node="mo" transform="translate(7756.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> — the amount of elementary particles in the sequence.</p>
<p>The second line contains <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> integers <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="19.586ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8657 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(856,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1245,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2022.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(3078.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4212.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(5268,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path></g><g data-mml-node="mo" transform="translate(8268,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> — types of elementary particles.</p>
<p>It is guaranteed that the sum of <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> over all test cases does not exceed <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="6.016ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 2659 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msup" transform="translate(1222.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container></span>.</p>
<h3 id="output">Output</h3>
<p>For each test, print a single integer, maximal possible length of harmonious pair made of different subsegments. If such pair does not exist, print <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> instead.</p>
<h3 id="example">Example</h3>
<p>input: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">7</span><br><span class="line">3 1 5 2 1 3 4</span><br><span class="line">6</span><br><span class="line">1 1 1 1 1 1</span><br><span class="line">6</span><br><span class="line">1 4 2 8 5 7</span><br><span class="line">2</span><br><span class="line">15 15</span><br></pre></td></tr></table></figure></p>
<p>output: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">-1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p>
<h2 id="解释">解释</h2>
<p>给定一个序列，找出两个连续子序列，满足：</p>
<ol type="1">
<li>两个子序列的在原序列中的位置不同，可以重叠但不能相等。</li>
<li>两个子序列至少有一个相同位置的元素相同。相同位置可以理解为数组下标，即要求至少存在一个<code>i</code>，使得<code>a[i]=b[i]</code>成立。</li>
<li>两个子序列长度相等，且为所有符合要求的子序列组中最长的。</li>
</ol>
<p>若存在这个的子序列组，输出它的长度。否则输出<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>。</p>
<h2 id="思路">思路</h2>
<h3 id="暴力">暴力</h3>
<p>遍历所有子序列，并比对它们是否符合条件。由于长度是相等的，对于每种可能的长度只要确定起点就确定了终点。因此遍历时间复杂度为：</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="27.654ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 12223 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2363.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(3085.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(3848.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4237.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4837.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5448.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(6170.9,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(6933.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7322.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7922.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8589.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(9645.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(10408.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(10797.4,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(11834,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>此外还得对每种遍历结果进行比对，时间复杂度<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。总时间复杂度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 2577.6 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。不用考虑了，没戏。</p>
<h3 id="贪心">贪心</h3>
<p>稍作思考，可以发现本题中只有序列起点会影响是否符合条件。因此可以使用下面的方式，逐步位移来比对序列，一但出现相同位置相同元素，则两序列重叠部分即为最长的序列组。</p>
<p><img src="https://img.xilong.site/picgo/20220113231911.png"></p>
<p>此时时间复杂度就降低至：位移<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> ， 匹配<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> ，总时间复杂度<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。仍然不可接受，</p>
<p>这里发现实际上我们的要求就是通过最短的位移将一对相同的元素对上。那只要找到原序列中最短相同元素对就可以了。位移后的长度损失为两元素间距，侧最长序列组长度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="29.236ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 12922.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">原</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">序</text></g><g data-mml-node="mi" transform="translate(1800,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">列</text></g><g data-mml-node="mi" transform="translate(2700,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">长</text></g><g data-mml-node="mi" transform="translate(3600,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">度</text></g><g data-mml-node="mo" transform="translate(4722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5722.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">最</text></g><g data-mml-node="mi" transform="translate(6622.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">短</text></g><g data-mml-node="mi" transform="translate(7522.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">相</text></g><g data-mml-node="mi" transform="translate(8422.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">同</text></g><g data-mml-node="mi" transform="translate(9322.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">元</text></g><g data-mml-node="mi" transform="translate(10222.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">素</text></g><g data-mml-node="mi" transform="translate(11122.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(12022.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">距</text></g></g></g></svg></mjx-container></span>。</p>
<p>找最短相同元素对需要为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>元素进行一次<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>复杂度的遍历，则时间复杂度仍然是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。此时可以使用一个<code>map</code>记录下每个元素的最小元素对，然后只要一次搜索即可。时间复杂度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.052ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4001 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2535,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3012,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3612,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。可以接受了。</p>
<p>本题由于空间够大，可以将<code>map</code>换成数组，将时间复杂度降低到<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p>
<h2 id="代码实现">代码实现</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">unsigned</span> <span class="type">int</span> MAX = <span class="number">150005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储上个元素的位置</span></span><br><span class="line"><span class="type">int</span> l[MAX];</span><br><span class="line"><span class="comment">// 存储当前元素的位置</span></span><br><span class="line"><span class="type">int</span> r[MAX];</span><br><span class="line"><span class="comment">// 存储元素最小间距</span></span><br><span class="line"><span class="type">int</span> d[MAX]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; ++i) {</span><br><span class="line">        l[i] = <span class="number">0</span>; </span><br><span class="line">        r[i] = <span class="number">0</span>; </span><br><span class="line">        d[i] = MAX;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是第一个元素，则加入l。</span></span><br><span class="line">        <span class="comment">// 如果第二个则加入r并计算间距。</span></span><br><span class="line">        <span class="comment">// 否则更新位置并计算间距。</span></span><br><span class="line">        <span class="keyword">if</span> (l[tmp] == <span class="number">0</span>) {</span><br><span class="line">            l[tmp] = i;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (r[tmp] == <span class="number">0</span>) {</span><br><span class="line">            r[tmp] = i;</span><br><span class="line">            d[tmp] = <span class="built_in">min</span>(d[tmp], r[tmp] - l[tmp]);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            l[tmp] = r[tmp];</span><br><span class="line">            r[tmp] = i;</span><br><span class="line">            d[tmp] = <span class="built_in">min</span>(d[tmp], r[tmp] - l[tmp]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 因为没有结果时，输出将是n - m，且要求为-1，故置m为n+1。</span></span><br><span class="line">    <span class="type">int</span> m = n + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 使用最小的间距值来代替m。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX; ++i ) {</span><br><span class="line">        m = <span class="built_in">min</span>(d[i], m);</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; n - m &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">input</span>();</span><br><span class="line">        <span class="built_in">output</span>(); </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>枚举</tag>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Googletest进行单元测试：概念篇</title>
    <url>/blog/2022/03/11/0036-Googletest/</url>
    <content><![CDATA[<h2 id="googletest介绍">Googletest介绍</h2>
<p>Googletest是Google开发的C++测试框架，可以方便我们为代码编写测试。因为这个框架是基于公共的xUnit测试框架，有其它测试框架使用经验的人会觉得非常熟悉。即使没有接触过其它测试框架，也能在很短的时间内上手。</p>
<p>什么样的测试才是好的测试呢？Google给出的说法为：</p>
<ol type="1">
<li>测试应该是独立并且可复现，Debug一个受其它测试结果影响的测试无疑是非常痛苦的。Googletest对每个测试使用独立的对象运行，这样就能把它们隔离开。并且Googletest支持单独运行一个测试，以便在单个测试出错时快速Debug。</li>
<li>测试应试有良好的组织形式，并且能够反应出被测试代码的结构。Googletest将有关系的测试编成测试组，同一个测试组中的测试可以共享数据和子程序。这种共同模式容易识别，并且使测试方便维护。</li>
<li>测试应该可移殖且可复用。Googletest是一个跨多平台框架。</li>
<li>测试失败时应该提供尽可能多的关于导致失败的问题的信息。Googletest在测试失败时会继续执行下一个测试，而不是直接退出。</li>
<li>测试框架应该将测试编写者从各种烦琐事务中解放出来，使他们能专注于测试内容。Googletest自动运行所有已定义的测试，不需要用户将它们按顺序排列。</li>
<li>测试应该足够快。Googletest可以复用共享的资源，代价很低。</li>
</ol>
<h2 id="一个命名上的坑">一个命名上的坑</h2>
<p>由于一些历史原因，Googletest使用<code>TestCase</code>来表示多个有关系的<code>Test</code>组成的组。而使用<code>Test</code>表示单次测试。</p>
<p>这就有坑了，因为一般单次测试是使用<em>Test Case</em>这个术语表示，通常译为测试用例。也就是说我们通常所说的测试用例其实在Googletest中叫做<code>Test</code>，而Googletest中的<code>TestCase</code>是多个测试用例组成的一个组。</p>
<p>为了弥补这个问题，Google方面推出了一个新的API名称<code>TestSuite</code>来取代<code>TestCase</code>。现在的语义下，<code>Test</code>表示测试用例，而<code>TestSuite</code>表示测试用例组。这样就避免了原来的岐义问题。</p>
<p>简单说，<code>TestSuite</code>=<code>TestCase(不建议使用)</code>表示测试组，<code>Test</code>表示单个测试。</p>
<h2 id="基础概念">基础概念</h2>
<p><em>* 文中加粗部分表示术语。</em></p>
<p>终于进入正题了，Googletest使用<strong>断言（Assertion）</strong>来进行测试。所谓断言是指一些陈述，用以检查指定条件是否为真。一个断言的结果可能是<strong>成功</strong>，<strong>非致命失败</strong>和<strong>致命失败</strong>三种，将出现致命失败时，结束当前函数，其它情况则继续运行。</p>
<p><strong>测试（Test）</strong>使用一些断言来验证代码的行为。如果测试崩溃或包含失败的断言，则测试<strong>失败</strong>。否则测试<strong>成功</strong>。</p>
<p><strong>测试组（TestSuite）</strong>包含一个或多个测试。你需要将测试组合成可以反映代码结构的测试组。当一个测试组中的多个测试需要共享资源或子程序时，你可以将它们加入一个<strong>测试固定类(test fixture class)</strong>中。</p>
<p>一个测试程序可以包含多个测试组。</p>
<p>了解这些概念后，我们就可以从断言开始建立我们的测试和测试组了。</p>
<h2 id="断言">断言</h2>
<p>Googletest的断言是一些可调用宏。我们使用一系列关于类或函数的行为的断言去测试它们。当一个断言失败时，会显示出源文件与失败发生的行，并且附上错误信息。你可以自己定义错误信息，它们会在Googletest错误信息的后面显示。</p>
<p>断言有两种不同的前缀，表示两类断言。以<code>ASSERT_</code>开头的断言失败时产生致命失败，它们退出当前测试函数。以<code>EXPECT_</code>开头的断言则产生非致命失败，它会显示出错误信息，并接着执行下一条断言。通常我们使用<code>EXPECT_*</code>版本的断言，因为这可以使我们获得更多的错误信息。</p>
<p><code>ASSERT</code>断言中断当前函数时，可能会跳过内存清理相关的代码，这将导致内存泄露。内存泄露不一定会导致危害性后果，但发生额外的堆检查(heap checker)错误时，就要往这方面留意一下了。</p>
<p>可以通过<code>&lt;&lt;</code>运算符简单地将自定义错误信息附在错误消息的末尾，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ASSERT_EQ</span>(x.<span class="built_in">site</span>(), y.<span class="built_in">size</span>()) &lt;&lt; <span class="string">&quot;Vectors x and y are of unequal length&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; x.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(x[i], y[i]) &lt;&lt; <span class="string">&quot;Vectors x and y differ at index &quot;</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>任何可被<code>ostream</code>接受的内容都可以被该输出流接受。Googletest提供了非常多样的断言，详见<a class="link"   href="https://google.github.io/googletest/reference/assertions.html" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p>
<h2 id="简单的测试">简单的测试</h2>
<p>使用测试分三步走：<del>请客、斩首、收下当狗</del></p>
<ol type="1">
<li>使用<code>TEST()</code>宏来定义一个测试函数，这些函数是原生的C++函数，没有返回值。</li>
<li>在这些函数中可以使用任何合法的C++语句，使用Googletest提供的断言来进行检查。</li>
<li>测试结果取决于断言的结果，如果存在失败的断言或测试函数崩溃，则整个测试的结果为失败，否则为成功。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TEST</span>(TestSuiteName, TestName) &#123;</span><br><span class="line">  <span class="comment">// test body</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>TEST()</code>宏的参数按照从普通到特殊的顺序给出，先是测试组名，再是测试用例名。这些名称都必须是合法的C++标识符，并且不能包括<code>_</code>。一个测试用例的全名取决于它所在的组名和它自己的名称。不同测试组中的用例可以拥有相同的名称。</p>
<p>例如，对一个简单的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Factorial</span><span class="params">(<span class="type">int</span> n)</span></span>; <span class="comment">//返回n的阶乘</span></span><br></pre></td></tr></table></figure>
<p>可以使用如下测试组：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对0的测试</span></span><br><span class="line"><span class="built_in">TEST</span>(FactorialTest, HandlesZeroInput) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in">Factorial</span>(<span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对正整数的测试</span></span><br><span class="line"><span class="built_in">TEST</span>(FactorialTest, HandlesPositiveInput) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in">Factorial</span>(<span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in">Factorial</span>(<span class="number">2</span>), <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in">Factorial</span>(<span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in">Factorial</span>(<span class="number">8</span>), <span class="number">40320</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Googletest使用测试组来组测试分组，因此你应该将逻辑上相关的测试放在一个组中。</p>
<h2 id="测试固定为多个测试使用同样的数据配置">测试固定：为多个测试使用同样的数据配置</h2>
<p>当你发现你正为多个测试编写相同的测试数据时，就可以使用测试固定类来复用这些相同的数据。</p>
<p>创建测试固定类的方法：</p>
<ol type="1">
<li>创建一个继承<code>::testing::Test</code>类的类。并将该类内部访问标签设为<code>protected:</code>，因为我们要从子类访问类型的信息。</li>
<li>在这个类中创建你想要重复使用的对象。</li>
<li>必要时，可以使用默认构造函数或<code>SetUp()</code>函数来构建这些对象。</li>
<li>必要时，使用析构函数或<code>TearDown()</code>函数来释放这些对象。</li>
<li>需要时可以为测试定义共享的子程序。</li>
</ol>
<p>当使用固定类时，用<code>TEST_F()</code>替代<code>TEST()</code>以访问共享的数据与子程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TEST_F</span>(TestFixtureName, TestName) &#123;</span><br><span class="line">  <span class="comment">// test body</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和<code>TEST()</code>相似，第一个参数表示测试组名，第二个参数表示测试名。但对于<code>TEST_F()</code>，第一个参数必须是测试固定类的名称。</p>
<p>C++的宏系统无法实现用一个宏定义同时支持两种测试类型，如果使用了错误的宏会导致编译错误。</p>
<p>每个测试将会使用一个新的测试固定类对象，在测试开始时构建，测试结束时析构。也就是说同一个测试组中的不同测试使用的测试固定类对象是不同的，在下一个测试开始前会重新创建一个测试固定类对象。因此在一个测试中对测试固定类对象的任何改变都不会影响下一个测试。</p>
<p>以下面这个类名为<code>Queue</code>的FIFO队列为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;  <span class="comment">// E是元素类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Queue</span>();</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Enqueue</span><span class="params">(<span class="type">const</span> E&amp; element)</span></span>;</span><br><span class="line">  <span class="function">E* <span class="title">Dequeue</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">site_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先我们来创建一个测试固定类，为它命名为<code>XxxTest</code>，其中<code>Xxx</code>是被测类的名字。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueueTest</span> : <span class="keyword">public</span> ::testing::Test &#123;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    q1_.<span class="built_in">Enqueue</span>(<span class="number">1</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">2</span>);</span><br><span class="line">    q3_.<span class="built_in">Enqueue</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// void TearDown() override &#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">  Queue&lt;<span class="type">int</span>&gt; q0_;</span><br><span class="line">  Queue&lt;<span class="type">int</span>&gt; q1_;</span><br><span class="line">  Queue&lt;<span class="type">int</span>&gt; q2_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本例中并不需要手动清理数据，因此不必定义<code>TearDown()</code>。</p>
<p>现在我们可以使用<code>TEST_F()</code>和这个固定类来编写测试了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TEST_F</span>(QueueTest, IsEmptyInitially) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(q0_.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTest, DequeueWorks) &#123;</span><br><span class="line">  <span class="type">int</span>* n = q0_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(n, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">  n = q1_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="comment">// 此处使用了ASSERT_*,因为空指针错误</span></span><br><span class="line">  <span class="comment">// 会使下面对指针操作的检查失去意义。</span></span><br><span class="line">  <span class="built_in">ASSERT_NE</span>(n, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(*n, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(q1_.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line">    </span><br><span class="line">  n = q2_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">ASSERT_NE</span>(n, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(*n, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(q2_.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行这些测试时，会进行如下操作：</p>
<ol type="1">
<li>Googletest构建一个<code>QueueTest</code>类型的对象，这里不妨称之为<code>t1</code>。</li>
<li><code>t1.SetUp()</code>初始化<code>t1</code>。</li>
<li>使用<code>t1</code>运行第一个测试（<code>IsEmptyInitially</code>）。</li>
<li><code>t1.TearDown()</code>，测试结束后清理<code>t1</code>。</li>
<li><code>t1</code>被析构掉。</li>
<li>对接下来的每个测试重复上述步骤。</li>
</ol>
<h2 id="启动测试">启动测试</h2>
<p><code>TEST()</code>与<code>TEST_F()</code>会隐式地在Googletest中注册它们定义的测试。因此，不同于许多其它C++测试框架，你无需手动为你定义的测试指定运行顺序。</p>
<p>你可以使用<code>RUN_ALL_TESTS()</code>宏来运行你的测试，当所有测试都成功时，它返回0，否则返回1。注意，<code>RUN_ALL_TESTS()</code>会运行程序链接的所有测试，这些测试可以来自不同的测试组甚至不同的源文件。</p>
<p>当运行<code>RUN_ALL_TESTS()</code>时：</p>
<ul>
<li>保存所有Googletest flag的状态。</li>
<li>为第一个测试创建测试固定对象。</li>
<li>使用<code>SetUp()</code>初始化这个对象。</li>
<li>使用这个对象来运行测试。</li>
<li>使用<code>TearDown()</code>清理这个对象。</li>
<li>删除这个对象。</li>
<li>恢复所有Googletest flag的状态。</li>
<li>为每个测试重复上述步骤。</li>
</ul>
<p>当发生致命失败时，后续步骤不会执行。</p>
<p><strong>！你不能忽视<code>RUN_ALL_TESTS()</code>的返回值，否则将引起编译错误。main()函数必须返回<code>RUN_ALL_TESTS()</code>的返回值。</strong></p>
<p><strong>！<code>RUN_ALL_TESTS()</code>只能调用一次。多次调用它与一些高级特性（如线程安全）冲突。因此不支持多次调用。</strong></p>
<h2 id="关于main函数">关于main()函数</h2>
<p>大部分用户不需要自己编写<code>main</code>函数，可以通过链接<code>gtest_main</code>来引入一个普适的<code>main</code>函数。这里也不过多介绍。</p>
<h2 id="已知限制">已知限制</h2>
<p>尽管Googletest设计为支持线程安全的。但只有在系统使用<code>pthreads</code>库时可以实现线程安全。因此目前在其它系统（如Windows）上多线程地使用Googletests是不安全的。</p>
]]></content>
      <categories>
        <category>技术杂记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>远景</title>
    <url>/blog/2019/08/18/L001-%E8%BF%9C%E6%99%AF/</url>
    <content><![CDATA[<p>在飞驰的列车中，远望 漆黑如墨的夜空， 交织的灯火，是闪烁在大地上的繁星。 <span id="more"></span></p>
<p>在徐行的渡轮上，远望 黄昏海面的落日， 粼粼的波光，是融化在海水中的太阳。</p>
<p>在宿舍的阳台内，远望 悬挂晴空的明月， 朦朦的晕影，是一丝若有若无的惆怅。</p>
<p>在沉沉的梦境里，远望 云雾缭绕的山岭， 每一株绿树，都是故乡的模样。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>虚构文学创作练习01——某人的婚纱照</title>
    <url>/blog/2019/08/18/L002-%E8%99%9A%E6%9E%84%E6%96%87%E5%AD%A6%E5%88%9B%E4%BD%9C%E7%BB%83%E4%B9%A001%E2%80%94%E2%80%94%E6%9F%90%E4%BA%BA%E7%9A%84%E5%A9%9A%E7%BA%B1%E7%85%A7/</url>
    <content><![CDATA[<p>山间，湖畔，微风轻拂，阳光正好。</p>
<p>阳光下，树木摇动着斑驳的影子，律动的草叶也镀上了一层朦胧的光晕。微风里，是粼粼波光，白衣两席。 <span id="more"></span> 这是他们的婚纱照。</p>
<p>他面对镜头站着，纯白色的礼服使得称不上帅气的他看上去十分挺拔。身体向一侧微微倾斜，略微低着头，微笑着，凝视着怀中的妻子，仿佛在欣赏一件艺术品。</p>
<p>她开心的笑着，略带羞涩地低着头，将视线投在手中的那捧玫瑰上。长而微卷的头发束在后面，一袭抹胸式的婚纱，将她柔美的肩颈与臂膀暴露在镜头下。带着不规则褶皱的蓬松裙子衬出了她纤细的腰肢，更为她平添了几分优雅。</p>
<p>墨绿的树林前，碧蓝的湖水畔，嫩绿的草甸上。快门开启又闭上，胶卷滚动了一下。两抹白，一捧红，就被这微小的活动永远的定格在时光里了。</p>
<p>他们的故事并不特别。</p>
<p>如同很多爱情故事，他们在学生时代相互倾慕。</p>
<p>然而，彼时的她如此耀眼，他自觉平凡，不敢接近。少女的矜持亦使她不肯主动前进，只是等待。</p>
<p>就这样等待着，终于，无尽的等待耗尽了她的耐心。</p>
<p>她选择离开，而他目送她离去，不发一语。在她即将从视野中消失时，终于，少年鼓起了勇气，不顾一切地追上了她。</p>
<p>于是他们互相表露心迹，几经离合与磨练，终于迎来了一场婚礼。</p>
<p>不同于很多爱情故事，上面那些事情一件都没有发生。他们之间并没有那么多轰轰烈烈，他们的故事一直平淡如水。</p>
<p>女孩等待着，耗尽了耐心。她最终主动迈出了一步。然后，两个人在一起就再没分开，几乎没有遇到任何阻力的一路走进了婚姻的殿堂。</p>
<p>于是，在一个平常的日子，他们互相交换了不算昂贵的戒指，缔结了一个永恒的约定。</p>
<p>于是，在一个普通的晴天，他们一起站在了一个山明水秀的地方，带着一个可怜的摄影师。</p>
<p>镜头里，他依然平凡，目光中却满是深情；她仍然羞涩，红润的脸庞上却满溢着幸福。</p>
<p>这并不是他们故事的开始。此前他们经历着各自的人生，在某一时刻和对方的命运轨迹发生交汇后又共度了一些时日；这也不是他们故事的结束。此后时光流逝，生活琐碎，终将磨尽他们炽热的爱情，让他们成为彼此生活中平淡的一部分。然而，毋庸置疑的，这一刻，将是他们生命中最为璀璨的几个瞬间之一，将作为他们之前种种幻梦的总结，也会成为他们之后面对生活的力量。</p>
<p>镜头里的这两个人，或许并不需要那些轰轰烈烈的传奇故事。</p>
<p>一如你我，一如平凡的大多数。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>虚构文学创作练习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚构文学创作练习02———意识</title>
    <url>/blog/2019/08/18/L003-%E8%99%9A%E6%9E%84%E6%96%87%E5%AD%A6%E5%88%9B%E4%BD%9C%E7%BB%83%E4%B9%A002%E2%80%94%E2%80%94%E6%84%8F%E8%AF%86/</url>
    <content><![CDATA[<p>潮湿，闷热。脸上和身上都黏糊糊的，十分难受。我睁开了眼睛。</p>
<p>映入眼帘的是熟悉的房间——我的房间，一切都是那样熟悉，物品摆放得井井有条，全都在该在的位置上。</p>
<p>除了我。 <span id="more"></span> 我是在书桌上醒来的，汗水已经将我浑身浸湿了。抬起手来想看看现在几点了，却总是无法读出表盘上的指针所代表的意义。</p>
<p>头脑一片混沌，放弃了读表。靠在椅子上大口大口地喘着粗气。</p>
<p>我的确是做了个梦，但是梦的内容到现在却一点也想不起来了，唯有那深深的焦虑还留在我的脑海里不愿散去。</p>
<p>焦虑顺着我的眼睛映射出去，在每一个物体上都投上了它的影子。看着这些物体，我感到无比烦躁。</p>
<p>一瓶枯萎的干花一下停住了我漫无目地扫荡着的视线。这些干花是曾经为朋友做的生日礼物剩下的材料，插在用完的墨水瓶里显得平淡无比，现在却不知道为何感觉如此特殊。本应干涸的瓶子里，满溢着焦虑。</p>
<p>它一定和我忘记的梦境有关系。</p>
<p>我拿起了这瓶花，端详着。光洁的玻璃壁，略显粗糙的刻字，瓶口整齐的螺旋纹，透露着廉价的气息。再看其内的干花，绿色的茎秆已经被时间染成了棕黄色，一副边角料的凄凉相。</p>
<p>与它们一同买回的另外的那些干花，却不是这样。它们此刻应该静静地插在一个精心装饰过的小花瓶里，与花瓶一起摆放在她房间里的某个地方。</p>
<p>我不禁回想起当初买回它们时，小心翼翼地修剪长度，小心翼翼地切割花瓶，为花瓶画上色彩——还记得是梵高的星月夜——再耐心地将花一枝一枝插进瓶中。最后我还为运输问题伤了一回脑筋，然后自制了一个礼品盒。</p>
<p>那天，我终于在她的生日把礼物交了出去，也终于失去了心里最后一丝希望。</p>
<p>我没有奢望能够收获她的芳心，只是想再次看见她真心的笑容。</p>
<p>我再次失败了。再次面对一个人乱了阵脚，再次眼睁睁看着这个人走远。</p>
<p>说不上来是什么样的感受，非要形容的话，大概是撕裂吧。现实与我一直以来的憧憬之间的撕裂，真实的我与我的伪装之间的撕裂。一次一次的被放逐在这些概念之间的鸿沟里，无处立足。</p>
<p>为什么不能给我一个微笑呢？</p>
<p>同样的画笔在另一个玻璃表面上来来回回，添上一抹一抹的色彩。那是很多年前，面对另一个离去的背影时所做的动作。那是一个不倒翁形状的饰品，现在已不在我身边，却也没有送到应该送的人手里。</p>
<p>所谓撕裂，便是这样。一旦掉进那个空洞，挣扎也好，放任自流也罢，都会漂到一片虚无里。总是希望有人能对我伸出援手，总是被那个寄托着希望的人抛弃。</p>
<p>一笔一笔的上着色，从多年前到现在。一下一下的修剪，在那瓶倒霉干花的茎上留下了贯穿时间的伤疤。我再次揣摩着手里的干花。感受着焦虑的侵袭。</p>
<p>我仍未记起我所遗忘的那个梦境。但我感受到了焦虑的源泉。</p>
<p>那焦虑是变化无常，是时间流逝，是无处容身，是求而不得。就像一个被人遗忘的变量，在等一个赋值。</p>
<p>时间流逝，我继续着漫长的等待。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>虚构文学创作练习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚构文学创作练习03——宠物</title>
    <url>/blog/2019/08/18/L004-%E8%99%9A%E6%9E%84%E6%96%87%E5%AD%A6%E5%88%9B%E4%BD%9C%E7%BB%83%E4%B9%A003%E2%80%94%E2%80%94%E5%AE%A0%E7%89%A9/</url>
    <content><![CDATA[<p>地平线慢慢地啃噬着太阳，原本洁白的云被阳光浸润得一片金黄。夜的阴霭渐渐升腾，使一切变得模糊不清。 <span id="more"></span> 黄昏里，一块黑影正缓缓地向我靠近。定睛看去，是一只黑猫。它踏着缓慢优雅的步子，漆黑的毛发随着身体的起伏微微律动，两只湛蓝色的眼睛在毛色的衬托下格外明亮。它走到我身边，用头蹭了蹭我的裤腿，然后抬头，睁大眼睛看着我，十分惹人怜爱。</p>
<p>我俯下身去将它抱起，抚摸着它的毛发，它眯着眼睛，看上去十分惬意。</p>
<p>大概两年前，也是在这条路上，我看见路边有一个蜷缩着的小毛球，走上前一看，这小家伙颤抖着乱蓬蓬的毛，满眼恐惧的看着我，却没有要逃走的意思。于是我试探着伸出手去触碰它，它看起来更惊恐了，不住的颤抖着。直到我触碰到它的毛发仍然没有逃脱的意思，就这样，它成为了我房间的第二个主人。</p>
<p>起先它很敏感，稍有风吹草动就躲到凳子底下，怎么也不出来。慢慢地，它找到了安全感。一天傍晚，它在相遇的那条路上等我。两年过去，这成为了每天雷打不动的仪式。</p>
<p>黄昏，我回家，它等我。</p>
<p>低头看着这个它，那慵懒的姿态中丝毫不见当年那个小毛球的影子。感受着它的身体随着呼吸一起一伏，我的心里渐渐温暖起来。陌生的城市里，朋友都成了屏幕上的文字，邻居也不过是一扇偶尔发出关门声的防盗门，陪伴着我的，只有这个毛茸茸的小东西。</p>
<p>回到家中，吃过晚饭，一如往常的坐在电脑前继续工作，它也一如往常的趴在桌子上睡觉。整个房间里一时只有键盘的噼啪声。 工作结束，伸个懒腰，打量着熟睡的它。见它趴在桌子上，微微蜷曲，睡姿显得端庄优雅。 这时我发现它前爪上和嘴角有些毛凝结了，有些起疑，细细察看下像是血渍，暗红色的血痂在黑色的毛发上非常不明显。</p>
<p>我顿时担心了起来，不顾它强烈的抗议，把它抱起来细细的检查了一遍，没有发现任何伤口。这样看来，应该不是它的血，安心之余，我感到非常疑惑。</p>
<p>次日清晨，我早早出了门，暗中偷窥着自己的屋子。几分钟后，仍不见它的身影，我倒先被自己的幼稚行为逗笑了。</p>
<p>半小时过去，我即将忍受不了枯燥的等待，那个熟悉的黑影终于出现了。它在门口的院子里上窜下跳。离得近了，才发现它在抓鸟。它的尝试最终以失败告终了，那鸟飞上了一颗树。又见这平日里温顺的小东西俯低身体，踩着一种十分猥琐的步子，悄无声息的爬上了那鸟停留的树。</p>
<p>一个猛扑，那鸟来不及反应，被连带着扑下了树。落地处离我不足十米，这猫狠狠的咬断了猎物的翅膀，湛蓝的眼里溢着嗜血的光。接着它亮出了爪子，玩弄着疯狂嘶鸣的猎物，直弄得那鸟开肠破肚，鲜血淋漓。这样的景象让我我有些反胃，这时它看见了我，原本满是邪恶与嗜虐的眼睛一下回复了温顺，它欢快的向我跑来，爪子在地上留下了一排血印子，像往常那样用头蹭了蹭我的裤腿。</p>
<p>看着它灵动的眼眸，我感到无比陌生，默默向家里走去。它跟在后面，似乎有些不解我为何没抱起它，但还是欢快的跟着我回到了家里。 一天里，我没有让它接近我。那双闪着凶光的眼睛，始终在我脑海里挥之不去。它不知道我为何如此，只好委屈的看着我。</p>
<p>晚上，它还在原地守着我，不明白我为什么对它如此冷淡。</p>
<p>“黑。”我呼唤着它的名字，朝他伸出了手。</p>
<p>它扑了过来，在我怀里撒娇似地蹭着。我轻轻抚摸着它，抱它去清洗干净。</p>
<p>不管怎么样，我怀里的它依然是那只温顺乖巧的小毛球。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>虚构文学创作练习</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何阅读一本书》脉络整理与方法论总结</title>
    <url>/blog/2019/08/18/L005-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<blockquote>
<p>读罢《如何阅读一本书》，自觉未能消化完整，故整理出的书籍结构以及方法论以备查阅。</p>
</blockquote>
<span id="more"></span>
<h2 id="书籍结构">书籍结构</h2>
<h3 id="序言交代本书动机为更多人提供阅读方法的指导">序言：交代本书动机——为更多人提供阅读方法的指导</h3>
<h3 id="第一部分阐述了阅读的意义种类与层次">第一部分：阐述了阅读的意义、种类与层次。</h3>
<pre><code>1. 指出了阅读相对于多媒体在提升理解力（学习能力）方面有不可替代的作用。
2. 将阅读动机分为三种：消遣、获取资讯、增进理解力，其中，仅有第三种动机
3. 适用本书的方法与探讨。提出了学习的两种形式：有人指导与无人指导，无论
4. 哪种形式的学习（阅读亦然，不过没有完全被动的阅读），越主动收益越大。
5. 且将阅读分为四种层次，并提出了可锻炼的方法。</code></pre>
<h3 id="第二部分">第二部分：</h3>
<pre><code>1. 提出了自我要求的概念。包括面对一本书应
2. 该提出的的几个问题：
    1. 这本书整体上在谈什么?
    2. 这本书的细节上在谈什么？
    3. 这本书的观点是否有道理，整体还是局部？
    4. 这本书与我有什么关系？
3. 以及做笔记的方法：
    1. 书籍上的笔记：标记，底线，转页符Cf。
    2. 书记外的笔记：
        - 结构笔记：全书架构，即这本书是怎样的一本书、在谈什么以及 作者引出结论的方式。
        - 概念笔记：弄清书籍的准确性和意义。
        - 辨证笔记：多本书概念碰撞的媒介。</code></pre>
<h3 id="第三部分">第三部分：</h3>
<p>介绍了检视阅读。提出了检视阅读的意义——在不了解一本书的时候快速掌握其主旨并判断其价值。不易弄懂的书籍可以使用粗读法。 ### 第四部分： 介绍了分析阅读——对一本书完全理解的阅读，并分类提出了不同书籍的阅读规则。 ### 第五部分： 介绍了主题阅读——通过将同主题内不同书籍的观点整合达到解决问题或辩论思想的目的的一种阅读，并讲述了主题阅读的运作步骤。 ### 结尾与附录： 提出阅读与心智成长之间的关系，鼓励更多人去阅读并列出了推荐书籍清单。</p>
<h2 id="方法论总结">方法论总结</h2>
<h3 id="检视阅读">检视阅读：</h3>
<ul>
<li>拿到一本书</li>
<li>阅读书名与序</li>
<li>研究目录</li>
<li>检视索引</li>
<li>读出版者的介绍</li>
<li>挑几篇与主题关联密切的篇章看</li>
<li>跳读一遍</li>
<li>有更多时间则略读一遍</li>
<li>结束阅读并做结构笔记</li>
</ul>
<h3 id="分析阅读基础仅适用于论说性作品">分析阅读(基础，仅适用于论说性作品)：</h3>
<ul>
<li>拿到一本书</li>
<li>检视阅读一遍</li>
<li>第一阶段：知道一本书在谈什么
<ul>
<li>规则1：分类</li>
<li>规则2：概括</li>
<li>规则3：拟出纲要以及主要部分的关联</li>
<li>规则4：找出作者的问题</li>
</ul></li>
<li>第二阶段：理解一本书的内容
<ul>
<li>规则5：理解并解释作者使用的关键词</li>
<li>规则6：从重要句子中找出作者主旨</li>
<li>规则7：找出作者的论述过程</li>
<li>规则8：确认作者已解决的问题、未解决的问题以及作者认为无法解决的问题</li>
</ul></li>
<li>第三阶段：公正的评价一本书
<ul>
<li>规则9：在理解前（或做好上述工作前）不要评论</li>
<li>规则10：不要为争辩而争辩</li>
<li>规则11：说出评论前分清真相与个人观点</li>
<li>规则12：批评作者的四个立场：知识不全、知识错误、逻辑不顺、论证不全</li>
</ul></li>
<li>结束阅读并作概念笔记</li>
</ul>
<h3 id="关于阅读不同种类的书籍的一些原则">关于阅读不同种类的书籍的一些原则：</h3>
<ol type="1">
<li>实用性书籍（方法或理论）：围绕四大基本问题，完全适用分析阅读。</li>
<li>文学与诗：专注经验与感官，思考这些经验带来的启示。基本步骤为：分类——完整而沉浸的体验一遍——概括大意——分析结构。</li>
<li>历史政治类：多看几个版本，不听一家之言；思考行为规律与普遍性；注意留心作者动机。</li>
<li>阅读科学与数学：不求甚解，专注论证与思想。</li>
<li>阅读哲学：参与到思考当中。</li>
<li>阅读社会科学：使用主题阅读，主题式阅读。 ### 主题阅读：</li>
</ol>
<ul>
<li>提出一个主题</li>
<li>列出书单，利用检视阅读筛选书籍</li>
<li>在相关书籍中找到相关章节</li>
<li>消化并用自己的语言翻译不同作者的关键词</li>
<li>厘清具体问题</li>
<li>界定归纳作者观点</li>
<li>分析讨论，解决问题</li>
<li>解决问题，作辨证笔记</li>
</ul>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>《故事》结构笔记</title>
    <url>/blog/2019/08/18/L006-%E6%95%85%E4%BA%8B%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>对《故事》做的结构笔记，将其划分为由内到外的六个层次：基本原理，核心原则，创作与故事的本质，故事的要素，故事设计原理，创作方法。</p>
</blockquote>
<span id="more"></span>
<h2 id="本书谈论故事的基本原理由原理-故事至方法-作者由内而外的展开论述">1、本书谈论故事的基本原理，由原理-故事至方法-作者由内而外的展开论述。</h2>
<h2 id="核心与统领序言">2、核心与统领：序言</h2>
<pre><code>1. 顺从原理而非规则
2. 展现形式而非公式
3. 围绕原始模型而非陈规俗套
4. 一丝不苟
5. 写作没有秘诀，银幕之上没有藏拙之地
6. 精通艺术而非揣摩市场
7. 尊重观众
8. 独创，但不要为异而异</code></pre>
<h2 id="核心附着层作家与故事">3、核心附着层：作家与故事</h2>
<pre><code>1. 故事是人生的必要设备
2. 故事是对现实的挖掘与探寻而不是逃避
3. 文化离不开故事
4. 优秀的故事创作是卖方市场
5. 作者需要洞察生活，以从内而外的创作
6. 价值观、人生的是非曲直，是故事的灵魂
7. 故事进展中缺乏过程，动机虚假，人物累赘，潜文本空洞,情节漏洞等故事问题是文笔乏味的根本原因
8. 所有故事都会暴露作者的人性
9. 作家的任务是发觉值得讲世人也愿意听的故事
10. 作家需要热爱写作并且忍受寂寞
11. 故事是生活的比喻
12. 讲得精彩比素材深奥重要</code></pre>
<h2 id="内层故事的要素">4、内层：故事的要素</h2>
<pre><code>1. 结构图谱

    1. 从瞬间到永恒，用少数瞬间展示宏大的整体
    2. 结构是对人物生活故事中事件的选择，这种选择为事件赋予意义
    3. 事件是人物生活情境中的变化，变化是通过价值来表达并通过冲突完成的
    4. 故事的价值是人类经验的普遍特征
    5. 理想的场景即是事件，连续时空中通过冲突表现的引起变化的动作
    6. 解说应该编织在故事中
    7. 节拍是行为的交替，场景由节拍构成
    8. 序列是一系列有关联的场景组成的更具冲击力的形式
    9. 幕是一系列序列的组合，以高潮作为顶峰
    10. 故事由一系列幕构成，最后的幕高潮称为故事高潮，故事应该引起不可逆转的弧光
    11. 情节是作者对故事发展与形式的选择，有大情节（经典，因果，闭合结局，线性时间，外在冲突，单一主人公，连贯现实，主动主人公），小情节（极简，开放结局，内在冲突，多重主人公，被动主人公）与反情节（巧合，非线性时间，非连贯现实）三个极端

        1. 闭合式结局解决了所有问题而开放式结局留有余地
        2. 主动主人公追求欲望积极行动与周围的人和世界发生直接冲突
        3. 被动主人公表面消极被动，而在追求内心欲望时与自身性格发生冲突
        4. 即便有闪回，大致连贯的时间即是线性的
        5. 时间跳跃以至于无法判断事件先后为非线性时间
        6. 非连贯现实混合多种互动营造出荒诞感
        7. 情节依附于变化，没有变化的故事称为非情节
    12. 作者创作故事应该自然不做作，并且精于经典形式
2. 背景

    1. 背景体现了作者对故事世界的了解程度，有四个维度：时代，期限，地点，冲突层面

        1. 时代：故事在时间中的位置
        2. 期限：故事在时间中的长度
        3. 地点：故事在空间中的位置
        4. 冲突层面：故事在人类斗争的层级体系中的位置
    2. 背景限制了故事中的可能性，故事必须遵守自身内在的或然性
    3. 创作故事的第一步是创造一个小而可知的世界
    4. 背景越大作者的知识越被稀释，选择也越少
    5. 背景的建立：调查，记忆，想象，事实
    6. 故事并不是一堆累积的信息，而是对事件的设计
    7. 创作是在取舍中作的选择
3. 类型

    1. 精通一种类型及常规，把握世界的脉搏，持之以恒。
4. 人物

    1. 压力越大对人物性格的揭示越深
    2. 衬托与反衬是揭示人物性格基本工具
    3. 故事需要展现人物弧光
    4. 人物必须具备足以承担他在故事中的选择的素质，以令人信服
    5. 事件设计与人物设计互为镜像
    6. 最终高潮是故事的灵魂
5. 意义

    1. 故事的高明之处在于理智与非理智的统一
    2. 创作的动力来源于灵感（开端动机）与最终思想（想表达的东西）
    3. 故事的意义只能让故事本身去表达
    4. 故事越是围绕一个中心意义越能展现价值
    5. 故事反照出真实的作者
    6. 故事通过正面价值与负面价值的互动交替取得进展
    7. 避免在故事中加入过强的说教倾向</code></pre>
<h2 id="次外层故事设计原理">5、次外层：故事设计原理</h2>
<pre><code>1. 故事材质

    1. 语言仅仅是一种媒介，作者需要从里到外，从人物的内心到整个世界去体察故事。
    2. 主人公是一个具有自觉欲望（还可以有一个自相矛盾的不自觉欲望）且有能力和至少一次机会达成欲望的人物。主人公将追寻其欲望直到背景和类型设立的极限。
    3. 故事的艺术不在于讲述中间状态，而在于讲述人类生存状况的钟摆在两极之间摆动的情形，讲述最紧张状态下的人生。
    4. 故事必须有一个观众无从想象出更好可能的最后动作。
    5. 主人公必须具有移情作用，而同情作用可有可无。
    6. 人物在追寻欲望的过程中总是会采取主观最小行动。但世界并不能完全按照人物的意愿进行，要么反向，要么超过预期。
    7. 人物拥有三个冲突层面，内心冲突，人际冲突与社会冲突。
    8. 鸿沟：主观预计与客观现实之间的地带，或然与实然间的撕裂。故事的材质就是鸿沟。
    9. 主人公必须面对一个一旦失败就无可挽回的后果。风险与价值成正比。
    10. 鸿沟层层递进推进故事发展。在鸿沟中探寻反应与对立反应，以找寻真理。
    11.  写作应该强调事件发生于谁，为何发生，而非发生了什么。期望等同于结果的场景没有意义。
    12.  观众对世界的期望大约等同于主角对世界的期望。
2. 激励事件

    1. 故事是一个由五部分组成的设计：激励事件，进展纠葛，危机，高潮，结局。
    2. 激励事件：故事讲述的第一个重大事件，一切后续情节的首要导因。
    3. 每一个角色都应该出于独一无二的目的所设计，最终应借角色编织出一张充满矛盾与对立态度。
    4. 作者以对世界主神般的了解，通过移情作用与可信幻觉控制观众感情投入。
    5. 可信性：内部连贯的世界，其规模、深度和细节都能自圆其说。
    6. 可信性取决于讲述细节。独创性存在于对可信性的追求，而非标新立异的猎奇。
    7. 激励事件必须是一个动态的，充分发展的事件，而非一个静态模糊的事件。激励事件必须彻底打破主角生活中的各种力量平衡。
    8. 主人公必须对激励事件做出反应。由激励事件引发的主人公的自觉欲望与不自觉欲望共同构成故事脊椎。
    9. 故事表现为一个求索形式，由激励事件开始，在脊椎上产生冲突，最终达成一个结局。
    10. 深入主人公的内心，就能看到故事弧光，并以此展开求索之路。
    11. 激励事件必须在主情节里，且发生于故事前四分之一。
    12. 自白与解释说服不了观众，人物需要事件的考验。
3. 幕设计

    1. 进展纠葛：人物面对越来越强的对抗力量时产生更多的冲突，经过一个个无法回归的事件点。
    2. 故事决不能退隐于轻量级性质或力度的行动，必须循序渐进的朝着观众无法想象出更好替代的最终行动运行。
    3. 冲突推动故事进展。故事生活的比喻，活着就是置身于看似永恒的冲突中。
    4. 长篇叙事至少经过三个重大逆转才能到线索的终点。
    5. 幕高潮的泛滥容易招致陈词滥调。且会削弱高潮的冲击力并导致重复感。
    6. 推迟主情节入场可以使观众详细了解主人公，以便他们能够对激励事件做出充分反应。
    7. 故事的动感取决于正负价值的交替。情感体验重复时，第二个事件的力度将减半。
    8. 次情节作用：反讽，回响，伏笔，制造纠葛。
4. 场景设计

    1. 一个场景即使一个微缩的故事。
    2. 转折点效果：惊奇，增加好奇心，见识，新方向。       3. 伏笔必须埋植的足够牢固。伏笔与分晓间可以多次交错。
    4. 情感转变取决于足够精确的情景，为此需要三点努力：移情于人物，知道人物欲望，明白人物生活中的筹码。
    5. 回报递减定理：对某事体验的越多，它产生的效果就越少。
    6. 情感是一种短期体验，感情是一种长期背景。感情也被称作基调。
    7. 人类的行动永远趋向于选择善和是（其主观判断）。故而善恶之选不能算作选择。真正的选择是两善择其一或两恶取其轻，即两难之境。
5. 场景分析

    1. 分析始于将文本与潜文本分离。
    2. 必须注意事物的两重性。
    3. 永远要具备一个潜文本，一个与文本互为对照或构成矛盾的内在生活。
    4. 最富激情的时刻必须隐含着一个更加深刻的层面。
    5. 观众意识到潜文本才能使场景行之有效。
6. 布局谋篇

    1. 激励事件与故事高潮之间有一把因果关系之锁。
    2. 故事被期望具有生活的节奏，即紧张与松弛的交替。
    3. 高潮不可一掠而过，需要深刻地展开。
    4. 表现进展过程：扩大社会影响，将动作深深楔入人物私人生活中，讲故事意象的象征负荷升华，反讽升华。
    5. 过渡原理——铰链：两个场景间共同或相反的东西。
7. 危机、高潮和结局

    1. 危机指主角面对强盛的对抗力量时所做出的自发决定。是一个两难之境的终结。
    2. 危机决定必须是一个有意而为的静态时刻。
    3. 高潮指不可逆转的价值剧变。
    4. 创造力的流动往往从结果到原因。
    5. 结局是高潮后的故事终结。</code></pre>
<h2 id="最外层作者的工作">6、最外层：作者的工作</h2>
<pre><code>1. 反面人物塑造原理

    1. 主人公极其故事的智慧魅力和情感魄力必须与对抗力量相适应。
    2. 生活总是微妙而复杂，很少简单的是非对错，因而价值之间有三种关系：矛盾价值，相反价值，负面之负面价值。
    3. 矛盾价值是与原价值冲突对立的价值，。
    4. 相反价值则是带有原价值的相对元素却不足以与之对立的价值。
    5. 负面之负面价值是具有多个与原价值相对的元素的极负价值。
    6. 在冲突上具有深度和广度的故事必须具有上述价值类型。
    7. 一部作品的伟大在于作者对负面的处理。
2. 解说

    1. 解说的技巧在于无形。
    2. 保持观众兴趣靠的不是信息，而是扣押信息。
    3. 幕后故事可以制造强力转折。
    4. 闪回的技巧：戏剧化，尽量不用。
    5. 避免梦境序列，蒙太奇等手法。
    6. “展示，不要告诉。”意味着对观众智慧和感知力的尊重。不要将观众当作一切都需要解释的小孩。
3. 问题和解决方法

    1. 兴趣问题：好奇心，关心与善之中心。

        * 信息的三种状态：神秘状态下观众知道的比人物少，悬念状态下，观众与人物知道同样的信息。戏剧反讽状态下，观众知道的比人物多。
        * 戏剧反讽鼓励观众深入探寻人物生活中起作用的动机和因果力量。
    2. 惊奇问题：廉价惊奇是在利用观众的脆弱。
    3. 巧合问题：不应该回避巧合，而是要戏剧化地表现出它是如何毫无意义地进入生活的，又怎样随着时间流逝而获得意义，表现出随意的反逻辑如何变成生活现实的逻辑。

        * 尽早引入巧合，以给予它充分的时间获得意义。
        * 不要用巧合来转折一个结局。
        * 不要让巧合取代人物决定。
    4. 喜剧问题

        1. 喜剧允许中断叙事动力
        2. 喜剧容忍更多巧合
        3. 不要引用机智的对白或描述视觉的噱头。
    5. 和人物一起度过的时间越多，目睹其选择的机会也越多，移情会更强。
    6. 为了表现人物冲突，作者必须使用平实的对白。
    7. 改编需要走下纯文学的台阶。
    8. 两个方向：从社会环境冲突的形象将观众带入复杂的个人关系。从言谈举止开始，去透视内心生活，去发现那些不可言喻，不可觉知的东西。
    9. 戏剧腔不是夸张表达的结果，而是动机不足的结果。
4. 人物

    1. 人性是唯一不会过时的主题。
    2. 人物不是真人，而是一件艺术品，一种对人的比喻。
    3. 人物的真相只能通过两难的选择来表达，压力越大揭露越深刻。
    4. 动机是多种复杂力量的综合。
    5. 自我解释必须用行动来证实或者用行动来反驳。
    6. 人物维：维是指矛盾，一个人物内在矛盾越多，便有越多的维。
    7. 主角必须是最多维的角色。
    8. 本质上是主人公创造了其他人物。
    9. 维可以通过对照制造。
    10. 喜剧人物的特点是盲目执迷。
    11. 创作人物的诀窍：为演员留有余地，热爱所有人物，人物就是自知。
    12. 对自己了解的越多，对人性洞察的越深刻，越能了解别人。
5. 文本

    1. 对白不是对话
    2. 对白要求压缩和简约

        1. 用最少的词句表达内容。
        2. 具有方向，使节拍向一个方向转折。
        3. 具有目的，每一行台词都要执行一个步骤，使场景围绕转折点构建形成弧光。
    3. 描写要避免笼统名词，尽量使画面感充分。
    4. 象征不可以被意识到，否则将失去力度。
6. 作者的创作方法

    1. 从里到外的写作：由高度简洁的单个元素推敲排列再渐渐填充。从外到里的写作：由一个想法开始的写作行为，一气完成。
    2. 应该使用从里到外的写作并且尽量推迟台词创作，不好的台词会使故事窒息。</code></pre>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何高效学习》笔记——原理篇</title>
    <url>/blog/2019/08/21/L008-%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<blockquote>
<p>《如何高效学习》斯科特.扬，介绍了一种整体性学习方法。</p>
<p>全书分为三个部分：1、整体性学习的原理。2、整体性学习的方法。3、一些提高效率的建议。</p>
<p>本书虽然不免带着些营销意味，但大体上还是包涵了很多值得借鉴的方法。</p>
<p>这篇笔记是对这本书的原理部分的整理</p>
</blockquote>
<span id="more"></span>
<h2 id="导言">导言：</h2>
<ol type="1">
<li><p>整体性学习的概述：</p>
<p>获取信息 -&gt; 理解信息 -&gt; 扩展 -&gt; 纠错 -&gt; 应用</p></li>
<li><p>本书的使用方法：从这些技术种选择少数进行练习，掌握后再练习其它技术。要蚕食而不要鲸吞。</p></li>
</ol>
<h2 id="什么是整体性学习">什么是整体性学习：</h2>
<p>区别于文件式的零散而独立的记忆，整体性学习强调知识与知识间的练习，是意图将所学的知识联系起来形成一个严密的整体从而提高学习效果的假说。故而称之为整体性学习。</p>
<p><em>我对完全将学习效率低归因于记忆方法的观点是持怀疑态度的。多年的学习经验确实反映出了零散的知识学习在长时间不使用后趋于遗忘，但并不完全是由于所谓的零散式记忆，认知心理学对遗忘的解释是复用程度低从而未建立长久有效的神经元联系。不过尝试在知识间建立联系确实可能会改善知识的学习情况，这一点确实值得尝试。</em></p>
<h2 id="整体性学习主要基于三个观点结构模型和高速公路">整体性学习主要基于三个观点：结构、模型和高速公路</h2>
<h3 id="结构紧密联系起来的知识">结构：紧密联系起来的知识</h3>
<p>这里强调的联系的紧密程度而不是联系的强度，多半适用于某一具体学科内部的知识点之间的联系。</p>
<p>人的记忆很大程度上依赖于结构，记忆的提取很大程度上依靠从一点出发的发散联想。因此不够强的联系可能造成知识点提取困难。</p>
<p>具体来说就是，一个偏僻而不常用的知识点往往也和其它知识有十分紧密的联系，但是由于联系强度不够很难调用。</p>
<p>因此一个良好的知识结构对知识的提取很重要。</p>
<h3 id="模型结构的简化与压缩">模型：结构的简化与压缩</h3>
<p>模型是出于方便记忆的目的对结构进行的压缩。将知识结构中的主要部分提取出来以减轻记忆负担，同时可以通过联系引伸出被压缩的知识。</p>
<p>好的模型应该做到最大程度的简化记忆量同时保证有可靠的联系到达被压缩掉的部分。</p>
<h3 id="高速公路结构之间的联系">高速公路：结构之间的联系</h3>
<p>建立高速公路的好处主要体现在思维的活跃性和创造性上，同时也具有一定的增强结构印象的作用。</p>
<p>可以通过在几类每个思维里都根深蒂固的强结构和某一结构之间建立联系去加固这一结构的牢固程度。</p>
<p>这样的强结构包括：</p>
<ol type="1">
<li>感知结构：建立不同感官之间的联系。</li>
<li>关系结构：对结构间的抽象关系进行具象化的比喻。</li>
<li>基础数学机构：用以掌握的数学结构去简化其它结构。</li>
</ol>
<h2 id="整体性学习的顺序">整体性学习的顺序</h2>
<h3 id="获取尽可能获取准确精简的信息">获取：尽可能获取准确、精简的信息</h3>
<ol type="1">
<li>简化：对单一信息进行尽可能不失真的精简，最大化方便记忆。</li>
<li>容量：在简化信息的前提下尽可能多的获取信息。</li>
<li>速度：完成前两个步骤所需的时间越少越好。</li>
</ol>
<h3 id="理解了解了信息的基本意思并建立上下文联系">理解：了解了信息的基本意思并建立上下文联系</h3>
<p>理解是对信息赋予意义的过程，是接下来的步骤的基础。如果一段话难以理解，可以试试将它分解。再分别理解分解后的内容。</p>
<h3 id="前两个阶段统称信息处理阶段详见下文中的信息处理部分">前两个阶段统称信息处理阶段，详见下文中的信息处理部分。</h3>
<h3 id="拓展建立良好的结构">拓展：建立良好的结构</h3>
<ol type="1">
<li>深度拓展：知识背景研究，比如公式的推导过程，结论的产生过程等。</li>
<li>横向拓展：将知识与其它知识联系起来，建立结构与模型。</li>
<li>纵向拓展：在结构与结构间建立高速公路。</li>
</ol>
<h3 id="纠错修正错误删除无效的联系">纠错：修正错误，删除无效的联系</h3>
<p>可以通过分析相反的观点与实践来检验错误。</p>
<h3 id="应用理解知识的现实应用与体现">应用：理解知识的现实应用与体现</h3>
<p>应用是加深对知识的理解和掌握的有效方式。在应用里往往可以获得更深刻的理解，或是发现一些隐蔽的错误。</p>
<h3 id="测试在上述每一个过程中进行测试以迅速找到问题所在">测试：在上述每一个过程中进行测试以迅速找到问题所在</h3>
<ol type="1">
<li>获取阶段:我以前听说过这个知识吗？</li>
<li>理解阶段:我理解这个知识吗，至少在字面意义上？</li>
<li>拓展阶段：这个知识从何而来，与哪些知识有联系？</li>
<li>纠错阶段：删除了哪些不恰当的联系和错误结论？</li>
<li>应用阶段：我将知识应用到实际中了吗？</li>
</ol>
<p><strong>整体性学习的步骤并不是一成不变的，可以在步骤间进行跳跃和往返</strong></p>
<h2 id="每个环节可能出现的问题">每个环节可能出现的问题</h2>
<h3 id="获取阶段">获取阶段：</h3>
<ol type="1">
<li>阅读习惯不好，无法长时间集中注意力。</li>
<li>不好的笔记习惯：记得过多或过少。</li>
<li>不理解当前文字，多出现在外文书的阅读中。</li>
</ol>
<h3 id="理解阶段">理解阶段</h3>
<p>理解阶段的困难通常在更换讲解的更清晰的材料或是降慢阅读速度后就能解决。在面对新知识的时候理解的慢是正常的。</p>
<h3 id="拓展">拓展</h3>
<p>缺少灵活性，无法找出知识之间的关联。</p>
<h3 id="纠错">纠错</h3>
<p>无法发现错误或是建立的错误联系太多。</p>
<h3 id="应用">应用</h3>
<p>不能在真实世界中很好的应用知识。</p>
<p><strong>通过上述情况找到自己的薄弱环节以便在之后的学习中针对性地联系对自己最有用的方法</strong></p>
<h2 id="信息种类及其处理方法的选择">信息种类及其处理方法的选择</h2>
<ol type="1">
<li><p>随意信息：缺乏逻辑关联的一系列事实，日期，定义等。</p>
<p>随意信息往往无需费力理解，但难以建立有效记忆，可以通过联想法、挂钩法和压缩法处理。</p></li>
<li><p>观点信息：存在争论的信息，比如XX和XX哪个好，这类信息往往各人看法不一，但对自己的决策却非常重要。</p>
<p>观点信息的难点在于尽可能全面的获取不同的观点并且寻找其中的模式，而不是记忆具体细节。可以使用图标法处理。</p></li>
<li><p>过程信息：对某以特定行动的指南，比如安装操作系统。</p>
<p>这类信息的难点在于需要大量时间去练习，但是相应地在掌握后会更难以遗忘。可以用内在化、比喻法、图表法、模型纠错四种技术来处理。</p></li>
<li><p>具体信息：直接通过感官感知到的信息。</p>
<p>大部分技巧都可以应用于具体信息。</p></li>
<li><p>抽象信息：数学知识等信息，缺少与感官的直接联系。</p>
<p>抽象信息与随意信息相反，逻辑性很强，掌握后很难遗忘，但往往需要花费大量力气在理解上。可以应用内在化和比喻法和模型纠错来处理。</p></li>
</ol>
<p><strong><em>信息可以同时具有多种种类特性，且绝大多数信息介于抽象和具体之间。</em></strong></p>
<p><em>上述方法将在下一篇介绍。</em></p>
<p>随意信息联系的结构是最弱的结构，它们往往难以形成有效的逻辑关联。</p>
<p>而具体信息和观点信息联系的结构则最强，这种结构很难被遗忘。</p>
<p>在应用中应该通过后面提及的方法尽可能地将弱结构转化为强结构。</p>
<p>## 总结：</p>
<p>整体性学习旨在通过大量建立起知识之间的联系增强学习效果，其过程为：获取-&gt;理解-&gt;拓展-&gt;纠错-&gt;应用。这个流程可以视实际情况而跳跃和往返。</p>
<p>其中有三个关键概念：结构、模型、高速公路。结构是知识互相关联所形成的整体，模型是简化的结构，高数公路则是结构与结构之间的联系。</p>
<p>信息可以分为五类：1.随意信息。2.观点信息。3.过程信息。4.具体信息。5.抽象信息。不同的信息有不同的特点和处理方式。一个信息可以同时拥有几种类型的特点。为了获得更好的学习效果，我们应该尽可能地将随意信息结构转化成更强的过程信息和具体星系结构。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何高效学习》笔记——方法篇</title>
    <url>/blog/2019/08/23/L009-%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<blockquote>
<p>《如何高效学习》斯科特.扬，介绍了一种整体性学习方法。</p>
<p>全书分为三个部分：1、整体性学习的原理。2、整体性学习的方法。3、一些提高效率的建议。</p>
<p>本书虽然不免带着些营销意味，但大体上还是包涵了很多值得借鉴的方法。</p>
<p>这篇笔记是对这本书的方法部分的整理</p>
</blockquote>
<span id="more"></span>
<h2 id="导言">导言：</h2>
<p>上一篇笔记主要介绍了整体性学习的原理和步骤，这篇笔记将会提供一些具体的方法以应用那些整体性学习的原理进行学习。这些技术包括：</p>
<ol type="1">
<li><p>获取知识：</p>
<ol type="1">
<li>快速阅读</li>
<li>笔记流</li>
</ol></li>
<li><p>联系观点：</p>
<ol type="1">
<li>比喻</li>
<li>内在化</li>
<li>图表法</li>
</ol></li>
<li><p>随意信息的处理：</p>
<ol type="1">
<li>联想法</li>
<li>挂钩法</li>
<li>信息压缩技术</li>
</ol></li>
<li><p>知识扩展</p>
<ol type="1">
<li>实际应用</li>
<li>模型纠错</li>
<li>以项目为基础的学习</li>
</ol></li>
</ol>
<p>这里需要再次强调，完全按照顺序或是一起学习这些技术是很低效的。应该根据上一篇笔记的标准确定自己的薄弱环节，再从最需要掌握的技术开始蚕食这些技术。</p>
<h2 id="获取知识">获取知识</h2>
<p>学习知识的第一步就是获取知识，在这个过程中需要在尽可能短的时间里获取尽可能多的知识。本阶段有两种可用的方法：</p>
<h3 id="快速阅读在理解程度和获取速度之间找到平衡">1.快速阅读：在理解程度和获取速度之间找到平衡</h3>
<h4 id="方法">方法：</h4>
<p>这里需要指出，快速阅读并不是单纯的求快。一味地求快会造成理解的不够，快速阅读的目的是在保证必要的理解程度的前提下尽可能快地获取信息。需要强调：<strong>必要的理解是一定不能有缺失的。</strong></p>
<p>这里主要包括三种方法：</p>
<ol type="1">
<li>指读法：阅读时将手指当作指针，在正在阅读的文字下面移动。为阅读提供一个聚焦和控制效果，以增强阅读速度。</li>
</ol>
<p><em>这个方法似乎受到很多质疑，在提升速度方面并不一定有特别好的效果。但是确实可以帮助控制视觉焦点避免走神，在一定程度上提升阅读效率应该没有问题。</em></p>
<ol start="2" type="1">
<li><p>练习阅读法：通过练习提升阅读的速度和理解力。通过在规定时间内，以快于自己能完全看懂句意的速度阅读文章，并记录下自己的阅读量和知识点正确率，达到量化阅读效果与锻炼阅读能力的目的。具体方法：</p>
<ol type="1">
<li>阅读3min，算出自己的阅读速度（字/min）</li>
<li>阅读3min，写出记得的知识点，再翻开书记录下所有的知识点，算出自己的理解率。</li>
</ol></li>
<li><p>积极阅读法：深入地理解材料，不必像前练习阅读时一样注重速度，而是尽可能地理解材料。具体方法：</p>
<ol type="1">
<li><p>带一个笔记本，在笔记上记录下材料的标题和副标题。</p></li>
<li><p>每阅读（使用指读法）一小时（或其它时间段）就记下笔记，包括</p>
<ol type="1">
<li>这一节的主要观点</li>
<li>怎样记忆主要观点</li>
<li>怎样拓展开并应用主要观点</li>
</ol></li>
</ol></li>
</ol>
<h4 id="练习">练习：</h4>
<ol type="1">
<li>每天至少进行15分钟练习阅读。</li>
<li>练习指读法两周。</li>
<li>每周练习一次积极与阅读。</li>
</ol>
<p>本练习至少持续3周。</p>
<h3 id="笔记流记录一个最简的信息输入流以理解为主减少在记笔记上花费的时间">2.笔记流：记录一个最简的信息输入流，以理解为主，减少在“记笔记”上花费的时间。</h3>
<h4 id="方法-1">方法：</h4>
<p>尽量不写冗长的描述和完整的句子，用尽可能少的词语记录一个内容，并在内容之间建立联系（比如画箭头）。这样记笔记可以提升实时理解程度，但会牺牲复习时的可读性。因此，我们应该尝试使用以下两种混合型笔记流：</p>
<ol type="1">
<li>课上记录常规的线性笔记，可下根据笔记内容制作标准的笔记流。</li>
<li>用笔记流记录最关键的信息，在之后时间有空余时（例如思考或例题时间）将内容补充完整。</li>
</ol>
<p><strong>笔记流的关键并非是改变笔记形式，而是辨别哪些信息是重点的能力。</strong> 如果所有信息都记录下来，那么得到的只能是不便阅读且信息缺失的记录。</p>
<h4 id="练习-1">练习：</h4>
<ol type="1">
<li>两周内每天练习一次：把课堂上的笔记拿出来按照笔记流的方式重新记录，并在知识点之间建立联系。</li>
<li>练习将其它技术融合到笔记流中。</li>
</ol>
<p>第二点的前提是有其它技术可以融合，因此不妨在掌握对自己而言必要的技术后再进行笔记流的训练。在掌握新技术的同时可以辅以练习与笔记流的配合，相当于安装插件。</p>
<h2 id="联系观点">联系观点</h2>
<p>联系观点是对以获得的知识的进一步处理，其中并不是每一个方法都要完整的完成，应该视信息具体情况而定。</p>
<p>如果不是特别“<strong>困难</strong>”或“<strong>关键</strong>”的信息，并没有必要进行特别的处理，它们往往会自然地形成足够的联系和结构。换言之，出于效率，只需对重要的信息进行处理。</p>
<p>联系观点的最终目的是形成一个模型。</p>
<h3 id="比喻法通过已知的经验对新学习的知识进行比喻以建立容易理解和记忆的信息包括以下步骤">1. 比喻法：通过已知的经验对新学习的知识进行比喻，以建立容易理解和记忆的信息。包括以下步骤：</h3>
<h4 id="方法-2">方法：</h4>
<ol type="1">
<li>确定目标信息。</li>
<li>在自身经验中找出一些符合程度较高的比喻。</li>
<li>检查比喻中不恰当的地方。</li>
</ol>
<p>运用比喻法有一些技巧，首先要有<strong>寻找比喻的欲望</strong>，其次应该多多<strong>注意首先出现的念头</strong>，并在不同的比喻之间寻找一个合适的比喻，最后应该测试自己的比喻存在哪些缺陷，<strong>针对缺陷方面提出新的比喻</strong>。</p>
<h4 id="练习-2">练习：</h4>
<ol type="1">
<li>每天阅读学习内容，并写下至少五个观点。</li>
<li>针对每个观点写一个比喻。</li>
<li>假如比喻有缺陷，寻找更多比喻弥补缺陷。</li>
<li>最终形成的比喻应该简单到10岁小孩可以听懂。</li>
<li>重复上述过程，直到自己理解。</li>
</ol>
<p>该练习至少持续两周。</p>
<h3 id="内在化通过对具体的感官进行想象加深知识的印象">2. 内在化：通过对具体的感官进行想象，加深知识的印象。</h3>
<h4 id="方法-3">方法：</h4>
<ol type="1">
<li>明确要进行内在化的概念。</li>
<li>在脑海中建立图像</li>
<li>加上其它感官。</li>
<li>加上情感信息。</li>
<li>不断重复优化图像，加强图像和知识之间的联系。</li>
</ol>
<p>当知识本身难以进行内在化时，可以借助比喻法对比喻进行内在化。</p>
<h4 id="练习-3">练习：</h4>
<ol type="1">
<li>每天找两个或以上概念或观点。</li>
<li>在脑中建立图像，将感觉和情感加上去。</li>
<li>根据脑海所想，在一分钟内画出概念图像。</li>
</ol>
<p>该练习至少坚持两周。</p>
<h3 id="图表法绘制具体的图表比内在化费时间但比内在化更容易尤其是一些抽象概念图标的目的是将多个信息压缩成一幅图画图标的类型大致可以分为三种">3. 图表法：绘制具体的图表，比内在化费时间，但比内在化更容易，尤其是一些抽象概念。图标的目的是将多个信息压缩成一幅图画。图标的类型大致可以分为三种：</h3>
<h4 id="方法-4">方法：</h4>
<ol type="1">
<li>流程图：适用于步骤、事件、过程系统。</li>
<li>概念图：适用于对知识的结构进行描述。</li>
<li>图像：并非图表，而是以简单的小图像代替某些重要观点，以使其更加清晰。</li>
</ol>
<p>图表的目的是方便理解，而不是漂亮的图画。 没有必要绘制过于复杂的图像。</p>
<h4 id="练习-4">练习：</h4>
<ol type="1">
<li>每天找出一个观点或是一系列概念，准备画图表。</li>
<li>设定时间2-5分钟，开始作画。</li>
<li>时间一到立刻停止，并统计完成度。</li>
</ol>
<p>该练习至少重复两周。</p>
<p>以上三种方法可以混合使用以加深记忆。</p>
<h2 id="随意信息处理">随意信息处理</h2>
<p>随意信息往往不易建立联系，比较散乱，难以记忆。效果最好的方法是通过上一部分的三个方法：比喻法，内在化和图表法进行学习。</p>
<p>然而大多数时候它们是难以通过这些方法进行学习的。这时就需要用到随意信息处理方法了。由于平时不常用这些方法，以及这些方法本身比较复杂，随意信息处理方法需要不断地练习。</p>
<p>以下是三种随意信息处理方法:</p>
<h3 id="联想法将一系列信息串联起来形成一个链式结构通过对其中一环的记忆记起其它信息这种方法对一系列的信息尤为有效">1.联想法：将一系列信息串联起来，形成一个链式结构，通过对其中一环的记忆记起其它信息。这种方法对一系列的信息尤为有效。</h3>
<h4 id="方法-5">方法：</h4>
<ol type="1">
<li>为系列信息创造顺序，将其罗列成一个线性清单。</li>
<li>给清单中每一项信息设一个符号。</li>
<li>在相邻两项之间创建一个尽可能夸张的联想。</li>
</ol>
<h4 id="难点处理">难点处理：</h4>
<ol type="1">
<li>符号重复：使用不同的颜色。</li>
<li>联系断裂：缩短联想链长度。</li>
<li>难以辨认的符号：尽量再创建时使用更清晰的符号。</li>
<li>触发物丢失：建立一个稳定的触发物用以和联系中的第一环建立联想。</li>
</ol>
<p><em>联想法和链表很像，需要注意每一个结点的next指针是否有效以及指向头结点的指针是否存在风险。</em></p>
<h4 id="练习-5">练习：</h4>
<ol type="1">
<li>选择一组可以用顺序表示的知识。</li>
<li>按照上述方法形成链表。</li>
<li>一周后检查自己是否能记忆起来。</li>
<li>2周后开始限定时间联系。</li>
</ol>
<p>这个方法可能会花费更长的时间，至少需要一个月才能掌握，尽量多练习一段时间。</p>
<h3 id="挂钩法为数字创造形象将杂乱的信息与对应的数字挂钩从而以一串数字的形式储存">2. 挂钩法：为数字创造形象，将杂乱的信息与对应的数字挂钩，从而以一串数字的形式储存。</h3>
<h4 id="方法-6">方法：</h4>
<ol type="1">
<li>为不超过13个数字建立形象。</li>
<li>将需要记忆的符号与数字联系起来。</li>
<li>按照用到的数字想像与知识内容相关的场景。</li>
</ol>
<h4 id="练习-6">练习：</h4>
<ol type="1">
<li>寻找合适的信息，确保信息个数不超过13个</li>
<li>按照上述步骤练习</li>
<li>每两周画一天时间重复练习，并检验成果。</li>
</ol>
<p>挂钩法基于联想法，应该在掌握联想法后进行学习。不断练习直到熟练。</p>
<h3 id="信息压缩技术减少信息的容量建立信息的逻辑关系">3.信息压缩技术：减少信息的容量，建立信息的逻辑关系。</h3>
<h4 id="方法-7">方法：</h4>
<ol type="1">
<li>记忆术：用信息首字建立词语，以词语的形式记忆信息。</li>
<li>图像联系：对联想法，图表法和内在化的综合应用，将信息联系起来并用一张图表表示。</li>
<li>笔记压缩法：将笔记中的重要内容用尽可能少和小的字写在几张白纸上。</li>
</ol>
<h4 id="练习-7">练习：</h4>
<ol type="1">
<li>每天从笔记中挑选知识练习记忆术和图像联系，持续两周。</li>
<li>将前两周的材料进行笔记压缩，包括所有的记忆术和图像联系。</li>
<li>测试是否能记住整个信息。</li>
</ol>
<p>至少练习四周，最好是一直练习直到掌握。</p>
<h2 id="知识的延伸">知识的延伸</h2>
<p>从知识中找出其应用方法，一方面学以致用，另一方面可以在应用过程中更深刻的掌握所学知识。</p>
<h3 id="实际应用将知识应用到实际生活中">1.实际应用：将知识应用到实际生活中。</h3>
<p>练习：</p>
<p>每周抽一点时间看看学到的知识有哪些应用方法，花费5-10分钟至少列出20个用处，可能的话付诸实践。</p>
<h3 id="模型纠错不断地练习和实践发现自己知识模型中的问题">2.模型纠错：不断地练习和实践，发现自己知识模型中的问题。</h3>
<h4 id="方法-8">方法：</h4>
<ol type="1">
<li>分清是拼写错误还是概念问题，如果仅仅是简单错误只要下次注意就行，而概念错误需要足够重视并加以修正。</li>
<li>尽早尝试每一类问题，螺旋型加深对知识的掌握。</li>
<li>延伸练习时间：把总学习时长摊到每一天里，不要临时抱佛脚。</li>
</ol>
<h4 id="练习-8">练习：</h4>
<ol type="1">
<li>定期练习课堂上遇到的的问题。</li>
<li>将学习任务分配到整个学期，而不是考试周。</li>
</ol>
<h3 id="以项目为基础的学习通过完成一个实际项目有目的性的学习新的知识">3.以项目为基础的学习：通过完成一个实际项目，有目的性的学习新的知识。</h3>
<p>项目的周期应该定在1~3个月，且难度应该适中。</p>
<p>可供参考的项目：</p>
<ol type="1">
<li>电子书</li>
<li>编程</li>
<li>发明</li>
<li>网站</li>
<li>设计</li>
<li>写博客</li>
</ol>
<h3 id="费曼技巧通过模拟教授一个零基础学生的情况来加深自己对知识的理解和掌握">费曼技巧：通过模拟教授一个零基础学生的情况来加深自己对知识的理解和掌握。</h3>
<h4 id="方法-9">方法：</h4>
<ol type="1">
<li>选择要学习的概念</li>
<li>假设自己要教会一个零基础的学生</li>
<li>模拟过程中碰到疑惑就将其解决清楚</li>
<li>简单化和比喻</li>
</ol>
<h2 id="总结">总结：</h2>
<p>这篇笔记整理了本书的第二部分，即具体的方法部分并附上了相应的练习。</p>
<p>在运用整体性学习的过程中每一阶段可选用一些具体的方法：</p>
<p>获取阶段：对应信息获取，有提升阅读能力的快速阅读法和提升笔记以及理解效率的笔记流。</p>
<p>理解和拓展阶段：有联系观点的方法（比喻法，内在化，图表法）以及随意信息处理方法（联想法-&gt;挂钩法，信息压缩技术（记忆术，图像联系，笔记压缩））。</p>
<p>纠错和应用阶段则强调实践，无论是发现知识的应用，模型纠错还是项目制学习，都是以实践为核心的。</p>
<p>本篇还额外介绍了费曼技巧，旨在通过苏格拉底式的模拟找出自己的漏洞，提高知识的掌握程度。</p>
<p>实践与练习在这些学习方法里占据了相当重要的地位，一切方法如果没有练习就只是纸上谈兵。世界上并不存在看了就能突然变强的秘籍，一切方法都要经过训练才可以产生效果。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何高效学习》笔记——效率篇</title>
    <url>/blog/2019/08/23/L010-%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A03/</url>
    <content><![CDATA[<blockquote>
<p>《如何高效学习》斯科特.扬，介绍了一种整体性学习方法。</p>
<p>全书分为三个部分：1、整体性学习的原理。2、整体性学习的方法。3、一些提高效率的建议。</p>
<p>本书虽然不免带着些营销意味，但大体上还是包涵了很多值得借鉴的方法。</p>
<p>这篇笔记是对这本书的效率部分的整理</p>
</blockquote>
<span id="more"></span>
<h2 id="导言">导言：</h2>
<p>前两篇笔记完整的整理了整体性学习的原理和具体实施方法。这篇笔记是对本书最后一部分的整理。包括如下内容：</p>
<ol type="1">
<li><p>提高效率的习惯</p>
<ol type="1">
<li>能量管理</li>
<li>具体化任务</li>
<li>绝不拖延</li>
<li>批处理</li>
<li>有组织</li>
</ol></li>
<li><p>自学的方法</p>
<ol type="1">
<li>建立良好的学习习惯</li>
<li>克服障碍</li>
<li>设置目标</li>
</ol></li>
</ol>
<h2 id="提高效率的习惯">提高效率的习惯</h2>
<h3 id="能量管理">1.能量管理</h3>
<p>原理：中枢神经运作需要消耗能量，保证充足的能量可以有效增加精力。</p>
<p>这部分可以参考<a class="link"   href="https://www.zhihu.com/question/21097892/answer/19152921" >如何保持精力充沛，有效避免困、倦、疲、乏等不良生理状况？ - Amos的回答 - 知乎<i class="fas fa-external-link-alt"></i></a>。</p>
<ol type="1">
<li><p>增加能量储备：</p>
<ol type="1">
<li>每周3-5次运动，最好保证每天抽出40分钟锻炼身体。</li>
<li>每晚保证7-8小时的睡眠，如非迫不得已不要熬夜。</li>
<li>在需要长时间工作时吃粗纤维，粗制食物，以保持血糖平稳。</li>
<li>保证每天充足的水分摄入。</li>
<li>少吃多餐，每顿不必吃太饱，保证营养持续稳定供应，睡前少量进食有助于第二天早上更有精力。</li>
</ol></li>
<li><p>周期性作息计划：将线性分配的计划改变成周期性的，做到有张有弛</p>
<ol type="1">
<li>一周休息一天，完全放松。</li>
<li>设立一个脱离工作时间。</li>
<li>每个任务设定90分钟，全力以赴的完成，哪怕没有完成也要准时结束。</li>
</ol></li>
</ol>
<h3 id="具体化任务">2.具体化任务</h3>
<p>开始任务之前想清楚具体的事物、如何行动，不要盲目的忙碌。列出可以上手的事物清单，而不是笼统地“学习”。</p>
<h3 id="绝不拖延">3.绝不拖延</h3>
<p>完成任务时不要等到最后一刻，也不需要在一开始就急着完成。应该在中间的某个时间一次性完成任务。</p>
<p>周/日计划体系：</p>
<ol type="1">
<li>每周末列出一个周计划清单，除非特殊情况必须完成，但是也不要超额。</li>
<li>每日根据周计划清单列出每日计划清单，完成。</li>
</ol>
<h3 id="批处理">4. 批处理</h3>
<p>将零碎的事务集中起来处理可以获得更好的效果，因为人在开始一件任务时会花费一段时间来进入状态。</p>
<p>注意：</p>
<p>不要把工作量堆得太大，注意自己的注意力阈值。</p>
<p>一次性完成任务。</p>
<h3 id="有组织">5.有组织</h3>
<p>保持生活的组织性可以节省很多精力。</p>
<ol type="1">
<li>所有物品摆放在固定的位置。</li>
<li>随时在备忘录上记录想法。</li>
<li>坚持用日历和清单。</li>
</ol>
<h2 id="自学的方法">自学的方法</h2>
<p>积极地自学自己感兴趣的知识可以有效地提高自己的学习能力，而且学习自身感兴趣的事情本身就可以使人愉悦。</p>
<p>但是自学也有不足之处——没有组织帮助自己找出重点和检验学习成果。</p>
<p>上一篇提到的项目制学习对自学很有帮助，同时可以借助以下几个方法。</p>
<h3 id="建立良好的学习习惯">1.建立良好的学习习惯</h3>
<ol type="1">
<li>每日阅读：至少保证一周阅读一本书。</li>
<li>每日练习：对每天学习的知识进行练习，一方面可以检测成果，另一方面可以巩固知识。</li>
<li>每日目标：订立每日学习目标，从而获得系统化的知识。</li>
</ol>
<p>每日习惯的养成方法：</p>
<ol type="1">
<li>坚持30天。</li>
<li>坚持下去并试着享受习惯。</li>
<li>找到每天最适合进行这个习惯的时段。</li>
</ol>
<h3 id="克服障碍">2.克服障碍</h3>
<ol type="1">
<li>尽量详细的写下障碍，可以使得思考问题更容易。</li>
<li>善用搜索引擎。</li>
<li>找一本“指南”类书籍。</li>
<li>如果遇到理解障碍，不妨换一个角度试试。</li>
</ol>
<h3 id="设置学习目标">3.设置学习目标</h3>
<p>设置目标有助于完成系统化的完整学习。</p>
<ol type="1">
<li>所有目标都要简明扼要的写下来，并附上截止期限。</li>
<li>让目标客观化，有一个明确的标准用以检验这个目标是否完成。</li>
<li>设定稍微有一些困难的目标，踮踮脚就能够得到。</li>
<li>将目标转化为每周和每日任务。</li>
<li>经常看看目标的完成情况。</li>
</ol>
<h2 id="总结">总结</h2>
<p>这篇笔记整理了提高学习效率以及系统性地自学一项知识的方法。</p>
<p>提高学习效率包括能量管理、具体化目标、避免拖延、批处理、有组织性五个方面。</p>
<p>系统性地自学包括建立习惯，克服障碍，设置目标三个方面。</p>
<p>这些方法一定程度上建立在前两篇提及的理论与方法的基础上，运用之前的技巧可以很方便地完成这些方法中的一些困难细节。</p>
<p>再次强调，书中提及的方法必须配合大量练习才能发挥作用。</p>
<p>《如何高效学习》的笔记至此完结。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>我看过草叶葳蕤</title>
    <url>/blog/2019/08/20/L007-%E6%88%91%E7%9C%8B%E8%BF%87%E8%8D%89%E5%8F%B6%E8%91%B3%E8%95%A4/</url>
    <content><![CDATA[<h2 id="一">一</h2>
<p>李天星俯下身去，把一只指头浸在水中，一群织锦般血红的鱼便旖旎而来，鱼嘴冰凉地啃噬着他的指头，似乎知道那里面深埋着一截白骨，知道即使这肉体有一天腐烂了化作灰尘了，那截白骨还深埋在其中。</p>
<span id="more"></span>
<p>这俯下身去的当儿，脸上已经濡湿了。雨水从树梢间、竹叶里生长出来，长熟长肥沃，长成绿色的雨滴，然后像脚步一样，一脚一脚地踩到他脸上。他张开嘴接了几滴，然后把头收回了曲寂的游廊，继续画这红鱼翠雨图。雨天就这样，游人少，他的生意便也少。九曲的游廊，好像在一条秘密的隧道里摆满了迂回的镜子。到处是正面、背面、侧面，到处是零碎的悲伤的器官，眼睛、鼻子、嘴唇。这时候他看到坐在石舫里的那个女人还在。一个年轻的女人一直坐在那里，穿着一条黑色的裙子。他早就注意到这个女人经常坐在那里偷看他画画。坐在这里他都闻到了她身上肉质的潮湿，</p>
<p>感觉那潮湿的肉体里长满了各种菌类，蘑菇、蕈子、地衣、木耳…微风过处，枯萎的木槿花落在水面上。绿色的雨滴拈起一圈圈细细的涟漪，血红的鱼群游过来撮食着花瓣。他又画下去一笔荷。颜料落入画布，血融于水。</p>
<p>最近他总是想起自己已经四十岁了。一个逐渐开始丑陋的年龄。衰老只是从一出生便活着的证据。他又一次想起了外婆的乳房，干瘪的布满青筋的老乳房，一尺见长，从胸前一直吊到裤腰带上。他从小和外婆相依为命，只有摸着这两只乳房，他才会觉得自己没有被这世界遗弃，这乳房便是他的家。可到他十岁的时候，外婆也死了。外婆顺便带走了那两只干瘪的老乳房，也就带走了他的家。</p>
<p>他又想起了外婆邻居家的那个老头，老头干瘦如虾米，却怕热，夏天的时候浑身上下只穿着一条肥大的裤头。他一人度日，尤喜串门，夏天的正午总是往人家的门前一坐便久久不愿起来。肥大的裤头间不时抖露出一团紫黑色的东西。他第一次见到它的时候还以为是老头在和他玩捉迷藏，把什么好玩的东西藏在裤裆里了。他痴笑着让老头掏出来给他玩。</p>
<p>他又想起了最近几年，自己每次和女人做爱之后都会蜷缩成一堆苍老的肉，一堆丑陋得没有了名字和身份的肉。一旁的檀香点缀着这肉身，使它看起来加倍丑陋。</p>
<p>老是丑。醉是丑。疼是丑。恐惧是丑。不死也是丑。</p>
<p>天光云影和时间，一起急速地向一个黑暗处坠去，近处的树影开始变得模糊，开始陷入阴森的寂静。就连水中那片血红的鱼影，也开始褪色，开始变为苍白，变为无。无。</p>
<p>女人终于站了起来，他心里一笑，想，她到底还是向他走过来了。几分钟后，女人站在了他的身后。他没回头，闻到她走过来了。只听女人在背后说，我总是看到你在这里画画。</p>
<p>不远处，在渐渐变厚变稠的暮色里站着几枝荷。只是，荷也褪去了颜色，只剩下一副坚硬的骨骼。他坐着，她站着，他们中间隔着一个盛大的黄昏。他说，你是不是也经常来这湖边，好像见过你好几次了。</p>
<p>她说，我每天下班路过这里时都要坐一会，看你画画。看来她早已注意到他了。他用一只手叉了叉自己的长发，又看了看自己的脚尖，心里有些得意还有些悲伤，他又抬起头看着她那团年轻的脸。女人面色苍白，几乎能看到皮肤下面的血管。忽然，不知为什么，他又闻到了那种类似于菌类的腐败气味。</p>
<p>他看看天色，问，家离得远吗？天已经黑下来了。</p>
<p>她说，远。</p>
<p>他站起来收拾东西，说，我家就在湖边，去我那里坐坐吧。她便跟在他后面来到他在湖边租的老房子。</p>
<p>这老房子年久失修，外墙上窗户上爬满了阴郁的藤萝和青苔，房间的每个角落里都弥漫着行将糜烂的潮湿气味，古老繁复的枝形吊灯构成回忆的基调，浑浊而黯淡，适于绵长跌宕无死无生的孤独。他把她带到卫生间，卫生间里点着薰香驱赶霉味，薰香里蜿蜒着一种植物性的勾引。他放开热水，摸了摸她的手，说，在湖边坐久了，手凉成这样。先冲个热水澡，不然你会感冒的，要听话。然后又指指搭在架子上的一件男式衬衣说，洗完澡先穿我的衬衣吧。有时候女人穿一件不合身的衬衣看起来会更妩媚。</p>
<p>过了一会，她从水汽弥漫蒸腾的卫生间出来了，身上果然穿着他那件格子衬衣。衬衣长度刚好过臀，她赤着两只脚，光着两条明晃晃的腿，坐在了他对面。头发湿漉漉地伏在背上，</p>
<p>他没想到她的头发居然这么长，猛地从一朵发里释放出来竟感觉有点富丽堂皇，又有点杀气腾腾。</p>
<p>他指着桌上的两个纸包说饿了吧？刚才你洗澡的时候我出去买了点吃的，附近只有生煎和桃子卖。赶紧吃点东西吧，不要饿坏了。他们坐在地板上，打开纸包，开始一起吃那些金黄色的生煎。他们一口一口地吃，落地玻璃窗里的两个人也在一口一口地吃。他看到她嘴角泛着油光，便找来毛巾，细细地替她擦干净了。</p>
<p>女人的脸红了，低下头用手摩挲着自己的嘴角，好像怕那里还有油光，又好像要温习一下他刚才擦拭过的地方。他心里笑了。这就是女人。无论是什么样的女人，强的，弱的，高的，矮的，长的，扁的，只要你肯给她一点或真或假的疼爱，她势必像狗一样温柔地趴在你脚下。</p>
<p>他站起来关了惨白的吊灯，开了橘黄的台灯，又开了半扇窗户，晚风像水一样流了进来，整个屋子里水波荡漾。挂在墙上的画里夹杂着花影、树影、鱼影，它们像古老的化石一样纷纷沉淀在这屋里。使这屋子看起来斑驳曲折，幽暗鬼魅。她说，这都是你画的？</p>
<p>他说，是的。</p>
<p>她说，你从什么时候开始画画的？</p>
<p>他说，很小的时候。</p>
<p>她说，……你的画卖得好吗？</p>
<p>他不再说话，把长发叉到脑后，看着窗外。前段时间有个画商终于答应来看他的画，他为此欣喜若狂了好几天。最后画商却没有带走一幅。画商告诉他，不要再画这些植物了，除非你能把植物画得不像植物。你得给它们创造出另一种魂魄。</p>
<p>天更黑了，想象窗外那一池湖水已经沉这黑暗的底部，像一只巨大的黑暗之眼，那些无人理会的花瓣兀自飘零下去，一瓣，又一瓣。</p>
<p>更多的夜从窗口流进来。雨停了，夜变得明亮了一些。</p>
<p>此时他已经断定她不会拒绝，但是他在犹疑，这样又有什么意思？这样的夜晚太多了，究竟有什么意思？他站着，她坐着，最后他还是对她说，不早了，你路远，赶紧回家吧。当然，你住我这也可以。她不吭声，忽然开始啃手边的一只桃子。</p>
<p>他自己先躺下了，然后说，睡吧。她没有看他一眼，只是继续啃食那只桃子。好像那只桃子是今晚一件隔在他们中间的道具。他只好又站起身，一言不发地夺下那只桃子，放在了床边的柜子上。她的目光又顺着桃子攀爬过去，似乎惟恐这桃子会把她扔下，扔在原地，她急于要抓住它。他看出了她的不安，心里忽然有些恨她，又有些可怜她。如果今晚她执意要走，他倒松了一口气。</p>
<p>一夜。只是一夜的光阴。只是些黑暗中的菌类在盛开，在糜烂。最后，她们像从来就没有出现过。</p>
<p>他不再理她，闭上眼睛装作睡着了。耳朵里仍是啃桃子的咔嚓声，咔嚓咔嚓，像一只深夜的钟摆。忽然，钟摆停了。时间静静地浮动在他们之上。他没有睁开眼睛，却感觉到那女人伸过来一只冰凉的手，摸索着放在了他的身上。虽然用手死死抓着他，但她身体僵硬，枯涩异常，他不得不一再对着她的耳朵轻声说，乖乖，宝儿，宝，放松，放松点，我喜欢你的，你看我有多喜欢你。这是他非常拿手的，把语言如微温的糖浆徐徐灌入女人们的耳朵里，然后，那些女人们一一投降，柔顺而笨拙地趴下。这些可怜的听觉动物们，只要喂给她们足够的情话，她们便可以在暗处也长得葳蕤妖娆。</p>
<p>因为父母丧生于一起当年轰动一时的铜矿事故，他从小便跟着外婆相依为命，外婆年龄大了之后就住到了舅舅家里，他便也跟着寄人篱下。因为知道那不是自己家，所以从小便学会了看人眼色，学会了怎么取悦别人。舅舅家的一块点心在桌子上，他就是流着口水盯着看三天也不敢走过去碰一下。因为他知道这不是在自己家里，他只是一个客人。他唯一能做的是，怎样讨好主人。没想到，这从小练就的察言观色的本领有一天在女人这个世界里派上了用场，竟如一种战无不胜的锋利兵器。</p>
<p>是的，他没有钱，甚至到后来，他也不再认为自己有才华。可是，还是不断会有女人喜欢他，愿意和他做爱。当他去努力回忆她们的时候，记忆里没有画面也没有声音，只有重重叠叠的气味，那近似于草叶腐坏的气味，最后的浆果挂在枝头的气味，肉体老去衰败的气味，近似于死亡在弦的气味。但他最迷恋的，还是那些乳房的气味。那些大大小小的形状各异的乳房。这些气味在记忆中散发着惨烈坚硬的浓香，如同挣扎着即将消融在黑暗中的霞光。</p>
<p>如出一辙的情欲高潮再次把他击溃，像塑雪人一样把他塑成了一堆丑陋不堪的肉，一堆坍塌在地的肉。他看着自己的那堆肉歪在床上点起了一支烟，青烟袅袅，有如祭祀。他又看到另一堆白色的肉里长出一只胳膊，她再次拿起了那只啃了一半的桃子。他看到她的唇形和做爱之前咬在桃子上的那个痕迹又对接上了，好像刚才那场性事是根本没有存在过的，它只是一场很深很深的必然要存在的虚空，它只是镶嵌在他们身体暗处的纹身。</p>
<p>他抽着烟，听着那清脆孤单的啃噬声，咔嚓，咔嚓。</p>
<p>夜来风雨又匆匆，故园定是花无几。又是很久没有回过交城了，上次回去已经是去年春节了。外婆已经去世多年，至于舅舅家，他是能不去则不去，回交城他唯一要看的人是杨国红。想起她，他的泪忽然便涌了出来，落在枕头上。女人在他身边躺着，还在专心地啃那只桃子。无话。咔嚓咔嚓的啃噬声横亘在屋子里像一种庞然大物。桃子越来越小，越来越小，最后只剩下了一只暗红色的桃核。</p>
<p>然而她没有扔掉那桃核。她没有动，还是那个姿势，半倚在枕头上，慢慢地吮吸着那只桃核。牙齿与桃核的碰撞声在这寂静的深夜里听上去就像金属撞击的声音，让他的牙齿深处一阵酸凉。他终于忍不住了，说，吃完就把核扔了吧。她不肯，继续啃噬。他不知道多久过去了，不知道那粒桃核被她究竟啃噬了多久。终于，噗一声，那只桃核掉在了地上。 他忽然再次感觉到了她的恐惧。他有些愧疚了，她也许还不到二十，还是个孩子。他握起了她的一只手，问她，手还是这么凉，是不是有点冷？</p>
<p>有点。</p>
<p>来，小姑娘，让我抱抱。</p>
<p>……</p>
<p>你是做什么的？</p>
<p>在成衣厂里做裁缝。</p>
<p>哦，现在的女孩子会裁缝的很少了。我记得我小时候穿的衣服都是外婆用缝纫机做的。她为了赶一件衣服，会通宵坐在缝纫机前，后来眼睛都用坏了，不停地流泪。</p>
<p>此刻的拥抱就像是他和这怀中的女人正拖着他们的肉身在往前走，肉身执拗迟钝，一瘸一拐地跟在他们后面，一路小跑，惟恐被他们扔下。这肉身每次想欢娱的时候，就是一种内里生病的状态，就是那种渴望一直在自行分泌，而完全不管其他的存在。</p>
<p>而这刚刚与他有过欢娱的女人，他会一时恍惚这样的女人与他之间究竟有什么关系。好像是血肉相连的，如同一条刚刚被卡车碾过的胳膊；好像又是无比遥远的，远得他们根本看不到对方的面孔。</p>
<p>这些年他遇到过各种女人，这个时代里的她们像藻类一样藏在各种社交工具里，一网下去总能捞上来几个。她们或喜欢他的一头艺术家的长发，或喜欢他哄女人的甜言软语，抑或喜欢他那些永远卖不出去的画，喜欢他千锤百炼的床上功夫。总之，她们会喜欢他，会和他做爱，却不会和他结婚。时间久了，他便也觉得自己天生就是要给女人们做情人的。</p>
<p>他根本不应该有婚姻。</p>
<p>记得有一个女人喜欢每次都把他叫到她家里做爱，每次做完又让他赶紧匆匆离去。他每次到她家里都不放心地问，你老公不会忽然回来吧？直到有一次再次在她家里做完爱的时候，他忽然看到阳台的衣架上挂着的警服。他惊愕地问，你老公是警察？女人忽然诡异地一笑说，是刑警，他身上还配着枪。他几乎是瞬间从床上弹起来的，慌忙披挂好衣服便夺路而逃。他这才明白了为什么她每次都不愿去宾馆，一定要在她家里做爱，为什么每次她都能达到一种濒死般的高潮。全都是因为，旁边就有一支冒烟的枪口正阴森地对着他们。</p>
<p>还有个女人一见面就要求做，甚至连话都不肯多讲，他明显感觉到她其实并不是多么喜欢这件事情，可她就是近于强迫性地要求做。后来他有些怕了她，拒绝再和她见面，她还一遍一遍打电话要求见面。最后一次，被他拒绝之后她在电话里忽然就嚎啕大哭，她说她马上就要三十五岁了，她患有子宫增生，医生说过了三十五岁就再也生不了孩子了。她说她要的其实根本不是男人，更不是性爱，她只是想要一个自己的孩子，即使这辈子遇不到爱情，不可能和一个男人成家了，她仍然可以和自己的孩子组成一个家庭，那她后半生也就不会觉得孤独寂寞了。她说她早已经没别的要求了，只想要一个自己的孩子。所以她开始主动四处找男人，只为了上床，为了怀孕，即使明知道对方是在骗她也无所谓，甚至主动付开房钱。但她一直没有怀孕，眼看着年龄越来越大，马上三十五岁了。</p>
<p>女人在电话里哭了很久，以至于他挂了她的电话很久了，耳边还久久地萦绕着她的哭声。那些哭声像无数血红色的神经末梢在空气中游动着，虫豸一样要从他的鼻孔他的嘴唇他的每一个毛孔里钻进去，钻到他的血液里，要寄宿在他的身体里。</p>
<h2 id="二">二</h2>
<p>夜越来越亮了，雨过之后的夜晚竟然出了月亮，源源不绝的月光正在午夜淹没这个世界。年轻的女人似乎睡熟了。他起身站在窗前抽烟，看着外面的月光。</p>
<p>月光一波一波地袭击着他，不断把他冲刷向寂静，寂静，越来越深的寂静。</p>
<p>那时候他七岁，开始上学，总是恐惧于人多处，恐惧和同学在一起玩耍。他迷恋上了植物。每天黄昏放学之后，他独自走过破败的魁星楼,楼角的风铃声正在晚风中叮作响，他迎着一群黑压压的暮钟里的燕子，走出城外，走到旷野里，坐到一棵大树的枝杈上开始画那些野地里的植物。惟有这些不语的植物让他放松。他采集各种各样的树叶和花朵，捕捉各种蝴蝶和飞虫，把它们小心翼翼地压在课本里。从此以后它们便被永远囚禁在了那些课本里，渐渐风干如血迹，花瓣和翅膀变得日益透明起来，可以清晰地看到那里面存着地图一样的骨骼。</p>
<p>春天的时候他画那些灰败的柳树枝上出的鹅黄色，夏天的时候画那些牵牛花、指甲花、鸡冠花和那些渐渐膨胀的葫芦，秋天的时候画那些血色的红枣和金色的柿子，冬天的时候画那些雪地里的鸟爪和鲜红的鞭炮屑。</p>
<p>那时候他十岁，外婆去世。外婆临死前让舅舅答应继续供他上学，让他将来能自谋一条活路</p>
<p>那时候他十九岁，对，十九岁。当时他已经在太原的一所轻工业学校读完了四年中专，被分配回交城县做了一名小学美术老师。那时候中专毕业之后就分配工作，是成绩好的穷人家孩子的首选。舅舅早就告诉他，上大学是不可能的，能供他上个中专已经是仁至义尽了。而他作为一个客人，兴奋于终于要逃离舅舅家了。又因为从小画画好，便考上了这所学校的艺术设计专业。那是一九九一年。他再次回到交城县的时候是一九九五年。</p>
<p>年轻的陌生女人在月光里翻了个身，皮肤折射着月光，仿佛满身都是银色的鳞片。床咯吱叫了一声，如遥远的犬吠。</p>
<p>一九九五年，他再次回到那座北方小县城的时候，忽然觉得自己就像是搭乘着一艘宇宙飞船在一个虚拟的空间中飘荡了四年，但终究还是要在原地着陆。等到他从飞船上下来的时候才发现一切都和四年前一模一样。县城的四条街还是四条街，县城中心四层的百货大楼还是全县最高的建筑。这四年的时间就像在时间中挖出了一个洞。人一旦爬出来，它便自动愈合了。然而相对于四年前的自己来说，他却无论如何都觉得自己成了一个四年前的殖民者。他的交城方言里夹杂着普通话，他还留着一头令人侧目的长发。他主动把“夜来”改成了“昨天”。</p>
<p>那时他住在小学后面破旧的单身宿舍里，每天教小学生们画太阳画月亮画星星。老教师们对他说，工作也稳定下来了，准备找个人结婚吧，一年一年过下去一晃就是一辈子，连觉也不觉得就老了。他想，他怎么可能在这个地方结婚，在这结婚了就意味着永远被钉在这里了。他可是要成为画家的</p>
<p>上课，下课。下课，上课。渐渐的，他连课也懒得备，上课的时候把作业布置给学生，自己就站在教室门口抽烟，被校长抓到了好几次。他开始畏惧于每一天的开始，他觉得每一个早晨都无比巨大，空洞而陌生。最好的麻醉方法就是画画。他像小时候一样，背起画板画架到野外写生。马齿苋、蒲公英、荠菜、车前草、苍耳、菟丝子、苣菜、瓜子草、繁缕、雀麦还和四年前一模一样地长了一地。就在与这些植物再次相逢的一瞬间，他忽然觉得，也许，时间是根本不存在的，所谓四年或者更长，八年，十年，二十年，其实都不过是人的幻觉，或者说，一个人的一辈子本身可能就是一种幻影。</p>
<p>他还是时常会想起外婆，想起外婆的那两只干瘪的老乳房。小的时候，明知道没有奶水，外婆还是时常把那两只乳房塞给他，就像塞给他一个虚幻的母亲。他深夜躺在单身宿舍的木床上，身边没有一个人，一次次想起外婆那两只青筋纵横的老乳房，还是会一次次泪流满面。为了抵御这种孤独和恐惧，他开始不节制地自慰。他在床头贴了几张女明星的画报，让她们一字排开，似乎只有这样，他才与墙上的这些女人们在这个世界上有了一丝微乎其微的联系，她们对他来说才不是彻头彻尾的陌生人。然而结束之后，她们还会强行带着他，一起向一个更孤独更深不见底的地方坠去，他坠落在那里，好几次都觉得自己马上就要死了。</p>
<p>可是，一觉醒来他便意识到自己仍然好好地活在这个世界上，简直是毫发无损。他有些庆幸又有些懊悔自己竟然还是囫囵活在这世上。然而到第二天晚上便又开始这个过程，试图用那一秒钟里冲上云端的感觉狠狠扎进自己身体里，像一把蛮横的冷兵器一样扎进去，扎得越深越好，然后才能告诉自己，喏，放心，你还活着。</p>
<p>到后来他开始成瘾，会一晚上好几次，直到把床头的那几张画报涂抹得黄渍斑斑。本身就营养不良，这样一来，身体也就每况愈下，时不时会感冒发烧咳嗽，心里还是有些害怕了，便想着节制一点。可是他很快就发现，自己已经戒不掉了，如果不再自慰了，他只会更孤单更痛苦。于是只好又继续。</p>
<p>已经是午夜时分，月光更盛大了，床上的女人低低说了句梦话，听不清内容，看来也是异乡人。读中专的时候，宿舍里他的上铺容易失眠，就经常会听到他讲梦话，只是基本都是用家乡话讲的，不辨首尾。看来每个失去故乡的人都会试图在梦境中再度闯入故乡，独自走在故乡废墟一般的街道上，像一个伤痕累累九死一生的老兵，身上的伤疤却如同桃花般灿烂。渐渐的，这故乡的街道上终于有人向他走来，他们都没有脸，如鬼魅一般从他身边飘过。他却还是认出来了，那是父亲，那是母亲。他从记事起就不记得他们长着一张什么样的脸，所以他们每次出现在他梦中的时候都是这样，两个无脸的怪物。他站在他们后面泪流满面。</p>
<p>他走到床前坐下，就着月光看着床上的姑娘。她还这么年轻，这么，年轻，这，么，年，轻。她的年轻更让他嗅到了自己被年轻剥离之后露出的骨骼峥嵘的恐怖感。</p>
<p>他是在二十岁那年的秋天遇到杨国红的。那时候他定期要去县城中心的百货大楼买画画用的卡纸和颜料。一九九六年的百货大楼正处在最后的国营性质阶段，只是人们还不知道罢了。当时在这里面做一份售货员的工作是要被人羡慕的，百货大楼囊括了人们所有的生活必需品，公家人，清闲，干净，是一份很体面的工作。大楼里分很多种类的柜台，有五金交电、日用百货、日杂工具。他每次去卖文具的柜台买纸时，柜台后面坐着的都是一个三十出头的女售货员。皮肤白净，烫着一头当年正流行的大花卷发，还故意在额头上垂下一缕，再用头油固定住了，使那缕卷发看上去钢丝一般岿然不动。他每次来到柜台前的时候她都正坐在柜台后面织毛衣，也不知道在给谁织，总之就那么长年累月一针一线地往下织。他感觉她这织毛衣的过程就好像在最前方为自己设了一个诱饵一般，情知那诱饵的无聊，却还是要一针一脚地赶下去。</p>
<p>事实上除了最开始的两次需要说自己要买什么之后，他后来都不需要开口说话了。一见他来了，她就放下半截的毛衣，把他要的颜料和纸张放在柜台上。他付过钱，再一言不发地离开。那个下午他去得比平常晚了些，已经快到下班时间了。百货大楼里也比平常昏暗了很多，以至于看上去人影憧憧，面目模糊。他有些恍惚，觉得自己好像走错了地方，但走到文具柜台前的时候，发现那卷发女人还坐在后面织着毛衣。那是一件咖啡色的毛衣，已经有了一只袖子，正在织另外一只袖子。这毛衣毛茸茸地伏在她怀里，好像一层刚从动物身上剥下来的皮毛，还温热着。他站在那里忽然便有些紧张，心里却想，大概是给她丈夫织的。她工作好，长得也不错，不知道会有个什么样的丈夫。</p>
<p>这时候女人把纸卷好放在了柜台上，他伸手一接忽然就触到了女人的手。他哆嗦了一下，纸没接住，掉在了柜台的玻璃上。他低头看那卷纸，忽然发现他和女人的影子此刻都落在了玻璃里，隔着一道笨重的柜台，他和她就像两个站在一条大河边的人，从河里都可以看到彼此的倒影。他不敢抬头，也不想走，只是低头看着这两个挨着这么近的触目的倒影。忽然，他站在那里嗅到了从这两具肉体上散发出来的奇异的痛苦。</p>
<p>这时候百货大楼开始关门了，人声嘈杂，所有的售货员开始关窗户关卷闸。他知道该走了收恰起纸卷和颜料又勾匆看了一眼玻璃甲的两个人正准备转身离去时，忽然听到女人用很低却清晰异常的声音对他说了一句，你先出去，在后门的锅房旁边等我。</p>
<p>仿佛是第一次听到她的声音，他吓了一跳。他收拾起东西匆往出走，脑子里完全是空的，他觉得他什么都没有想，脑袋像百货大楼一样空旷。等到出了货大楼，他才忽然发现自己真的正站在大楼后门的锅炉房旁边。他呆呆站在那里，不知道该逃走还是该留下来等着。脑子还是钝着不转，心里却清晰地看到了刚才玻填的那两个倒影。</p>
<p>他躲在那个角落里一动不动，耳朵听着下班的女人们推着自行车，说笑着离去。说笑声、车铃声渐渐平息下去了，他还是一动不动地站着、竟不敢离开半步，就像在雪地里冻僵了一般。这时候，忽然有个人影向他走过来，低声说，跟我来。他便木木地跟了上去。两人又返回大楼来到楼梯后面的一扇小木门前。女人掏出钥匙开了门，先进去了，他也跟着进去了。女人反锁了门，又把窗帘拉上才说，这是我们单位的值班室，今晚轮我值班。</p>
<p>他抱着纸卷和颜料打量了一下，是间很小的耳房，只摆着一张单人床，床上有一卷绿色的行军被，还有一张旧桌子和两把包了红色人造革的木椅。桌子上还摆着一架破旧的台式电风扇。女人说，先把东西放下吧。他顺从地放下了，放下之后忽然就后悔了，手里空荡荡的忽然让他觉得恐怖，他急于想抓住点什么。他扭过头不敢看女人，目光拼命游弋着，想在这房间里随便抓住点什么。</p>
<p>他对自己说，走吧，现在就走还来得及。心里越是驱赶自己，他的两只脚越是牢牢吸附在地上。他感觉有一种东西正从他的身体里长出来，从那些泥泞中冒出来，正冲出他的身体，要形成另外一种肉身。就在这时，他感到有人站在了他身后，他本能地回头，忽然就看到那女人正棵着上身耸着两只乳房站在他面前。尽管认识这女人也有半年了，但每次都只能看到她脖子以上的部分。现在，脖子以下的这部分忽然就从衣服里冒了出来，以至于使她看上去并不真实，倒更像一个临时拼凑起来的人。他盯着那两只乳房，白的，圆的，很明亮。他有些害怕，想往后退几步，但没有想到的是，那个不顾一切从他身体里长出来的肉身已经先他一步，一把抱住了女人。</p>
<p>他对女人所有的想象力在那一瞬间里被贴上了封条，再加盖上封印。他羞愧地观察着从他身体里爬出来的情欲，简直像在观看一头愚蠢的生物，这使他近于恼怒，也使他的情欲更加庞大凶猛。</p>
<p>他们几乎整晚都在做，一次一次，无休止地。两次的间隙里，才想起来要聊点什么。你结婚了吗？</p>
<p>我二十三岁那年就结婚了……</p>
<p>你多大了？</p>
<p>三十三了，比你大多了吧？</p>
<p>你有孩子吗？</p>
<p>没有。我和我丈夫已经好几年没有性生活了……</p>
<p>感情不好？</p>
<p>一天到晚都没有一句话说，他还总是喝醉。</p>
<p>你胆子可真大。 …… 你不怕被你丈夫发现吗？</p>
<p>他不会知道的，</p>
<p>万一发现了怎么办？</p>
<p>…………不会的。</p>
<p>……怎么相上我的？</p>
<p>……见你第一次就知道了。</p>
<p>门锁好了吗，会不会有人闯进来？</p>
<p>不会的，我们单位每晚只会留一个人值班。现在他明白他们的身份了，一个背着丈夫偷情的女人和一个需要女人的单身男人。原来她确实是有丈夫的，只是，她和他才更像是栖息在同一个星球上的居民。他们都是被抛弃的人。所以这个星球上的居民才会违心地变得残忍。这样也好，和一个有夫之妇在一起，他所承担的责任就会小很多。可是说到底，毕竟是他在睡别人的老婆。这种罪恶感又让他与这女人有了一种两个案犯一起作案的默契感。</p>
<p>还有，一种对危险的亲近感。</p>
<h2 id="三">三</h2>
<p>因为等不到一月一次的值班，他们便约好在野外见面。</p>
<p>许多人都必须孤独地生和死，无论在哪里都一样。从他开始明白这个道理的一瞬间里，他心里长出了一种从未有过的肉欲的快感，竟无比轻松起来。他看着自己汹涌的肉身从自己的壳里脱缰而出，却丝毫不想加以阻拦。同在一个县城里，他们也会给彼此写信，读着对方的信竟也可以独自到达高潮。他们抓住一切机会见面，在深秋里冒着寒冷在枯萎的草丛里，</p>
<p>在树林里的任何一棵树下，钻进麦垛里等等。一起在晚上去看露天电影的时候，他们挤在密密匝匝的人群里，都目不转睛地看着幕布，那最拥挤人群中的高潮最是惨烈的狂欢，他觉得在那一瞬间，自己像只硕大无朋的气球一样简直要从人群中升起，高高在上地俯视着众生，俯视着这人世间。</p>
<p>这人群中的每个人都有自己的家，只有他没有。他没有父亲没有母亲没有妻儿。这些人群里的男人和女人都可以和另一个男人或女人堂而皇之地在一起，只有他必须偷情，必须和一个女人保持奸情。他一开始感到的确实是羞耻，但他很快就发现，羞耻是有极限的，一旦超出这种羞耻，接下来感觉到的便是一种莫大的享受了。而且，羞耻感越是强烈，这种享受便也越壮观。</p>
<p>这肉体的狂欢长得硕大茂密，像个巨婴一样吸收了所有的养料，把其他器官挤得日渐稀薄。他因为不好好上课几次被学校通报批评，校长还找他谈过几次话。一次校长找他谈话之后，他背起自己的几件行李和画板就往县城汽车站走，他早就想离开这个小地方了，早就不想做这个小学老师了。他想去大城市画画，在那里做个艺术家。</p>
<p>坐着汽车去了太原火车站，在候车室的椅子上坐了一夜还是坐车返回了交城县。他害怕，害怕自己去了大城市花光口袋里的最后一块钱，却找不到工作。他自视甚高的几幅画，投出去参加各种美展，却查无音讯。而教研组里的那几个中年女老师像是已经敏锐地嗅到了什么，经常高深莫测地看着他笑，似乎已经掌握了他偷情的具体证据。连给他介绍女朋友的事都没人再提了，好像他是一处提前被废弃的荒滩，任是种下什么也会颗粒无收。而工资还是不多不少的三百块钱。他惊恐地感到，他已经被装进一只笼子里了，很可能这辈子都出不去了。很可能，这辈子他都要死在这笼子里了。</p>
<p>为了抵御这种越来越深的恐惧，他便更频繁地去找杨国红，甚至有段时间他们每天都要见面。在冬天最冷的那段时间里，外面下着鹅毛大雪，他们藏在百货大楼后面黑暗温暖的锅炉房里做爱，锅炉房里到处是煤屑，一关上门便伸手不见五指。他在黑暗中顺利找到了她的两只乳房，拚命吮吸它们，觉得里面也储满了相同的黑暗。性爱成了一座坚固的建筑，他们两个人一旦进入里面，便可以暂时免除人世间的一切法则。</p>
<p>每次从锅炉房里出来的时候，两个人的脸上身上全是煤灰。站在白茫茫的大雪中如两颗迷路的黑色棋子。他们看看四下无人，便分头而去，突然变得小心翼翼，惟恐被别人知道了他们的行踪。</p>
<p>马上就要过年了，小年这天晚上，两个人来到县城北一家偏僻的旅馆，开了两间房。因为没有结婚证，所以只能开两间房。两个人住到其中的一间，把另一间空着。做爱之后，两个人静静躺在床上听外面依稀的鞭炮声。女人赤裸着爬起来，从自己包里掏出了一件毛衣递到他手里，说，快过年了，送给你的。他一看正是她一直在织的那件咖啡色毛衣。她隔三差五会送他点东西，有时候用饭盒装一盒饺子，有时候给他一瓶刚炸好的花生米。可是他从没有送过她任何礼物，马上过年了他都是两手空空地来见她。</p>
<p>他把毛衣套在身上试了试，刚合适。他再一次感到了自己的无耻，作为回报，他一把抓过赤裸的女人又做了一次。这次做爱他感觉机械而麻木，上身还套着一件毛茸茸的毛衣，就好像与女人之间隔了层层叠叠的草木与皮毛，岁月与光阴。他身体下面的女人倒是照旧温顺而流光溢彩，这温顺却让他不由得厌恶，甚至让他怀疑，他贪恋性爱的本质其实就是为了舍弃这肉体，贱视这肉体吧。而眼前这被贱视的肉体却不顾一切地吸收着营养，成了一堆如驯化的家畜一样温顺而谦让的肉。</p>
<p>在那一瞬间他忽然想，如果和这个女人在一起过一辈子也不错吧。她这么照顾他，像个母亲一样照顾着他，她的工资还比他高。可是，只要一想到这个女人比他大出整整十三岁，想到再过几年他们一起走在大街上也许会看起来形同母子，又想到自己将来是要做画家的，是一定会离开这里的。他不能这么提前地就把自己装进这个女人的器皿里被封了口。</p>
<p>他觉得这被奸情豢养的自己在这个夜晚如同血蛊。</p>
<p>这时候外面的鞭炮声越来越响了，小年夜放鞭炮是为了把灶王爷送到天上去替人们说好话。五颜六色的烟花在夜空中绽放又熄灭，烟花的余烬透过玻璃窗落在旅店的地上、床上，一时间整个房间里落英缤纷，璀璨异常，倒不大像在人间了。想到万家团圆的时候，他却躲在这个角落里和一个女人偷情，而这女人不顾一切地来回应他，使这肉身之上的欢娱看起来既巨大又邪恶，更像是高高凌驾在众生之上的杀戮，正强悍地睥睨着众生。与此同时他又从没有过地觉得自己可怜，他便从心里对着自己冷笑起来，笑着笑着泪忽然就下来了。</p>
<p>女人看到他脸上的那两行泪了，便又把他紧紧抱在怀里。两个人就这么在烟花的余光里拥抱着，这时候女人忽然说了一句，我正在考虑离婚的事。他吓了一跳，好像中了什么圈套，连忙对她说，离婚干什么，好好的。女人把脸扭向门那边，忽然不说话了，似乎正专心致志地猜测那扇门后面有什么。他也沉默了一会，觉得不妥，又开口了，你看你工作也好，人长得又漂亮，过得好好的，离婚干什么，别人会说你闲话的。女人还是专心地看着那扇门，不说话，也不回头。他看着她脸的侧面，忽然觉得有些难过，便讪讪地为自己辩解道，我是想离开交城，到外面去，我觉得我不能一直呆在这里做个小学老师女人终于把目光从门上拔了下来，她语气淡漠地说，你现在的那点学历文凭出去能干什么，怕是工作也找不到，要不你就考大学吧，大 学毕业了再出去找工作。你还年轻，想走就走吧，我这辈子估计就在这个小地方了。</p>
<p>他赶紧说，你出去干什么，你的工作多好，又稳定又清闲，再说你还有家。不能和我比，一人吃饱全家不饿的。</p>
<p>她又盯着窗外看了很久，然后起身开始穿衣服，她说，除夕晚上怕出不来，今夜就当提前和你过年了。</p>
<p>他无端松了口气，又怕被她看见，便低下头去不敢说话。</p>
<p>翻过一个年头之后便是一九九七年了。这个春天交城县发生了一件大事。那就是各种企业工厂陆续开始破产倒闭，工人们陆续开始下岗。百货大楼用投标的方式留下了很少一部分职工，开始了承包经营制，更多的人则一夜之间失业了。杨国红就是在这个春天下岗的。等到再见面的时候，是在杨国红刚刚开张的小商店里。在这个春天她已经离了婚，在中学门口租了个小门面，开了一间文具店。他忽然发现一夜之间她的头发几乎白了一半。她坐在自己的店里正捧着一只巨大的罐头瓶子喝水。她坐在那里一杯接一杯地喝，他说你怎么喝这么多水。她说，一个和我一起下岗的同事也像我一样，一下多了很多白头发，她告诉我也不用吃药打针，就一个办法，就是不停地喝白开水，一定能包治百病，就连这白头发也能再变黑。她目光有点滞，不看他，她说，还是你们当老师的好啊，肯定不用讲什么下岗，我二十岁进了这单位，只以为生是这里的人，死是这里的鬼了，没想到三十多岁的时候就下岗了，就忽然没有工作了。我怎么也没有想到在国营单位里居然会下岗，这让人怎么活？国家说让你没工作就没工作，说让你死就让你死。我到现在才知道了什么叫小老百姓。</p>
<p>她一边说一边还抱着那只巨大的罐头瓶子命往下喝水，喝胀的小腹从毛衣后面圆鼓鼓地凸了出来，那毛衣也是她手织的，菱花形的格子，他有些不忍心往下看了，便转身看着地面。只听她嘴里还在说，你说怎么就能让这么多人一下都下岗了，这么多人可怎么活啊？那些四五十岁下岗了的人还能干个什么？去哪儿人家都不要他们了。我又能去干什么？初中毕业就顶了我爸的班来百货大楼，除了站柜台我什么都不会。</p>
<p>喝完一杯水她又起身去倒水，摇了摇才发现暖壶已经空了。她颓然抱着那只巨大的空瓶子，仿佛很渴很累，仿佛正站在遥远的沙漠里，而那只空瓶子里面仿佛正泡制着她身上某一种悲伤的器官。她紧紧抱着它，不肯松手。</p>
<p>她站在那里对他恐怖地一笑，去帮我打点水，又没水了，我一上午已经喝完两壶了。这个春天的交城县街头忽然便冒出了很多小商贩，他们密密匝匝地挤在街道两边，卖所有这人世间能卖的东西。下岗工人们因为没有别的技术，卖东西几乎成了所有人的救命稻草，卖蔬菜卖水果卖衣服卖袜子卖手套，清明节快到的时候他们开始争相卖冥币卖纸房子纸人。为了能多卖出去一点东西，他们几乎把地摊摆到了街道中央，像群倾巢而出的蚂蚁一样正渐渐蚕食着县城的各条街道。有时候为了抢夺一个顾客，两个摊主会大打出手，一个说，他要买的是我的土豆。另一个说，放屁，他明明站在我的摊子前。那个又说，你才放屁，人家明明要买我的。而准备买土豆的人已经被第三个卖土豆的抢走了。</p>
<p>一时间，交城县的街头出现了从没有过的盛况，那就是，卖东西的人比买东西的人还多。这些拥上街头的小贩们大多数是刚刚下岗的工人，而原来那些在街头卖菜的城郊农民们不满意了，生意被抢，于是动辄便和新晋的下岗工人小贩们打起来。街头形成了两大阵营，随之又诞生了其中最威猛最不怕死的两大霸头各自执掌自己的阵营。于是，这街头每日充斥着各种嘈杂声，叫卖声、骂架声、拉客声、恐吓声……生机盎然得不像人间，倒更像是是天上砸下来的街市。然而，为了活下去，更多新下岗的工人们还在陆续拥向这里争抢一寸地摊，街上从黎明到深夜都是人头攒动，仿佛众人聚在一起正在过一种奇怪的盛大节日。</p>
<p>多年之后李天星在异乡的一场小成本话剧里听到了这样一句台词:没有投票权的一代人是没有节日的。后来他想，从没有过投票权的人们其实节日更多，什么都可以成为节日，下岗是节日，万民变成小贩拥上街头抢食也是节日它们都是节日。再后来李天星渐渐想明白了，节日不是庆贺，节日是匮乏，是补偿，所以，人人都渴望节日。</p>
<p>夹在人群中的李天星在这个九十年代末的春天里第一次闻到了那种类似于各种菌类混杂在一起的腐烂的味道。他再次惊恐地感觉到，他厌恶这里，他必须逃离这个小县城。嘈杂绝望的街头，抢食吃的人们让他感觉到了一种前所未有的巨大孤独，巨大得简直不像他一个人的孤独，倒像是有千万个人的重量一起压在了他的身上，要把他压碎，压成面粉。</p>
<p>怎么逃离，怎么才能离开这里？</p>
<p>他一边跌跌撞撞地穿过人群和死死包裹着他的嘈杂声，一边惊恐绝望地问自己。找杨国红去，还是找杨国红去。自从上次在她的小店里见了她一次之后他就再没有去找过她，她也没有主动来找他。现在她不仅下了岗，还离了婚，不管是谁先提的离婚，总之她是离婚了，她也成了一个单身。这个事实让他感到恐惧，让他这段时间都不敢再去找她，似乎他去找一个自由了的女人就必定是危险的，反而没有了偷情时的那种万目窥视背后的安全感。同时，他又想起她手中抱着的那只巨大的罐头瓶子，想起那里面满了又空、空了又满的白开水，想起了她毛衣下面开始隆起的小腹。他不敢去。可是在几天后的晚上，他还是出现在了杨国红的小店里。当时已经八点了，杨国红还不舍得打烊关店，他估计她还在侥幸地等待今天可能有的最后的顾客。她顶着一头半白的灰蒙蒙的头发，正抱着那只巨大的玻璃瓶子枯坐在椅子上。他站在黑暗中隔着那扇玻璃门看着她，就像在看一只透明的罐头，然后他推门进去了。</p>
<p>她惊讶地看着他进来，她站起来呆呆站了一会，然后忽然就伸手关了灯，再然后，就着外面鬼魅一样漂泊的车灯，她一言不发地把他摁在了那张吱嘎作响的木椅里。她一言不发地埋下头，他不敢看她一眼，惟恐看到里面一半的白发。忽然他痛苦地大叫了一声，放开我。然后他的泪就下来了，那个跪着的女人顿了一下，他感到自己大腿上一片湿凉，那是她的眼泪。从杨国红的店里出来很久了，他还是无法停止哭泣。他一边没有目的地走在街上，一边哗哗流泪，后来他索性当着来来往往行人的面蹲在了街头嚎啕大哭起来。</p>
<h2 id="四">四</h2>
<p>此后李天星又去找过杨国红两次，见杨国红再没有提过任何一个关于要和他结婚的字，他才确定她离婚不是因为要和他结婚。他像得了一种新的保障，又往她那里跑得勤了些。杨国红为了多点生意，干脆就住在了小店里，她在货架后面搭了张木床，晚上就睡在那里。早晨早早开门营业，快到深夜了还舍不得关门。</p>
<p>他去找她的晚上，两个人就一起挤在货架后面的床上。她对他每次来找她都表现得感激涕零，她这种感激让他害怕，这种害怕在做爱中又起到了迅疾的化学反应，过快来到的高潮甚至让他在一瞬间都怀疑他其实是爱她的。之后两个人拥抱着，一动不动地躺在那简陋的木床上，平静异常，像食物即将腐败的前夕。他抱着她，却仍然警惕着她马上要说出来的每一句话。他生怕在某次做爱之后她对他说，我们结婚吧。可她一直没有，好像已经忘了世上还有婚姻这件事。</p>
<p>渐渐的，从前偷情时压在他们身上的种种重量被抽去，竟一时有点适应不了，好像脚下空荡荡的，随时会一脚踩空。从前做爱时的紧张、急促和兴奋等各种骨骼林立的感觉，也在忽然之间长胖长肥，长成了一种好像在一起睡了一千年的厌倦感。他想，就是真结了婚也不过就这样了吧，老夫老妻的感觉。不得不说，没有婚姻的形式却能享受到婚姻的实质，还是不错的。只是，他又想，如果他们一直这样下去，她就连再嫁人的机会都没有了。也许等他离开了，她自然就会再找个人结婚了。</p>
<p>他看着陈旧斑驳的天花板说，真是想不到世道变得这么快，像做梦一样。你看你们单位原来多好，以前你们单位的女人们想结婚的话，会有很多男人可挑</p>
<p>他不敢说完的话是，可是现在，没有男人会愿意娶你们这些下岗的女人了。她果断打断他，声音突然变尖变硬，下岗就下岗，我自己开个小店，挣得倒比以前的工资还多。</p>
<p>他踌躇着话语，怕她会反应激烈，我…还是想着要离开这里。</p>
<p>她却只是把头疲惫地靠在他的肩膀上，说，要出去就早点出去吧。你说你要是真的出去了打算干什么？想好了吗？</p>
<p>……不知道。</p>
<p>听我的，你还是考大学吧，我听说现在考大学的年龄也放开了，你就去报名参加高考。大学毕业了留在外面就不用再回来了</p>
<p>…就怕考不上。</p>
<p>一年考不上两年，两年考不上三年。总能考上的。</p>
<p>可是…</p>
<p>上大学的学费你不用担心，我供你上学。我无儿无女的，又没有什么负担。至于下岗，我已经想明白了，我们什么都没做错，这就是我们这代人的命，每代人都有自己的命。</p>
<p>他脑子里轰的一声，在那一瞬间他想他应该赶紧从她这张床上逃走，可是，她挡在他面前岿然不动，她已经提前在他面前债台高筑了。然而更可怕的是，他发现他不但没有逃走，还转身更紧地抱住了她。他亲眼看着自己身体里腐蚀出了一个黑洞，于是他赶紧跳进去藏身。他必须得承认了，在她说这句话之前，其实他就已经知道她要说什么了。</p>
<p>他拦不住。其实是他根本不想拦住。</p>
<p>这晚之后，他又有一段时间不敢去找她。不敢去找她的时候又充满了恐惧，仿佛那债台是会自己收利息的，他在她这里越欠越多，以至于就要还不清了。他更坚定了逃离的念头，便在这个夏天跑到教育局，毅然报名参加当年的高考。似乎这是通往外面世界的唯一一叶孤舟。</p>
<p>当时报考了南方的一所美术学院，然后，那年，他顺理成章地没有考上。</p>
<p>他在窗前抽烟直到后半夜。一只椰子壳做成的烟灰缸里已经戳满烟头，如龟背上驼了一片丰饶的墓碑。蛙声已浅，渐渐沉入湖底，草木则在蛙声零落之后开始舒展，湖尽头墨蓝色的夜空里出了几缕血丝，是夜与昼交错而过的摩擦。他开始感到困意了，这才离开窗前到沙发上睡觉。</p>
<p>睡到第二天中午醒来的时候，床上的女人已经走了。她走前把他的房间打扫收拾了一番，以至于他一觉醒来竟以为自己昨晚睡错了地方。桌子上床上干净萧索，看上去像刚刚被装进了一只明净的玻璃瓶里。他简直不敢走过去。就连昨晚那只插满烟头的烟灰缸，也被清掉了所有的烟头，只剩下了一只孤独坚硬的椰壳。椰壳里的肉早已风干，腐烂，成灰。</p>
<p>他光着脚在房间里走了一圈，一边惶恐着一边感动着，与此同时，他在自己身体深处的某个角落里忽然嗅到了一丝隐隐的不安。似乎有只兽正面目不清地蛰伏在那个角落里，在他与它猛然打到照面的倏忽之间，他不由得打了个寒颤。</p>
<p>从一九九七年到一九九九年，李天星连续参加了三次高考，结果是连续三年没有考上。第三次高考结果出来之后，李天星不吃不喝一连几天没有出门。几天后杨国红去了他的宿舍找他。</p>
<p>这是一排破旧的平房，年久失修，因为没人管，房前砖头缝里的荒草可以没过人的小腿了。刚分到学校的单身老师在这过渡一般都不会超过一年的，走了一茬又一茬，李天星成了在这宿舍里住得最久的元老。他的宿舍门窗紧闭，窗户里挂着帘子，从外面看不到里面有没有人，门从外面没有锁，却推不开，估计是里面拴上了。杨国红使劲敲门，屋里面静悄悄的，隔壁宿舍里倒探出两张脸来好奇地窥视着她。敲了半天里面还是不应，她便从地上捡起半块砖头敲碎了门上的一块玻璃，然后把手从玻璃洞里伸进去把门栓拔开了。</p>
<p>屋里一片狼藉，桌子上放着一碗不知几天前的面条，上面已经长出了一层绿色的霉。床上躺着一个人一动不动，床下则横七竖八地躺着几只瓶子，塞着瓶塞，里面装的是浑浊的黄色液体。她弯下腰去捡那几只玻璃瓶的时候，他忽然从床上蹦了起来，一脚踢翻了那几只瓶子，对杨国红大声吼道，不要碰，你知道这是什么，</p>
<p>这里面是我的尿。杨国红没吭声，弯下腰还要捡，他一脚又把那只瓶子踢掉了，然后指着门口说，你出去。杨国红眼睛追着那只瓶子，嘴里却说，你明年再考一次，我保证你再考一次一定能考上。今年不是美术分都够了吗，就是文化课不够，你再好好把文化课补补，真的，再考一次肯定能考上。</p>
<p>李天星从床上跳下来，推着她往门口走，你出去，快出去，我要睡觉，别管我睡觉。杨国红猛地甩开他的手，那我把这些瓶子捎出去，你几天不出门，留在屋里都要臭了。她过去又要捡那些瓶子，李天星跟着扑过去夺瓶子，两个人竟厮打起来。他用力抢过瓶子一屁股坐在地上，抱着那些瓶子忽然便大声抽泣起来，他说，你快出去，你来干什么？你也不看看，有谁在这破房子里住过四年的？我就住了四年。冬天这屋里都能结冰的。你看看我有什么好，我什么都没有，你还来找我做什么？你应该躲我远远的，看都不要看我。你看看我算个什么东西啊？要钱没钱，要房子没房子，我就是个破小学老师。我什么都不是，我以前学习成绩好，让我去读中专，说毕业就能混工作，可等我毕业了却已经没有人读中专了。我刚毕业就被淘汰了。我讨厌这个地方，可是我又被分配回来，我哪里都去不了。你说考大学，我这么大年龄了再去考大学，你也看到了，连着三年都考不上，我只是在丢人现眼。我这样没用的人，你还来找我做什么？以后不要再找我了，我也不会和你结婚的。</p>
<p>杨国红的泪也哗的下来了，她冷笑一声，你以为我来找你就是为了和你结婚的？你是不是以为女人不结婚就会死？你以为我这三十好几奔四十的女人了离了男女之间那点事就不能活？她说着拎起地上的瓶子向门口走去，见她要走，李天星慌忙爬起来从背后抱住了她。</p>
<p>杨国红泪如雨下，如果说我以前还想过和你在一起的话，那也是我工作好的时候，还没有离婚的时候我真想过。可现在我没有工作了，离婚了，我就绝不会再想这个事了。以前和我前夫没有离婚的时候，我总觉得我活得不值，我不甘心就这样一辈子没有爱。可我现在什么都没有了，就是个破下岗工人，我倒什么都不想了。可你是要成画家的，你怎么能和我一样。我早就想明白了，要心里真的喜欢一个人，为什么一定要和他结婚，为什么一定要守着他，两个人真的守在一起的又有几个是幸福的？不如让他想去哪里去哪里。你去上大学，我供你上。人要是只为自己活都活不下去的，都要为点别的，都得在心里相信点什么。</p>
<p>他从背后紧紧抱着她，泣不成声，他说，我不考了，我真的不考了，我就这样往下混吧，反正人总归是要死的，怎么活都是要死的。每参加一次高考我就加倍觉得自己无能，什么都不是，连自己的画也恨不得全都烧掉。不要再让我考了，我就愿意住在这破宿舍里，我就愿意老死在这里。你不要走，我们现在做吧，这世上还有什么比做爱更有意思的事情？没有了吧？我们还是做爱吧，想怎么做就怎么做，好不好？说着他开始动手，她站在那里不动，背对着他，声音苍老，你觉得我们现在还能做爱吗？他嘴里喃喃道，怎么不能，啊？你说怎么就不能了，人总是要死的是不是。怎么活才叫有意思？怎么活都是要死的，那还怕什么？</p>
<p>他果然不行，他又是恐惧又是不甘，便更用力地抱紧她，像是要把她死死镶嵌进自己的身体里。她背对着他一动不动地站着，看上去并不痛苦，也没有欢娱。最后，他彻底放弃了，却不肯松手，就那么紧紧抱着她，一直抱着她。一九九九年结束，令人惊恐不安的二OO○年终于来到了。这带着三个的貌似庞大的年份像彗星一样刚落到人间的时候，交城县的人们都不知道在这陌生的年份里会发生什么大事心里一边忧虑着一边却隐隐盼望着火星撞地球的大事发生，天下大乱了人间也就没有秩序了，富人成了穷人，穷人兴许摇身变成了富人，干着肥差的丢了工作，已经下岗的说不定又找到活路，已经开始用手机用电脑的人和那些还吃不饱饭的人看起来也没什么不一样了。乱世的好处就是，脱了裤子谁都一样，着急起来谁都是英雄。</p>
<p>结果，二年过了一个月了，所有的人愣是安然无恙地站在原地，火星没有撞地球，太阳照常东升西落，阔人依旧开着小汽车，无业游民们依旧为抢夺一寸地摊而大打出手。但毕竟是进入新世纪了，县城里不时拔起几座楼房，开始有六层的、十层的，后来居然开始有十二层的了，终于把县城中心称霸多年的四层百货大楼给比下去了。百货大楼宣布彻底破产，那栋四层的老楼已基本废弃，玻璃窗变得黑洞洞的，瘮人，好像里面成了蛰伏着什么怪物的巢穴。不时有些南方过来的游贩打着清仓大处理跳楼大甩卖的旗号，驻扎在里面，向县城的女人们兜售些从南方云游过来的廉价商品。</p>
<p>新世纪的一月份过去了，二月份也过去了，春天又四平八稳地来了，该开杨花开杨花，该吹柳毛吹柳毛。这交城县里看起来人人平安正常，一切正常到了不可原谅的地步。但还是有一人在新世纪摊上了大事，就是李天星。他被人匿名举报了，不知是什么人把他举报到教育局，说他乱搞男女关系，睡人家的老婆。教育局去学校调查，结果很多老师都知道李天星这点事，说他一点都不急着结婚就是因为有别人的老婆可睡。然后学校就做了通报批评，再然后，李天星就被开除了。李天星背着行李直到走出学校的门口了才忽然明白过来，妈的，二OO年里的头件大事就是，他居然也成了无业游民。</p>
<p>一个人忽然丢了工作的感觉就好像身上的某根筋突然被人抽走了，走路还是能走，却觉得脚下每一步都是虚的，没有韧性，打着晃，觉得自己随时会摔倒。一路上再看到那些下岗两三年仍旧在摆地摊卖菜的人们，却忽然觉得他们原来都是自己的亲戚，只是现在才有了血缘感。他想冲过去，抱着他们每个人痛哭一场，却还是忍住了，灰溜溜忍了一路去找杨国红。他先是失魂落魄地告诉她自己也没工作了，被开除了，接着便开始破案，把自己认识的每一个人都拿出来做嫌疑犯。和杨国红商量了一晚也愣是没商量出任何结果。最后杨国红说，你既然连工作都没了，就死心塌地考大学吧，这是你唯一的出路了。我表哥在县高中当老师，我让他帮你联系一下毕业班，你插进去跟着高中生们听上半年课，文化分就一定能考过了。</p>
<p>确实别无选择了。于是，这个春天里，他出了一个学校的门，又进了另一个学校的门。只不过是以二十四岁的高龄在塞满学生的高中教室后面做旁听生。每天中午杨国红把饭给他送到教室里，她不让他中午回去吃饭，说这样可以节省时间多看会儿书。晚上又给他准备好蜡烛，教室熄灯后让他点着蜡烛再看一小时的书才能回去。她说你看你工作都丢了，要是再考不上大学你就只能去街上摆地摊卖红薯了。你看看那些摆摊的人们，夏天被晒死，冬天被冻死，在路边坐一冬天，脚上全是冻疮，到春天冻疮一化开能把你痒死，像条狗一样，看见什么都想过去蹭一蹭痒处。 这样蹭了半年课，在第四次参加高考之后，他终于考上了远在杭州的一所美术学院。</p>
<h2 id="五">五</h2>
<p>又是雨天。雨一直在下。</p>
<p>来看鱼和荷花的游客寥寥无几。李天星百无聊赖地把一朵夹竹桃揉碎了，洒在湖面上，一条血红色的大鱼立刻赶过来啜食花瓣，在它身后，一大团血红色紧随而至，好像湖面划开了一个伤口，鲜血正汩汩而出。这时候，一个女人走进了游廊，走到他面前说要画像。</p>
<p>他端详着坐在眼前的女人，四十多岁，眼睛空空的总是盯着湖面，好像那眼睛她已经不用了。他一边画一边问她，以前来过这里吗？女人看着湖面说，很早以前了，那时候二十多岁，那时候我们刚刚结婚，一起来这湖边游玩。他又画下去一笔，二十年前这湖边好玩吗？她说，我记得我们一整天都在这湖边拉着手走来走去。那天他穿的是一件格子衬衫，我穿一条大红裙子。那时候就有这荷花，就有这鱼。二十年过去了，荷花还在，鱼还在，只有人回不到从前了。</p>
<p>他画出了她空洞的眼睛，问了一句，你丈夫呢，今天没和你一起来？她把目光投向更深的湖面，半天才说，那次回去没多久我们就离婚了。为什么呢？</p>
<p>…………</p>
<p>他画完了她的嘴唇，又问了一句，那你后来呢？</p>
<p>她说，就一个人，二十年也过去了。我没法再找人结婚是因为，我后来发现还是他最好。每天晚上睡觉之前我都会想他一会，都会把我们在一起时的所有情形再温习一遍，我总是一遍一遍想起当年我们一起拉着手走在这湖边的情形。</p>
<p>他没有回来找过你吗？</p>
<p>这二十年里都没有，就前几天，他忽然来找我了</p>
<p>那就没白等二十年…怎么他没一起来？没有。</p>
<p>你也算没有白等这二十年。二十年说长也长，说短也短。</p>
<p>…………</p>
<p>好了，你看看满意吗？</p>
<p>女人拿自己的头像仔细端详了一会，默默付了钱。雨还在下，天色开始转暗，湖里的鱼和荷正在渐渐隐退，渐渐掉色。失去颜色的荷花和鱼群在夜色里看上去有些狰狞。他收拾起画板，说，天黑了，我要回去了，你也找个地方先住下吧，从这往右出去就有几家宾馆。女人说，谢谢你，我再坐会。</p>
<p>李天星便背起自己的东西慢慢往回走，心里不知怎么有一种奇怪的紧张。走了一段路停下来想返回去，却又觉得这样更不妥，正踌躇间忽然听到湖边传来一声沉闷的扑通声。他扔下东西急忙返到刚才那游廊，却发现那女人已经不见了。游廊里空空的，好像从没有人来过这里。他四处寻找着，大口喘着气，惊恐地盯着那湖面。湖面上微微泛着涟漪，远处的荷花铁画银钩地挺立着，纹丝不动。有一条鱼探出头吐着泡泡，发出了天真而诡异的扑哧声。</p>
<p>到处都没有女人的影子。她像是根本就没有来过。</p>
<p>就在这时他忽然看到他刚才画的那张像正挂在竹桃的一个枝头上。女人正从画像里安静地却是阴森森地看着他。</p>
<p>他背着画板惊魂未定地回到自己租的老房子。走到门口刚准备开门时，门边的暗影里忽然站起来一个人，是个女人。他吓一大跳，一时竟以为是湖边消失的那个女人。女人走到他跟前他才认出来，不是湖边的女人，倒是前几天曾在他这里过夜过的那个年轻女人。他恍惚记起来她临走前还把他屋子里收拾得干干净净。可是，他甚至连她的名字都还不知道，她怎么又来找他了。</p>
<p>在他这里过夜过的女人倒不止一个，只是，都不过是一夜。女人们在这老房子里成了只有一夜寿命的怪物。他也从不望她们会在这里作更久的停留。因为她们会跑得比他期望得还快。在任何时候，不侮辱自己的唯一方式就是根本不要有任何期望。他习惯了这里只适合女人们像候鸟一样作一次性的停留，腐朽的家具，生锈的水管，潮湿的墙角生满了滑腻的青苔，各种飞虫围着惨白的吊灯乱撞落满尸体，最后，还有一个喜欢画画的落魄男人。</p>
<p>自从明白了女人们只会把他当情人之后他就先发制人，再不让任何女人在他这里度过第二夜。一夜那还算情人，这一夜里他仍是被幻化出来的艺术家，那女人便是艺术家的女人，至于这房子则是荒冢里忽然变出来的狐媚的宅子，带着聊斋式的刺激和惊险，倒也适合做个情欲的巢穴。可是第二夜再来，便坐实了这是人间了，这就只能是寒酸丑陋的人间了。那狐媚变出来的五光十色的宅子又变回了一堆破败的荒冢，而他也不再是黑夜里的艺术家，他骤然揭去面具，面具底下是个一文不名的穷人，靠给游人画像来糊口。</p>
<p>他对这个女人的再次到来隐隐有些不快，可是她已经站在门口了，又不知等了他多久。他还是把她让了进去。屋子里又是多日没有收拾过，一片狼藉，他素日里就是这样。地上堆着一堆要洗的脏衣服，桌上落了一层灰，前两天吃过的快餐盒还放在桌子上没有扔掉，已经长出了许多小虫子在里面乱爬。</p>
<p>屋子没有经过丝毫收拾就猝不及防地被这女人看到了，这感觉类似于不穿底裤被人窥到了里面一样，在那一瞬间里他站在那里有些尴尬又有些恼怒，便扔下画板问了她一句，你今天又来有什么事？那女人却已经开始动手给他收拾房间了，她一边收拾桌子一边说，我就是想着来给你收拾收拾家，上次在你家就给你收拾了好一会才收拾完，我就猜你的房间又乱了。女人已经开始扫地，然后又忙着洗地上的堆衣服。他看着她的背影有些恍惚这是不是上次在这里过夜的那个女人。这些年里，那些和他有过一夜欢的女人们，他居然都不记得她们的名字，甚至，连她们的模样也记不起来了。或者说，她们根本都没有面孔，她们只是一层一层在他记忆里凌乱地叠放着。因为，他已经不需要她们有面孔了。</p>
<p>他从那所美术学院毕业的时候是二五年，这一年他已经二十九岁。毕业之后，他发誓再不回县城，便留在杭州开始找工作。和二十岁出头的小孩子们挤了几天人才市场他才发现，自己的年龄已经没有了任何优势。当年在交城县做小学老师的时候，只想着通过上大学便可以跳进城市了，从此，后半生就要改变了。没想到，等他千辛万苦把大学读完的时候，他突然惊恐地发现大学已经什么都不是了，读完大学可能只是一个失业的开始。这时候他才意识到了他们这些油画专业的学生找工作的艰难，很多学生最后还是被迫选择了去当老师。中学老师，甚至小学老师。只要能留在这城市里，小学他们都愿意去。上学的时候很多美术专业的男生都是长发飘飘，等到找工作的时候，个个都理成了最规矩的短发，穿着市场上买来的劣质西服，开始进出于各种面试场合。</p>
<p>人才市场里人山人海，一片黑压压的，到处是穿着黑西服的学生。李天星挤在这样一簇一簇的黑西服中间，恍然有一种错觉，觉得这些刚毕业的学生们正聚在一起举行一种盛大的集体节日。他们穿着相同的服装，做着相同的事情，把自己的简历高高奉上的动作就像一种祭祀的行为，虔诚的，急切的，恐惧的，每个人都前所未有地端庄、恭敬和谄媚，都前所未有地伶牙俐齿，都前所未有地害怕被遗弃出这集体的节日。他亦步亦趋地跟在他们后面，跟着他们递简历，跟着他们赔笑脸，跟着他们过节日。</p>
<p>这是属于这些大学生们的节日。盛大的、隆重的、无一人可以幸免的节日。而他掺杂在其中却像一个走错地方的凄凉老人。就是站在这人才市场的人流当中，他想起了多年前的下岗工人们集体拥上街头抢食的场面。他忽然明白了，确实，每一代人都有自己的节日。他只是，碰巧把两代人的节日都赶上了。</p>
<p>年龄上没有了任何优势，在校时获过的一个油画小奖也没有帮上他任何忙，而他是坚决不愿再去一所小学当老师了。好不容易才从一所小学里逃出来，再自投罗网地投进另一所小学，简直是鬼打墙。这样，在待业三个月之后，他草草地选择了一家广告公司去做一名普通美术设计员。</p>
<p>电话里他告诉杨国红他现在是白领了。他在公司附近租了一间小房子，每天早晨八点之前必须赶到公司打卡。打卡之后，全公司的员工集合起来，男女老少围成一个大圈，手拉手开始唱《明天会更好》。每次站在公司的会标下跟着一群人唱这支歌的时候，他都有一种站在日不落国旗下宣誓的恐惧感；每次唱到“明天会更好”那句时，便由不得会有毛骨悚然的感觉。似乎接下来就是举国歃血为盟，奔赴前线了。每天早晨的公司例歌成了对他的酷刑，设计的方案又屡次被总监打回。总监甩着一头油光可鉴的头发对他挥舞着手咆哮着，你没有任何广告的感觉，要感觉，要找出适合市场的感觉。你不够虔诚，你知道我都是怎么做设计的吗？每次做图之前我必要沐浴焚香，穿着丝麻衣物，在夜深人静的时候才能寻找灵感。你以为灵感是谁想找就能找到的？</p>
<p>另一个让他感到恐惧的问题是，他眼看就要三十岁了，他觉得这回自己真应该结婚了。为此他悄悄托公司的一个同事给他介绍女朋友，见人家答应下来，便高兴得要请人家吃饭。想来自己好不容易混进了城市，又读完了大学，已不再是当年县城里的小学老师，找个女人结婚总应该容易些了。但那同事迟迟也没有给他介绍来女人，他有心催催人家，又觉得不好意思，便有事没事往那同事的部门凑。时而去冲杯咖啡，时而去交方案，为的就是在那同事面前露个脸，然后再露个脸，好提醒人家想起自己答应下来的事。</p>
<p>过了大约一月有余，那同事真的给他介绍来一个姑娘，安排他们当晚见面。李天星大喜过望，上班期间偷偷溜进卫生间照了好几次镜子。见镜子里的自己虽是长发飘飘，只可惜有两天没有洗了，略显油腻。又遗憾事发突然，今天没穿上自己那身最好的衣服。又数了数自己身上带了多少钱，想着够不够请姑娘吃顿饭。偏偏这时杨国红打来了电话，她隔三差五给他打个电话，问问他工作的情况，问他钱够不够花。他见是杨国红的电话，便躲在卫生间悄悄接了，惟恐被人听见一般，只敷衍了她两句便挂了电话。</p>
<p>一想起电话的那头还系着这个叫杨国红的女人，他心里忽然一阵紧张，觉得她本应该是藏在匣子最深处的收藏品，她却一定要自己跑出来见天光。为了晚上那陌生的姑娘，他急着把她赶回匣子里，更不允许她自己跑出来。至于上大学时的那些学费，他勉强镇定地想，有朝一日他总会还了她的，总不会赖了她。</p>
<p>晚上他带着自己一头油腻的长发和两百块钱前去相亲，姑娘长相平庸，两腿短粗，尽管这样，还是毫不留情地花掉了他的两百块钱。第二天还没等他回过神来，同事已火速把昨晚那姑娘的话传到了，姑娘说，觉得他人还不错，但不适合结婚，年龄不小了还没房没车，在公司里做个小职员也不会有什么前途。没爹没妈倒是个有利条件，省得赡养他们，但麻烦的是，死了爹妈，生了小孩又没人帮着带了。大家还是做个普通朋友吧。</p>
<p>听了这消息他想到的第一件事就是，昨晚的两百块钱打水漂了。同事见他脸色不好看，便安慰道，见一个哪够啊，你就得多见，起码得见一个加强连。见多了你就知道了，也不用老请她们吃饭，找个不花钱的地方比如公园门口啊湖边啊见见就算了，现在的姑娘们哪，也敢吃，见一个吃一个，就在一个城市里也敢从南吃到北，从东吃到西。</p>
<p>后来陆陆续续又有同事给他介绍过几个，这些姑娘们像经过了统一的培训一样，口径完全一致，觉得他人还算老实，但不适合结婚。她们统一表示，她们没有信心和他谈感情，也没有耐心等一个三十的男人变成潜力股，以她们的年龄，她们要找的是成品，而且是一开封就能使用的那种加了很多防腐剂的成品。</p>
<p>再到后来，见完一个姑娘临道别之前他学会了先发制人地告诉对方，我觉得我们不合适。然后当着姑娘的面，忍痛挥手拦下一辆出租车扬长而去。因为觉得在这等酷烈的情境之下，还要慢慢等一辆公交车载他而去实在是显得窝囊。他自己像一个提前缴了械的战俘，事先就把对付打击的防卫力量解除了，当打击真的降临时已经砸不到他身上了。对于他来说，失败的相亲竟成了对某种打击的不断期待。</p>
<p>这天，他去新来不久的艺术总监那里交方案。新来的总监是个三十多岁的少妇，据说已经有一个上小学的儿子，但皮肤保养得活像十八岁。新总监对他此次设计表示很满意，并提出下班后要和他共进晚餐讨论下一步的设计方案。说完她扬起一只眉毛对他一笑，他也连忙对她回笑，真笑完了，继之以假笑，好把心里的恐惧吓退。在下班之前又频繁地出入了卫生间几次，他发现自己很紧张，却一时想不出是为什么紧张。趁着卫生间里没别的人，他站在镜子前细细端详着自己。他发现自己长得确实还不错，就是穿着寒酸了点。他又觉得今天的情境有些似曾相识，似乎在哪里见过，而这似曾相识又让他不由得心生恐惧。</p>
<p>下班之后他忐忑着去赴宴。总监请他吃西餐，两个人喝光了一瓶上等红酒。餐厅昏暗的大堂里有人在弹钢琴，音乐一缕一缕地飘过来，萧索的落叶一般落在他们中间，落了厚厚一桌子。他们俩围着一盏烛光对坐着，女人脸颊绯红，眼角波光潋滟地看着他。他忽然感到了一种黑暗的热闹，如此熟悉，熟悉得简直不敢再多看她一眼。这时，对面的女人飞着眼角说，我喝得有点头晕，你送我回家吧，这几天我老公带着儿子去日本了。</p>
<p>他脑子里轰隆一声，整整一下午的猜测和恐惧忽然都夯进了那条准确无误的缝隙里。心里明白过来，浑身炙热，脸上却还是不得不大义凛然。然而，他终究还是把她送到了楼下，然后，应她要求又把她送到家门口。然后，家里，再然后，床上。在他走进她家门口的一瞬间，他恍惚觉得自己是回到了十年前交城县百货大楼下面的那间值班室。眼前这些精致的家具和那张阔大的床如同摇曳在那间值班室里的倒影，这些柔软妩媚的倒影与值班室那张粗糙简陋的木床交叠在一起，波光粼粼，风摇影动，却更显得妖气森森。他站在那里忽然就想起了杨国红，想起了当年杨国红站在那里向他露出的两只乳房，想起他已经很久没有主动给她打过一个电话。他忽然就眼眶潮湿发涩，他一步走到床前，把一只手粗暴地伸进女人的衣服，准确地摸到了她的两只乳房。他恍惚觉得这乳房也是杨国红的。在那一瞬间，他的泪还是下来了。</p>
<p>这一年里所受的所有屈辱在这个夜晚忽然都轰然复活了，从他身上的每个毛孔里生长出来，急着要长成一片茂密浩瀚的森林。它们压在他的身体上面，变成了他的一部分体重，他忽然觉得自己力大无穷，近于野蛮。床上的女人却是得了意外之喜，似乎没想到他床上技艺竟如此上乘，又如此温柔体贴，立刻对他青眼有加，还没做完就承诺只要她丈夫不在家的时候就让他来她家欢娱。</p>
<p>他心里明白他这是又一次被女人当情人了。就和十年前一模一样，再一次充当了一样的角色。妈的，好像他天生就是这块料。他想娶一个女人的时候，女人们都对他避之不及，嫌他穷，嫌他没有房子，她们不给他发那张通往婚姻的通行证。她们其实是在告诉他，想走进婚姻是必须有执照的，像他这样的男人还是更适合做做情人，无照营业。这年头，总有寂寞的少妇，总有性生活不和谐的女人，就是以前甘于寂寞的女人现在也忽然觉悟了。于是他便有了一块还算丰饶的市场。</p>
<p>在这个夜晚他忽然明白过来，这么多年里他看似自由，孑然一身，其实身心都不是自己的。其实他从来就没有过一点自由。第二天在公司见了总监之后，他发现她面不改色只谈工作，好像压根儿连饭都没一起吃过。然而，临下班之前她又对他发出了新的暗示，希望他今晚再去她家共度良宵。他自然去了，侍奉上司是员工的本分，更何况是和这个中产阶级的少妇。是于是在她老公带着儿子从日本回来之前的几天时间里，他每晚都在她家度过。做爱之后，在床头挂着的巨大的结婚照辐射下，他抱着照片里的女人聊天。他说，你胆子真大，敢把我带到你家，你不害怕吗？女人一笑，现在不都这样，男人们找情人，女人也一样。我的女友们都有情人…不一定是身边的，有的是从网上找的，反正又不是冲着结婚，大家高兴了就在一起，不高兴就散了，也是好聚好散。我一直在想一个问题……你说，现在的人们为什么会这样地放纵自己的情欲？</p>
<p>…………也没什么奇怪的吧，现在的人们都已经不知道自己到底该去做什么该去想什么，或者说什么都不能做，什么都不能相信的时候，人就会开始向情欲靠拢吧，纵欲成了一个社会必然的需要。要不然做什么？大脑简单，心灵空虚的人们。更何况现在的人，有钱人钱多到不知道该怎么消费，钱死活花不出去，没钱人说不定最后还得靠卖淫为生。大约也只有靠情欲，所有人才会觉得暂时总有点事做了，不必有那么多的痛苦，也不必再思考那么多无用的东西。我们只是一个最渺小的个体，不随波逐流，我们能做什么？</p>
<p>女人倚在他怀里沉沉睡去了。他在黑暗中一直睁着眼睛，在他的头顶悬挂着的那张结婚照里，一个陌生男人正抿紧微笑的嘴唇无声地注视着他。而男人臂弯里挎着的那个穿着白色婚纱的女人此刻正赤裸着躺在他身边。他惟恐这男人一步从照片里跨出来，便把身子翻来覆去，想找到一个最合适的角度好避开照片里男人的目光。</p>
<p>到后半夜还是睡不着，他便干脆爬起来到阳台上抽烟。整个小区里寂然无声，黑黢黢的树影如波涛起伏，站在阳台上倒像是舟行水上，所有的时光迎面袭来，又在瞬间迅速后退。站在黑暗中他再次想起了十年前的那间锅炉房里，就着锅炉里血红色的火光，他和杨国红站在漆黑的煤屑里不顾一切地做爱。那时候他觉得自己是整个时代的叛徒，是独一无二的，他和杨国红做的是当时别人都不敢做的事情，他敢去挑衅整个庞大的社会秩序。那时候无论别人怎么看他怎么说他，他都觉得自己和杨国红不仅仅是在偷情，还有点像英雄在追求什么。</p>
<p>而现在，情境与十年前如此形似，质地却已完全不同。他不仅仅是在和一个女人偷情，更是在被一条巨大的深不见底的河流裹挟着往前走，他不过是河谷中的一粒石子，和其他所有的石子没有任何不同。他再不出奇，再没有英雄色彩，更不用说叛逆。他单单只是在和一个女人为了情欲而偷情，而且，这种偷情居然是服从秩序的，是顺流而下的，是合理的。</p>
<h2 id="六">六</h2>
<p>这一夜过去不久之后，他便从广告公司辞职去了一家杂志社做美编。因为被拒绝的次数太多，他已经从内心相信不可能再有女人愿意和他结婚，他没有钱没有房子没有前途，很快连年轻都没有了，他根本就不配得到婚姻。就像一个人不小心提前看到了自己的阳寿，情知没有未来反倒更坦然无畏了。他像法官一样果断地给自己提前下了判决。连所有的希望都一刀斩断之后，便发现确实没有什么好害怕的了。</p>
<p>他一下子理解了当年杨国红下岗离婚后的心境。</p>
<p>然后，他开始更多地回忆当年在交城县和杨国红在一起的那几年时光，越发眷恋。他心里开始认定，那段时光是最好的，虽然他们没有结婚，但那也是最好的时光了。可见好时光与婚姻根本无关。于是他开始陆续从网上找些寻欢的女人，这些女人多数都有自己的家庭，和他在一夜或几夜之后便纷纷销声匿迹了，连个泡沫都没有留下。他毫不意外，甚至认为这是最好的结局。总归是要分开的，时间的长短只不过是个幻象。时间是幻象，情欲是幻象，人也是幻象。</p>
<p>接触女人多了，他便发现他从小在舅舅家养成的察言观色的习惯竟成了降服女人的杀手锏。他发现无论什么样的女人，你只要肯对着她的耳朵灌一些情话，做出温柔体贴的样子，她都会对你俯首帖耳。即使年龄再大的女人也会在这样的情话面前持有返老还童的绝技。他一边制服着女人，一边需要着女人，一边又深深地厌倦着她们。</p>
<p>与此同时，他又暗暗宽慰自己，这样也好，不用担心有什么伤痛随时到来，他已是钢铁不坏之躯了。</p>
<p>尽管有时候他也会因为很深的厌倦而躲着不想见任何女人，然而在这短暂的厌倦之后他还是要再次出发去寻找女人。他渐渐发现自己需要的其实已经不再是女人，也不是性欲，他需要的，其实只是一种对成瘾心理的满足。</p>
<p>他绝望地感到，自己成了一名性瘾患者，一种新鲜的疾病，它像病菌一样在新的时空和光阴里生长着，进化着。</p>
<p>和他发生一夜情的女人各种各样的都有，有公司小白领，有在校大学生，有家庭主妇，有商场成功人士。她们来来去去，来来去去，脱下白天的职装却连一个真实的名字都不会给他留下。她们有丈夫，有男友，却还是需要他，需要和他之间水草般纠缠的情欲，也需要用这偷欢里长出来的愧疚去喂养她们的婚姻和恋爱。当他想起她们那些已经重叠在一起的面孔时，忽然又想到了那个词，节日。这种庶民的情欲狂欢原来也不过是一种节日。他亲眼看着自己这么多年里从一场节日奔赴另一场节日，就像一个急吼吼的，忙着要在节日的集会上抢到一串糖葫芦的少年。</p>
<p>在这家杂志社里的境遇并没有比在广告公司更好，领着一份勉强糊口的咸鱼工资，城市里一路欢呼雀跃的房价和他也没有关系，他看都不敢看，那是别人的房价。这天，杂志社两个编辑忽然在下班后叫住他，悄悄对他说，大学毕业总不能一直就租着房子住吧，要在城市里扎根总得买房的，买房是要钱的，办杂志其实就有生财之道，问他愿不愿意一起去。他问去做什么。他们说，就是去找一些企业给他们写些收费的稿子发在杂志上，这种稿子都是按版面来收费的，一个稿子收个十万八万是不成问题的。并说他们有记者证，联系这样收费高的稿子不成问题。一起去，他负责拍照，事后三个人分成。李天星第一次遇见这种事，略一犹豫便答应下来，他甚至在那一瞬间里忽然觉得在这个城市里呆下去还是有希望的。房子们在遥远的地方向他招手。</p>
<p>过了几天，这两个同事果然叫上他，一起去了郊区的一家建材厂揽活。李天星没有想到他们身上带的居然是假记者证，当谈判到收费问题时对方不客气地拒绝，表示没兴趣。然后他们便亮出记者证威胁会给他们工厂曝光问题，结果假证被当场识破，对方以被敲诈为名报了警。调查下来，发现那两个人已经不是第一次做这样的事了，李天星是初犯，但还是稀里糊涂被判处了一年有期徒刑。</p>
<p>眼前穿着碎花裙子的女人已经把整个屋子都收拾得窗明几净。地上的脏衣服洗过了，正湿漉漉地搭在阳台上，好像刚刚打捞出来的水生植物，滑腻而冰凉。她在卫生间里点起了薰香，莲花燃烧的味道清洁悲伤，使这老旧的房子里忽然有了一种寺庙的肃穆和慈悲。除了杨国红，她是第二个给他打扫房间的女人。很多年没有女人对他这么好过了，这让他有些感动，然而更多的是隐隐的不安。他摸了摸她的手，说，这么凉，快去冲个热水澡吧。不然会感冒的。</p>
<p>当她又穿着那件男式衬衣站在他面前时，他忽然有些绝望。这个时候他希望她能离开，他隐隐感觉到她是携着一座深渊来到他身边的，他有些喘不过气来。这时候他却又撞到了这女人的目光，这目光让他叹了一口气。他把她拉到身边，说，谢谢你，今晚就住我这吧。他意识到，她根本不想走，他不能赶她走，这是他今晚能付出的唯一酬劳。他忽然觉得自己无比恶心。</p>
<p>和这女人是第二次了，他却才开始细细打量她，开始看清楚自己身体下面的这张脸。这是一张还算清秀的脸，淡眉疏目，五官轻巧，随时都能融化，让人不容易记住。但和她在做爱的途中，她表现出一种很诡异的快感，她似乎无比兴奋，把指甲都深深掐进了他的肩膀里。在那一瞬间里他忽然感觉到她身上有一种嗜血的气息，她不像在做爱，倒更像在打仗。他一哆嗦。</p>
<p>第二天等他醒来的时候，女人已经走了，给他留下了一个干净得有些刺目的房间，桌子上的陶罐里还插了一枝明艳的荷花。他有些懊恼，想，她应该不会再来了吧。应该不会了，她从他这里不会得到任何好处的。他没有钱，没有爱，也没有更多的东西。她应该不会来了。</p>
<p>他赤着脚在空荡荡的家里走了一圈，被这突然而至的洁净弄得有些无所适从。忽然又想起了杨国红。从他留在杭州之后，他从没有提出让杨国红来杭州住几天，他不敢让她来，怕她看到自己住的地方。他知道只要他不先开口说这个话，她就绝不会主动提出要来杭州看他，虽然她心里可能会这样想。他只是告诉她他离开公司了，他说自己开始画画，只是有的画卖得好，有的卖得不好。艺术家嘛，都这样。</p>
<p>但是，每年春节他都会千里迢迢回到交城县，和杨国红一起过年。每次回去了，杨国红还守着那间校门口的小商店，商店的门窗一年比一年陈旧斑驳，杨国红的体型也渐渐变胖了，虽然皮肤还算白净，但脸颊处的肉已经开始下垂了，头发却还是原来的卷发。十几年过去了，她还是完好无损地保持着当年最流行的一头卷发，大花卷，发卷上抹着茉莉头油，额头上垂下一缕头发，被头油抹得纹丝不动。这使她看起来像个布满灰尘的文物。</p>
<p>那是他大学毕业后第二次回交城过年。坐了三十多个小时的火车，又转汽车，一直到除夕的晚上他才到了小小的交城车站。当时正下着大雪，站在夜色里看上去，整个小城都被风雪吞没了，车站没有什么人，他一个人提着包站在那里，像来到了一个陌生荒凉的星球上。突然，他看到不远处有个披满雪花的人影正一动不动地站在雪地里。是杨国红在那里等着他。</p>
<p>他们进了她的小商店，把卷闸从里面拉下来，添了几块煤，把炉子生旺，她下锅给他煮饺子。一年不见，两个人一时都不知道该说什么。她只说快吃饺子快吃快吃，再不吃要凉了，凉了就不好吃了。他一个饺子一个饺子慢慢地吃，恨不得把每一个饺子都变成四个慢慢咽下。但就是这样，一盘饺子还是被吃完了。大大的白瓷盘子空了，悬在他和她中间，像一轮他乡的月亮。窗外的鞭炮声和烟花响起，震得卷闸轰轰作响，仿佛这小小的商店是一节火车车厢，正在这除夕之夜载着这两个异乡人驶向不知名的远处。烟花飞到夜空里，无声地炸开，火星斑斓地撒落在窗户上、雪地里。两个人都看着窗外，烟花透过玻璃，蓦地照亮他们的脸，瞬间又恢复如常。</p>
<p>烟花落尽，鞭炮声渐渐稀薄，夜已深，终于是该睡觉的时候了。终于是到了这个时刻，他无端地烦躁，还有恐惧。她给他泡了脚，然后两个人来到货架后面的床上，他迟疑了片刻，勉强把她抱在了怀里。她像小女孩一样把自己肥胖的身体伏在他怀里，他不动，她也不动。这样僵持了一会儿，她忽然又挣脱出来，半笑不笑之中也掩藏着一缕若隐若现的紧张和恐惧，她羞赧地半笑着，眼神朝他飞过来，说，都忘了，还给你准备了一件过年礼物呢，等着啊。</p>
<p>她朝外屋走去，他愈加紧张不安地坐在床上，两只手垫在屁股下面，又抽出来，又垫下去，又抽出来搓动着。这时候屋子里忽然间响起了音乐声，是一支他从没有听过的华丽隆重的交响乐，音乐咚咚地敲打着整间屋子，好像他们正被装在一口鼓里。他正惊恐地四下里捕捉着这音乐是从哪里被放出来的时候，她忽然出现在了柜台后面。他只看了她一眼便再动弹不得她站在那里，身上穿着一件黑色的蕾丝镂空睡衣。因为睡衣是镂空的，透过睡衣他看到了里面蠢蠢欲动的两只乳房，不惟是乳房，连小腹上层层叠叠的赘肉和松松垮垮的臀部也一览无余。这时候，她半是羞涩半是淫荡地看着他笑着，又往前走了两步，然后随着音乐缓缓跳起了舞步。她不知什么时候学会了这样一种诡异的舞步，大约在见他之前已经排练了很长时间，舞步笨拙机械，却是一丝不苟的，简直认真得像完成作业的小学生。他的眼睛开始发红，他张了张嘴，想对她大喊，你在干什么，不要再跳了，求求你不要跳了。</p>
<p>可是就在他还没来得及说出一个字之前，她忽然冲着他撩起了睡衣的下摆，对着他露出了自己那松弛而苍老的臀部。紧接着，她又随着音乐的节拍扭了几扭那苍老肥白的臀部。他的泪夺眶而出，他终于冲着她歇斯底里地大叫起来，不要跳了，不要再跳了，你他妈不要再跳了。</p>
<p>音乐戛然而止，她穿着那件透明的睡衣瑟瑟地站在他面前，火炉里的灰烬开始暗下去了，屋子里的温度开始降低，她的嘴唇开始冻得发抖。而他只是坐在那里嚎啕大哭，怎么也停不下来。她把一只冰凉的手放在他的头上，像母亲在安慰一个做了噩梦的儿童，他听见她说，…我只是，怕自己太老了…想给你个惊喜…</p>
<p>他接着哭，哭到最后还是把女人那冰凉的发抖的身体抱在了怀里。他全身都在发抖，女人也在发抖。他的手落在那件镂空的睡衣上，睡衣上的折痕压得整齐锋利，这是一件全新的睡衣。这折痕像刀子一样划过他的手心，那里立刻便鲜血淋漓起来。他的手穿过睡衣落在她下垂的乳房上，他一边使劲流泪一边在那久久揉搓着，可是他可怕地发现，他根本不行。整个晚上他都不行。</p>
<p>和杨国红在一起住了三天，初四那天他便说有事，要启程回杭州。临走前他把这一年攒下来的两千块钱都放在了她的枕头下面，可是等到汽车开了，他一打开自己的包却发现，一叠钱正整整齐齐地码在那里。他疑心是自己放在她枕下的两千块，数了数，三千块，比他放在她枕头下面的还多出了一千块。</p>
<p>车窗外正燃烧着冬天的夕阳，把整个苍青色的天边都烧红了，把落满厚厚积雪的旷野也烧着了。路边的枯树上筑着很多大大小小的鸟窝，像很多悬挂在树枝上的心脏。远处，一只灰喜鹊闪电一般从雪地上掠过。他从车窗里看到了自己那张挂满泪水的脸正与这雪地和枯树慢慢融化在一起。</p>
<p>第二年第三年的除夕之夜，他仍然要回到交城，仍然和杨国红在一起过，他们仍然抱在一起睡觉，却再没有做过一次爱。到第四年的时候他没有回去和她过年，因为那时候他已经在监狱里了。临进监狱之前他给她打了个电话，告诉她他要出国一年。他说他的一幅画被法国的一所大学看中了，他们邀请他去他们学校做驻校艺术家，可以在那里呆一年。这一年他就不回国了，不能回去看她也不能和她联系了。她在电话里说，这是好事啊，你都要去国外了，看看你现在多有出息。有件事我一直没告诉你，就你考上大学那年，你记不记得你被人举报才丢了工作的事，其实那个举报你的人就是我。我举报你就是为了让你丢了工作，没了后路，这样你才能横下心来考上大学，才能离开交城。不然你就一辈子在这里了。你看你现在多好。她声音兴奋急促，又说，你什么时候想回来就回来，我哪里都不去，我会一直在这里守着我的小门面店等你，无论你什么时候回来，我都在这里。没钱了就说一声，我就给你寄钱。我一个人攒下钱也没有用。</p>
<p>他一个字都没有再说就挂断了电话。窗外是四月鹅黄色的阳光，煦暖无边，正像一座庞大的机器一样从他身上碾过。</p>
<h2 id="七">七</h2>
<p>南方的雨总是无休无止。</p>
<p>游廊旁边的那片夹竹桃开得如烟似雾，粉色的白色的花瓣下雪一样落在湖面上，那些血红色的鱼成群结队地旖旎游来，用嘴啜食着那些花瓣。几株细小的翠竹被雨水冲刷得浑身剔透，雨滴从竹叶间像眼泪一般一滴一滴滴入湖中。不远处的荷花开得既天真又苍老，浓烈过剩了，总让人觉得里面藏着杀机。</p>
<p>李天星坐在游廊里一遍一遍画这些雨中的植物。他把它们抽象，还原，再抽象，好像它们已经变成了生活本身。雨季游人少，他一连好几天没有什么生意了。几年前刑满从监狱里释放之后，他发现找工作就更难了，即使再找，因为有这样的前科，他知道也没有什么好的工作在等着他了。那天他独自在湖边闲逛时，看到有个瘸腿的男人坐在湖边给游人们画像，他顿时想到，这正是适合自己的工作，多自由自在，不用再看人脸色，不用再和一群傻逼拉着手唱歌。更重要的是，好歹和画画还有点联系。只是在这湖边摆个画摊，感觉已与那些沿街乞讨的流浪歌手无异了。</p>
<p>这是离开交城的第十五个年头了。最近，他总是越来越频繁地回忆起那段在县城里的生活，回忆起他当年住的那间宿舍，回忆起他一个人在苍茫旷野里写生，故乡田野里所有的那些植物和它们草叶的清香都被他画了下来，事实上这么多年里它们一直藏匿在他所有的画里。他又回忆起那冬天的锅炉房，在血红的火光里两个人一见面就不要命地做爱。那时候觉得整条命都可以扔进去，像把炭扔进那滚烫的锅炉里。</p>
<p>可是回忆得越多越是不敢回去。</p>
<p>那守着小门面的女人仍时不时给他寄来钱寄来衣服，只是，她不再寄那种手织的有菱花格子的毛衣。她说，过时了，现在没有人穿这种手织的毛衣了。越是这样，他越不敢给她打电话。天色渐晚，夹竹桃和荷花再次变成了一堆狰狞的剪影，他忍不住又想起了那个在湖边消失的女人。那个女人一定还在这湖里。也许她的肉身早已经被那些血红的鱼分食光了，只有那具洁净的白骨留在了湖底与肥藕们作伴。除了他，根本没有人知道她来过这里，又在这里消失。她的那张画像，他一直替她保存着。好像这样他就可以替她把这无休无止无死无生的活着继续下去了。</p>
<p>他心里又涌出一阵恐惧，开始冒着雨往回走。连日下雨，他住的老房子有几处地方开始漏雨，他便在地上摆了几只大大小小的器皿接雨水。几只高矮不齐的陶罐蹲在那里，像是刚刚从地板里长出来的，显得肥胖可爱。两只玻璃瓶子则显得高瘦凛冽，还有一只不锈钢的杯子散发着金属才有的腥味。玻璃、金属和陶器的纹理杂芜地长了一地，不时有雨滴滴入其中，如音律在这屋子里潮湿地回旋。他掏出钥匙开了门，刚要推门进去，有个人影忽然出现在他身后。他吓了一跳，再仔细一辨认，居然又是那个前几天来过的年轻女人。</p>
<p>她站在门口，头发湿漉漉地贴在脸上，却不大敢走过来，只是像个幽灵一样站在那里远远看着他。在看清她是谁的一刹那，他几乎有点愤怒，他没好气地说，怎么又是你？女人低声说，我就是来看看你。他长叹了一口气，挣扎了几分钟最后还是把她让了进去，地板上的那几只器皿已经快接满雨水了，灯光的倒影落入其中，每一只陶罐每一只瓶子里看起来都浸泡了一束灯光。竟也丰收了。</p>
<p>李天星扔下手里的东西，不耐烦地对女人说，你怎么又来了？他不想再遮掩自己的任何情绪。女人像知道自己做错事一样不敢抬头看他，只说，我下班路过这里，想着你房间里肯定又乱了，就想过来帮你收拾一下。他听了心里有些难过，又觉得气愤未消，便递给她一块毛巾说，快把你头发先擦干吧，也不怕感冒。女人接过毛巾像得了赦令一般，飞快地擦了擦头发，便忙不迭地动手开始收拾房间。她把地上那些罐子瓶子里的水都倒掉，却把刚才大约是又在湖边摘的一朵荷花插进了其中的一只陶罐。这陶罐里的荷花忽然变成了这屋里新添的一座建筑，使这散发着腐朽潮湿之气的老房子竟明亮慈悲了许多。</p>
<p>反正这屋里的凌乱早已被她看过了，就像彻底暴露了底牌的人倒也无所畏惧了。看着她出出进进地打扫房间洗衣服，他发现自己竟也没有上一次那么紧张了，甚至连愧疚也没有。这种感觉又让他忽然心生恐惧，就像是眼看着一个妖怪就要被他从瓶子里亲手放出来了。他决定今晚不能再留她。他说，你到底为什么来找我？</p>
<p>我觉得你需要我。</p>
<p>你为什么觉得我需要你？</p>
<p>我觉得心疼你。你看看你连个房间都不会收拾，你住的地方乱七八糟的。这房子又这么破旧</p>
<p>这最末一句话仿佛揭掉了他最后一层遮羞的衣服，他面红耳赤，又恼怒起来，大声说，谁让你来了，我根本不需要你给我收拾房间，如果需要我自己会收拾，我自己会。她垂着头站了一会，像个刚刚被惩罚过的小孩子，忽而又抬头对他叹气，从第一次见你，我就觉得很心疼你，就总想为你做点什么。你也没吃晚饭吧，我这就去厨房给你做饭去。</p>
<p>他没法把她赶走。很久没有和一个女人坐在家里一起吃顿晚饭了，他坐在那里闻着米饭和蔬菜的清香，只觉得这个夜晚生疏可怖，貌似安详，芯子里却包裹着一种很深的诡异。她菜烧得居然很好吃，他愈加害怕，觉得一个更大的阴谋正蹒跚向他走来。吃完饭他咬咬牙，对她说，你以后真的不要再来找我了，真的。你也看到了，我什么都给不了你，我连个像样的工作都没有，租着这样的破房子，我只是这个城市里的无业游民。和我在一起你什么都得不到，以后就不要来了。</p>
<p>女人的泪水忽然就流了下来，她仰头看着他，一脸奇异的悲伤。其实我都知道，我早就看出来你的不容易了，所以才总想着要帮你做点什么，能帮你做点什么我都高兴，只要你不把我赶走。李天星眼眶也开始发潮，他说，我早就习惯了，一个人怎么也能过得下去，两个人就不一样了。你还这么年轻，应该找个人结婚，以后就不要再来找我了，这对你不好。</p>
<p>夜已经很深了，雨还在若有若无地下，屋里裂缝处滴下的雨水一滴一滴被收进了那些陶罐。墙角长着绿色的青苔，居然还有一只雪白的蘑菇，散发着白骨的光泽。他看着窗外的雨，犹豫了几次，终究没忍心让女人连夜离去。女人一动不动地伏在他怀里。他余悸未消，又不知所措，只抱着她说，快睡吧，明早你还要上班呢是不是？来，小姑娘，我抱着你睡。女人在黑暗中安静地伏了一会，忽然就抽泣起来。他被这突如其来的哭声吓一跳，说，你这是怎么了？女人又抽泣了半天才说，你为什么都不要我了？女人哭声忽然苍老遥远，这哭声让他一时疑心她昨天还是个二十多岁的年轻女人，明天早晨他却突然发现枕边有一缕灰白色的长发，她在一夜之间就变成了一个老人。除了一缕头发，她在他这里什么都没有留下。</p>
<p>李天星觉得恐惧，又觉得女人有些可怜，心中不免酸涩，明明知道两个人的身体里都干涸如土，丝毫没有情欲，但为了安慰她，他还是让女人自己动手，草草应付了她一回。女人拚了命地把身体向他靠近，索取，像一只幻化出来的兽一样要用自己青色的舌苔湿润他的全身。她的身体蠕动在一团深夜的雨声里，看起来很渴，很饿，很干。看起来她所有的干渴只是为了能向他靠近哪怕一寸。他忽然又想起了家乡的那些植物，想起了那些向死而生的植物。在这个世上，向死而生才是唯一的活法。</p>
<p>粗糙的欢娱之后她装出一副心满意足的样子在他身边沉沉睡去。似乎刚才草草的性爱给了她一剂定心丸，她被男人爱过了，在这个夜晚她终于暂时可以去睡了。</p>
<p>万物刍狗。</p>
<p>已是半夜，窗外的雨一阵紧似一阵，簌敲打着门口的那棵香樟树。在这样的雨夜，湖边那个流浪老人和他的流浪狗不知道是在哪里安身的。有一天早晨，他走到湖边的时候雨已经停了。他看到那老人就在游廊的泥水里睡着，那条狗正使劲把自己卷成一个团取暖，浑身的毛已经湿透了。</p>
<p>天地不仁，万物为刍狗。</p>
<p>第二天醒来时，身边的女人已经走了。桌上摆着金色的生煎和雪白的豆浆，还没有凉透，这温度好像也是刚从女人身上剥离下来的。杨国红又给他寄来一张汇款单，没有一句留言。他拿着这张汇款单难过了好几日，却不敢给她去电话。又生怕她会给自己打过来，以至于一听到电话响就浑身紧张，得用很大的力气才有勇气看看来电显示的是不是她。尽管这样，他还是在几天后等到了她的电话。这天晚上，他眼睁睁看着她的名字在手机屏幕里呼喊挣扎了很久才把她从手机里放出来。接起电话，他不敢说话，只听杨国红沉默半天才在电话里说了一句，在那里不好就回来吧。他还是不说话，电话那边便也久久沉默着，这沉默一直下坠下坠，最后戛然碎了一地。</p>
<p>就在这时，传来了几声怯怯的敲门声。他心里一阵紧张，看看周围，竟想把自己藏起来。打开门果然便看到又是那年轻女人抱着一只袋子正站在他门口。</p>
<p>她穿着一件西瓜红的长裙站在那里，嘴唇上还涂了一圈浅红色的唇膏，来之前特意修饰过的。他盯着那唇膏看了两秒钟，心中忽然觉得前所未有的厌恶。女人紧张地站在那里，如同一个刚刚刑满释放的囚犯，不知道下一秒钟该进去还是该转身逃走。她终于还是仓皇地把话先抢到了自己嘴里，我是来给你换床单的，你看看你的床单已经很旧了，破了。我从我们厂给你拿的新床单。</p>
<p>他阴着脸。她抱着那只袋子瑟瑟地跟在他后面走进了客厅。他们都不说话，桌上的老座钟在滴滴答答地独自赶路，卫生间里水龙头好像没有拧紧，缓慢滞重地跟在座钟的后面跋涉。这声音正把这房子一点点放大，简直有点像旷野了，似乎所有的物件正离他们越来越远。她一言不发地向他的床走去，从袋子里掏出一块崭新的猩红色的床单，准备给他换上。</p>
<p>他站在那里忽然对她大吼道，不要动我的东西，谁让你动了？她背对着他低声说了一句，已经很旧了。他大声说，我不需要。她还是背对着他，身体晃了几晃，却接着又要换那张床单。他愈发气愤，一步跨过去伸手就夺下她手里的东西，说，不要给我收拾，我过得好好的，谁让你来了，你每次来把我的东西都弄乱。</p>
<p>她死死抱着那块床单不放手，忽然就大声抽泣起来。她映衬在红裙里的脖颈与手腕看上去分外苍白，像这里正埋葬着一种奇怪的罪孽。</p>
<p>他再次于心不忍，口气却仍是生硬的，你说你为什么要一次一次来我这里，我真的什么都给不了你的，你到底为了什么？你根本不了解我，你知道吗？我曾经因诈骗罪坐过牢，我只是个刑满释放的无业游民，我什么都不是。知道了这个你还敢再来找我吗？</p>
<p>她忽然扔下床单哭着扑在他身上，她说，就是因为知道你太不容易了，就是因为觉得你太可怜我才总想来为你做点什么，你看看你住的地方，你看看你睡的床单。我真的对你没有任何要求，我只是想对你好，想为你做点什么。你说你坐过牢我只是更心疼你，更想对你好了。以前我有过一个男朋友，我就有过这一个男朋友，我十六岁就和他在一起了，就是因为我没有照顾好他，他最后才会死于吸毒。我知道你和他一样，没人关心你们，没人照顾你们，没有人把你们放在眼里，我第一次见你就知道你是这样的人，你是和他一样的人。所以无论我能帮你做点什么，我都会觉得高兴。我知道我在这世上过于卑微，我什么都不是，我只会一点裁缝，我也知道没有男人会真的爱我。我十六岁就辍学和他在一起了，后来甚至我还帮他去买过毒品，我只想对他好一点。我知道我不是什么好女人，我根本不值得被人爱，可是我早就想明白了，没有人爱我，我可以去爱别人啊，没有人对我好，但我可以全心全意去对别人好去照顾别人啊。这样不也是活着吗？怎样不是活着？……我来找你是因为我第一次和你在一起的时候，你对我那么好，那么温柔。我就想，只要你肯把那温柔再给我一点我就满足了。我就为你做什么都愿意。</p>
<p>她死死抱着他，一刻都不想停留，只想不停地往下说往下说，仿佛他的耳朵是那树干上张开的树洞，她急于把自己所有的秘密都埋葬于其中，似乎她已经忘记了那树洞里也许还住着危险的生物。最后他也不由得抱住了她，他摸到了她身上一种奇异的干枯与渴求，摸到了她身上那种鬼魅般燃烧得噼啪作响的荒凉信仰。他一边害怕着一边疼痛着，竟也满脸是泪。</p>
<p>她闻到他的眼泪了，这让她如蒙大赦，她忽然指着那条猩红色的新床单，目光焦灼而妖冶，她对他乞求着，和我做爱吧，好吗，我喜欢做爱，只有在和一个男人做爱的时候，我才能感觉到这世上所有的痛苦都被溶解了，只有在那一瞬间里，我才觉得我和这个人融为一体了，我太想要那种融为一体的感觉了。</p>
<p>他恐惧地往后退了一步，说，你真的不能再这样了，你知道你在干什么吗？</p>
<p>她再次目光绝望地向他扑过来，她几乎是在哀求着，你抱我好不好？我什么都不会问你要的，我对男人从来没有任何要求，我就只是想付出，心甘情愿地想付出，可是你怎么能连我给你的都不想要。求你了，现在和我做爱吧，起码就在这时候，我会觉得你还是爱我的。</p>
<p>他忽然觉得他和眼前的这女人都不像是真实的人，他们似乎都已经失去了真身，只是在别人的梦境里充当着一个没有名字的路标，那路标又指向了众多分岔的小路。他流着泪说，你为什么这么当真，你明明知道我们不过就是一夜情，我甚至到现在连你的名字都不知道。</p>
<p>她已经不顾一切了，他恐惧地感到，她要强迫他。她脸上弥漫着一种因为不真实而看起来近于可怖的情欲，她更像一个正陷入某种可怕角色的优伶。她仰着脸看着他，都没关系，名字没关系，你不对我好也没关系，只要让我对你好就行，我愿意。你越是要赶我走，越是让我想对你好。一个女人愿意对一个男人好的方式就是想和他不停做爱，你信吗？</p>
<p>他再一次闻到了那种似曾相似的血腥气，他背上有些不寒而栗，然而他的下面已经脱离了他的身体，蜷在她手中无耻地硬起来了。</p>
<p>这让他愈加难受愈加痛苦，他只觉得他完全是被眼前这个女人强奸了。汗腥味、泪水味和一种越来越尖锐的刺痛搅在一起，围剿在周围的空气里。他和女人躺在那张猩红色的新床单上，感觉他们正躺在一堆血泊里，而这血液分明是从他们身上汩流出来的。这时，他听见躺在身边的女人温柔地说，饿了吧，我给你做饭去。</p>
<p>看着她苍白的脖颈消失在厨房门口的一瞬间，他忽然想到，如果他让她嫁给他，她是不是一定会答应？她甚至还会诚惶诚恐，感激涕零。在这个城市里他不是一直找不到一个不计一切现实问题的女人吗？接着，他马上又想到了杨国红，他看到那个女人顶着一头半白的卷发正孤零零地等在她的小商店门口，她已经弯腰驼背，已经赘肉横生，已经在悄悄地变成一个小老太太。在想到杨国红的那一瞬间他忽然明白了，其实他早就没有任何自由了，只是他从前不知道而已。这一辈子他和任何别的女人结婚都将是一种罪孽。</p>
<p>他躺在那里看到那女人从厨房里端出了金黄的煎鸡蛋，又端出了切好的木纹般的面包，还有两杯雪白的牛奶。她此刻看起来多么像一个人间的小妻子啊。然而在她转身的瞬间，他又突然看到了她如白骨般可怖的背面。他再次打了个寒颤。</p>
<p>他躺着不肯起来，又想起了这些年里他与那些女人们的苟合，想起他舔着她们的耳垂，想起他喜欢她们穿着黑色的丝袜和血红色的高跟鞋，想起他的情话如微温的糖浆徐徐灌进她们的耳蜗，像贝壳一样的女人的耳蜗。然后她们或笨拙或风骚地与他做爱，然后，纷纷离去。他不过是她们的工具。他先是同情她们，然后，又同情起自己来。他，和所有的这些女人之间的欢娱与苦痛多么像一场逼真的狂欢派对，多么像这个世纪里一场盛大的节日。</p>
<p>女人坐在桌子后面等他起床，那两只金色的煎鸡蛋摆在桌子上，像一对眼睛正与他对视着。他与它们久久对视着，然后他躺在那里静静地流下两行泪来。</p>
<p>他已经记不清究竟又过了多久，终于有一天，他主动拨出了杨国红的电话。他感觉自己其实一直在等这天。电话那边的人几乎立刻就接了起来，好像她如一头石狮一样，正日夜守在电话的身边等着它响起。电话那边的声音勉强按捺着，有一种发着抖的镇静…喂。</p>
<p>…最近商店的生意还好吗？西学校旁边又开了几家文具店，现在做什么的人都太多，生意越来越难做了，昨天才刚刚和邻居那家新开的吵过架，她每天坐在店门口往里拉客人，我气不过就吵了几句。</p>
<p>你那些同事还有来往吗？死的死，老的老。有几个年龄稍大的都已经死了。那个年龄和我差不多的贺改帆你还记得吗？就是原来在百货里卖衣料的那个女人，高个儿瘦长脸。她和我一起下岗后就去卖水果了，这些年就一直在十字街头卖水果，刮风下雨都没歇过一天，被晒得像块黑炭。从去年开始忽然不见她卖水果了。问了问别人才知道，她得了癌症已经死了两年了。一个人无声无息地就这么死了。还有那个卖交电的孟小兰，就是那个矮胖的白脸女人，下岗后在街上卖了一段时间的袜子内裤，听说她后来就得了抑郁症，几次三番寻死都被人救下，可最后还是死成了。我最近老是梦见当年我们一起刚进百货大楼时的情景，那时候多年轻啊，女人多，我们老是暗地里偷偷比发型，比衣服的式样，只以为，一辈子就在那平安到老了。</p>
<p>你们那百货大楼还在吗？</p>
<p>听说快要被拆掉了，有个开发商要在那里开发楼盘。</p>
<p>它以前是咱们县里最高的楼。</p>
<p>是啊……你还是回来吧，我早想对你说了，其实画不画画儿真的没那么重要的。</p>
<p>……</p>
<p>哪天想回来就回来吧。</p>
<p>……</p>
<p>我都在这里。</p>
<h2 id="八">八</h2>
<p>又是这九曲的游廊。</p>
<p>雨在所有特征之上，它们没完没了，仿佛下了一个世纪。雨让这整座城市看起来都是病恹恹的。周围高大的香樟把灰蒙蒙的天空高高举起，使这湖边就像一口深井。天空落下雨滴，淅淅沥沥，在这湖面上，在湖面的荷花上相继碎开，腾起了一片白茫茫的水汽。</p>
<p>他孤独地站在游廊里，旁边摆着他的画板，只是没有游客，一天来不了几个游客。仿佛这湖边是一处已经被废弃的深宫，这里所有的故事都很潮湿，摸上去都是沁骨的冰凉。天气渐凉，荷花已残了不少，残荷如尸骨一般遍布湖面。几朵没开败的站在水中，太过骄傲，竟有了兵器的寒凉与冷傲。一群血红色的鱼从这残荷中间无声地游过，向他脚下游来。它们越来越肥沃猩红。他站在那里无端又想起了那从湖边消失的女人，等了二十年，终于等到了，她却让自己永远消失在这湖底，她等到的是什么？她的那张画像至今还保存在他的画夹里，好像那女人已是永世住进他的画夹里了。</p>
<p>正在这时，游廊的尽头出现了一把红色的雨伞，还有伞下裸露出的苍白的小腿。红色的雨伞和苍白的小腿如一张底片一般，从游廊最纵深的地方一点一点地显现，一点一点地清晰起来。渐渐的，雨伞后面的那张面孔也清晰起来了，他又闻到了她潮湿的肉体里长满了各种菌类的气味，蘑菇、蕈子、地衣、木耳…这气味既腐朽又生机勃勃。 他约她来的。这么久了，这是他第一次主动约她。平日里他根本没有主动约她的机会，因为无论他对她说了什么可怕的话，甚至动手把她推到门外，几天后，她还是会准确无误地再次出现在他的门口。她会站在门口对他说，因为你需要我。</p>
<p>她声音有些激动，怎么不在家等我，走，我回去给你做饭吧？</p>
<p>他看着雨说，这南方的雨总是下个不停，去过北方吗？我的家乡在北方，那里到处是黄土和白杨。只是没有雨，很久很久都不下一滴雨。</p>
<p>她有些羞涩地说，我长这么大哪里都没有去过。只觉得北方肯定很干旱，春天时到处都是风沙，女人出门的时候都得遮一块纱巾在脸上对不对？</p>
<p>他忽然把脸从雨中转过来转向了她。湖水映照在他脸上，几缕波光在那里绽开，使他在这个黄昏里看起来无比柔软。他对她说，我要回北方了。明天就走。</p>
<p>她先是呆呆盯着他，半天之后却不再看他，只是看着湖面，脸色苍白如雪。</p>
<p>他走到她面前伸出手抱住了她。他感觉她浑身僵硬冰凉，她像是已经燃烧了很久很久之后的灰烬的状态。夹竹桃在他们身边真诚而邪恶地开着，枝叶里的毒汁从叶梢滴进湖水里，一滴一滴。</p>
<p>她在他怀里瑟瑟地靠了很久，天色越来越暗了，忽然她挣脱出来，在夜色里直勾勾地恐怖地看着他，她说，我知道你不会带我走的，那就再和我做一次爱吧，就在这里，就当留念了。他往后退了几步，她又一步逼上来，再次盯着他的眼睛，你就再和我做一次爱好不好？最后一次了，好让我觉得你也是留恋我的，你起码在那一个瞬间里也是爱着我的。她很干很渴很饿地对他乞求着，再和我做一次吧，就这一次了。保证是最后一次了，只要你还肯和我做爱我就觉得你是爱我的。</p>
<p>他站在那里，脑袋发木，他说，认识你这女人真是倒霉，总是要被你缠着。好像你不做爱就会死。她踉跄着过来，她一边哗哗流泪一边妖气森森地使劲笑着，如果你连做爱都不愿意和我做了，我是不是就更没有人爱了。你说是不是？他流着泪再次把她揽入怀里，他们在夜色里紧紧拥抱着，就像一对真正的恋人。然后他对着她的耳朵说话，就像第一次和她做爱时那样，把温柔的话灌进她的耳蜗，她便放弃一切挣扎。</p>
<p>你到底是谁？你叫什么名字？</p>
<p>……</p>
<p>你觉得你爱的是我还是别的什么？</p>
<p>……</p>
<p>你以为我真的不知道吗？你以前和我说的话都是假的，其实你找过很多男人，你第一个男友死后你就一直在不停寻找，每一个男人离开你之后，你都会不顾一切地去寻找下一个是不是？</p>
<p>……</p>
<p>你对每一个男人都会这么不顾一切地没有尊严地好，都会把你的命拿出来对他们好，是不是？因为你怕他们离开你抛弃你，是不是？ ……</p>
<p>最后在最绝望的时候，你对每个男人都会说，你和我做爱吧，求求你再和我做一次吧，只有这样我才能知道你是爱我的。是不是？</p>
<p>……</p>
<p>你越是绝望就越是要拚命对一个男人好，然后，你把他们全部都吓跑了。是不是？</p>
<p>……</p>
<p>越是贫困潦倒的男人你越想对他好，是不是？因为落魄的男人会让你觉得你起码可以控制住他，你控制不了这个世界，你就拚命对他好，用你的好去控制他，只有这样你才会有一点点可怜的安全感。是不是？</p>
<p>……</p>
<p>所以，你为什么喜欢去爱贫穷落魄身陷困境的男人，因为这样的男人对你来说其实是一种毒品。他们让你有了一种奇异的安全感，你甚至无法戒掉他们。是不是？</p>
<p>……</p>
<p>……是不是？</p>
<p>夜色更多地从香樟树里从夹竹桃里从荷花里分泌出来，浩浩荡荡地铺满了整个湖面。两个人就那么一高一低地站在湖边，看着这南方的雨，看着夜色彻底包围了湖面，看着远近的几朵荷花渐渐变成剪影。像是站了很久很久了，他拉起她的手，像个即将远征的恋人一样说，明天我就走了，这辈子可能就见不到了，你要自己保重好。小姑娘，你不是一直喜欢荷花吗，走，到湖边去给你摘一朵荷花。</p>
<p>他在夜色里拉着她的手走下湖边的游廊，向着靠近荷花的那个长满青苔的石阶走去。他伸手去够，那朵傲立的荷花看似不远，伸出手去却怎么也够不着。她说，让我来吧，我知道怎么能够到，你往后靠一点。他便往后靠了几步，她背对着他的影子在夜色里看上去从没有过的单薄和纤弱。他喉咙忽然发堵，却什么都说不出，只是看着她。她站在布满青苔的石阶上伸出手去努力够那枝荷花，显然她也够不着。</p>
<p>但他还是没有动，只是站在那里看着她的背影。他忽然发现自己的一只手紧紧地握成一团，那只手在发抖，好像他忽然开始发烧一般。然后他听到自己的声音也在发抖，够不着就算了吧。</p>
<p>听到他的话，她在夜色里忽然回头看了他一眼，却没有说任何话，只是无声无息地对他笑着，像一朵带有毒性的夹竹桃。这笑让他心惊胆战，几乎要让他扑过去把她拉回来了。她却说，你不要过来，我能够着。说完她把身体更低地向湖水倾去，把一只胳膊拚命伸向那枝荷花。他浑身在出汗，在发抖，他告诉自己，把她拉回来。可他竟然还是一动不动地站在那里。</p>
<p>就差一点了，就一点了。她的胳膊已经伸展到了极致，他听见她说，就差一点点了，放心。</p>
<p>放心？他浑身又哆嗦了一下。这时候，夜色更深了，话音刚落，她回过头来又看了他一眼，就是在深沉晦暗的夜色中他还是清晰地看到了她在那一瞬间里诡异苍凉的笑容。然后，他看到她整个人忽然就飞起来扑向了那枝湖中的荷花。只听扑通一声沉闷的响声之后，她和她脸上的那缕笑容便从湖面上消失了。</p>
<p>就像多年前的那个女人一样，她忽然就从这湖面上消失了。</p>
<p>他还是站在原地一动没有动，他甚至没有往前迈一步。他只是站在那里剧烈地发着抖，像个正在发高烧的病人。</p>
<p>他胡乱地想着，这也许是最好的，对于一个吸毒的人，这也许是最好的，最好的。啊。 那枝荷花还静静地站在那里，静静地看着这一切。一切。</p>
<h2 id="九">九</h2>
<p>他回到交城县的这天，杨国红早已等在车站接他，她一头花白的卷发，看起来安详如银器。大约是为了迎接他，她特意在脸上涂了一层厚厚的粉底，还抹了两片油腻的口红。那缕钢丝一样的卷发还挂在她的额头上。</p>
<p>她让他和她一起去逛集市，说是买点东西，晚上要给他做好吃的。</p>
<p>他们一前一后在集市上慢慢逛着，采购着东西。如今走在街头已经没有人会再注意他们，没人多看他们一眼，他们只是人群中一个中年的男人和一个开始步入老年的女人。当年的下岗工人们死的死，老的老，剩下的已经与城郊的菜农们完全融为一体，再也看不出是哪个阵营里的了。他们看起来都已经一模一样，黢黑的面孔，干裂的手指，一边吆喝着卖东西，一边蘸着唾沫数手里一把肮脏的零钱。</p>
<p>就在这时他们忽然听见县城中心天崩地裂一声巨响。集市上所有的人都朝着发出巨响处跑去，都想看个究竟。他们两人也随着人群一起往前跑，最后，所有的人都在一堆刚刚炸平的废墟前站住了。他们静静围观着那堆废墟。刚刚被炸平的是县城里曾经最高的百货大楼。</p>
<p>不久，这片废墟上将盖起新的高楼。</p>
<p>黄昏将至，人群渐渐散去。他们两人站在那里还是久久不肯离去。废墟里飞出的灰尘在血色夕阳里如游鱼一般，正出没在他们的鼻息与唇齿之间。</p>
<p>—— <strong>孙频 《我看过草叶葳蕤》</strong></p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>我咽下一枚铁做的月亮</title>
    <url>/blog/2021/06/10/L012-%E6%88%91%E5%92%BD%E4%B8%8B%E4%B8%80%E6%9E%9A%E9%93%81%E5%81%9A%E7%9A%84%E6%9C%88%E4%BA%AE/</url>
    <content><![CDATA[<p>我咽下一枚铁做的月亮</p>
<p>他们管它叫做螺丝</p>
<span id="more"></span>
<p>我咽下这工业的废水，失业的订单</p>
<p>那些低于机台的青春早早夭亡</p>
<p>我咽下奔波，咽下游离失所</p>
<p>咽下人行天桥，咽下长满水锈的生活</p>
<p>我再咽不下了</p>
<p>所有我曾经咽下的现在都从喉咙汹涌而出</p>
<p>在祖国的领土上铺成一首</p>
<p>耻辱的诗</p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>过与挂的边缘</title>
    <url>/blog/2021/07/18/L014-%E8%BF%87%E4%B8%8E%E6%8C%82%E7%9A%84%E8%BE%B9%E7%BC%98/</url>
    <content><![CDATA[<blockquote>
<p>改编自《爱与痛的边缘》——王菲</p>
</blockquote>
<p>苦痛纠结桌前回阅这一篇 字句过我的眼才是两三遍 未敢想 考前一天 夜雨中 找不到打算 让我枯坐这边 一点钟肝到七点 惧怕考场相见 实是我心愿 我也有我感觉 难道要遮掩 若是真不想让我过线 又何以出这么简单的试卷 让我一写再写 盼待到时分数高及格线 题像雨点 似断难断 愈是去想 更是凌乱 我已经不堪跟你痴缠 我的智商有限 不想再受损 无奈我心 要辨难辨 做题靠猜 恐难如愿 永远在过与挂的边缘 应该怎么安稳过线</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
  </entry>
  <entry>
    <title>魇</title>
    <url>/blog/2019/08/07/L015-%E9%AD%87/</url>
    <content><![CDATA[<blockquote>
<p>找到了以前的失败的作品，收作纪念。</p>
</blockquote>
<h2 id="section">1</h2>
<p>残月，无云，稀疏的星悬挂在秋夜的深空。</p>
<p>月下是一片宫殿，灿金的殿顶被夜幕染成了黄褐，鳞次栉比，连成一片，间或露出一截朱墙。 <span id="more"></span> 皇帝的寝宫内灯火通明，两人相对而坐，一子落下，棋盘发出“啪”一声脆响。</p>
<p>“再来。”皇帝把棋子扔进了棋龛，说道。</p>
<p>“遵命。”</p>
<p>皇帝执白落子。亲王紧跟着子展开缠斗。双方的神色愈发凝重，落子的速度渐渐慢了下来。终于陷入了僵持。</p>
<p>素雅的宫殿内，时间仿佛不再流动。终于，猛然跳动的灯焰打破了凝固的时空。</p>
<p>“啪！”亲王落子，棋盘上零碎的黑色竟被这一子联系起来，束缚住了那仿佛势不可挡的白。皇帝的神情凝重了起来，皱起眉头盯着棋盘，烛焰渐渐恢复了稳定。</p>
<p>火光闪烁，灯焰又是一跳。然而两人并没有任何动作。皇帝盯着棋盘，并未在意反常的灯火。</p>
<p>约莫半炷香的时间过去，皇帝终于落了子。几回合后，随着亲王一次格外用力地落子，宫殿内的灯火尽数熄灭。漆黑中，棋子敲击棋盘的响声突兀的回荡在寂静的宫殿里。</p>
<p>灯火重新燃起，棋盘上白色已被黑色彻底困死，皇帝垂首而坐，没有动作。</p>
<p>“啪嗒！”棋子从皇帝手中滑落，皇帝旋即倒地。鲜血从皇帝胸前涌出，积成了一滩血泊。</p>
<p>暗处，几抹阴影悄然隐去。</p>
<p>亲王起身走到皇帝身旁，跪倒在地，身躯不住的抽动着，终于掉下了泪。</p>
<p>“皇兄啊，别怪我。”亲王喃喃道，伏在了皇帝的血迹上。</p>
<p>“有刺客！”随着宫殿外一声尖厉的喊叫，整个王城沸腾了起来。</p>
<h2 id="section-1">2</h2>
<p>“陛下，醒来！”皇帝听见一声低沉的呼唤。</p>
<p>皇帝睁开了眼，却发现自己身处一片漆黑，不由问道：“你是何人？”</p>
<p>“我并非凡人，您可以称我梅菲斯特。”黑暗中传来回应，“我为您的魂魄而来。”</p>
<p>“朕的魂魄？”皇帝疑惑道。</p>
<p>“我乃是以凡人魂魄为食的魔鬼，受您的魂魄引诱而来。”魔鬼应道。</p>
<p>浑噩间，皇帝意识到自己已经死了，问道：</p>
<p>“朕的魂魄不正在你手中吗？”</p>
<p>“我仅能将您的魂魄滞留此地，未经您的同意我无法夺走它。”</p>
<p>“朕又岂会自断轮回将魂魄给你？”</p>
<p>“呵呵，所以我带来了一笔交易。”梅菲斯特轻笑两声说道。</p>
<p>交易？皇帝未及发问便感觉一阵晕眩，回过神来发现自己已经身处一座华丽的府邸内。府内众人围坐一团，正在商议什么事情。皇帝定睛看去，在座的无不是朝廷重臣，连亲王也赫然在内。正欲发问，却发现自己仅存意识，并无身躯，只得作罢。</p>
<p>“计划可还顺利？”首辅大臣环视一圈，问道。</p>
<p>“一切正常，皇帝的尸身已经入殓，没人起疑。”禁军统领回话道。</p>
<p>首辅颔首，转而看向亲王：“既然陛下已崩，这皇位——”</p>
<p>“我无意于王位。”亲王打断道，“不过您答应我的事可别忘了。”</p>
<p>“那是自然。”首辅回应道，“事成后我当即免去民间的暴政苛税，还苍生以太平。”</p>
<p>“既然如此，我不再过问你们的事，先走一步了。”亲王说道，随即起身向门外走去。</p>
<p>首辅给侍卫使了个眼色，侍卫起身，未及众人反应，已是一剑贯穿亲王胸膛。</p>
<p>亲王回过头，带着满眼的不可置信，缓缓倒下。</p>
<p>“张衡玉，你这是干什么！”禁军统领怒视着首辅呵道。</p>
<p>“先王乃是亲王手下所杀，衡玉不过攘除奸凶，将军何出此问？”首辅抿了口茶，淡淡说道。</p>
<p>“你！”禁军统领一时气结，“你这是要将皇室赶尽杀绝！”</p>
<p>“不错，待他朱家后继无人，我自取而代之。”首辅看着禁军统领笑道，“将军息怒，事成后，你便是开国大将军。”</p>
<p>禁军统领自知无力阻止，长叹一声，委顿坐下。</p>
<p>随后屋内众人又开始商议，皇帝却听不真切，又是一阵眩晕袭来，他的意识重新回到了黑暗中。</p>
<p>“陛下，我为您准备的这出戏可还精彩？”梅菲斯特的声音传来。</p>
<p>“唉，你想朕如何作答？”皇帝长叹一声说道，“想不到我朱家千年的基业竟毁于我手。”</p>
<p>“这正是我带来的交易，陛下，”梅菲斯特说，“我助您还阳，以阻止他们的阴谋。”</p>
<p>“朕则为此献出魂魄？”皇帝问道。</p>
<p>“不，陛下，您只要在行动中不借助我的力量，便无需献出魂魄。”梅菲斯特说。</p>
<p>“你本可以直接要走朕的魂魄，如此一来岂不是一无所获？”</p>
<p>“呵呵，这就无需陛下费心了，”梅菲斯特笑着说，“您要做这个交易吗？”</p>
<p>“事已致此，朕又哪有拒绝的余地呢？”</p>
<p>“那么，契约成立，陛下。”魔鬼的声音在黑暗中萦绕着。</p>
<h2 id="section-2">3</h2>
<p>晴空万里，阳光倾泻，将这座皇城映照的愈加辉煌。城内的人却笼罩在极深重的阴霾之下。</p>
<p>一日之内，皇帝与亲王双双殒命。每个人都在这样深重的阴霾下喘不过气来。</p>
<p>灵堂内，一众人正沉浸在或真或假的悲痛里。忽然室内的光线似乎黯淡了几分，人们纷纷向门口望去。只见一袭青黑龙袍，与一副本该沉寂棺木里的面容。</p>
<p>“朕，回来了。”皇帝扫视一圈后，缓缓地说。</p>
<p>众人愕然，一时间呆愣起来。灵堂内鸦雀无声，针落可闻。</p>
<p>“此必是先帝在人间尚有牵挂，以致诞生如此精怪，我等当恪尽臣道，为先帝了却心愿，还先帝安眠。”首辅大臣最先回过神来，微微颤抖着说，同时示意左右。</p>
<p>“对，先帝自入殓以来灵堂由我等日夜看管，无半点异样，此事必是精怪冒充先帝，意欲篡我朝社稷。”守灵的官员附和道。</p>
<p>皇帝的辩解，被淹没在了沸腾的人声里。毕竟人们亲眼看见了皇帝的入殓仪式，对先皇已死根本没有半点怀疑。何况此时，人们只愿相信自己想相信的事。</p>
<p>归来的皇帝，在一片喧嚣里，被押入偏殿。</p>
<h2 id="section-3">4</h2>
<p>这是先皇驾崩的第三天。</p>
<p>这一天，原本沉寂在死亡的阴影里的宫殿格外的富有生气，每个人都在忙碌着。</p>
<p>所有官员及妃嫔皇子聚集在祭祀场中，汉白玉砌造的皇室祭坛上，是身着祭服的首辅大臣。他接过燃起的三支香，缓缓插入被祭品围绕的香炉中，面对众人说道：</p>
<p>“前日先皇魂显灵堂，必是在人世尚有牵挂之物，致使魂魄不得安息，竟生出如此精怪之事，唯恐此举违逆天意，动摇我朝江山社稷，故行此祭天仪式，上祭苍天，以安帝灵。”</p>
<p>此时祭坛下正中坐着年仅7岁的小皇帝，他被众人簇拥着，还不清楚发生了什么。一侧便立着他的生母，如今已成太后。她身着最隆重的华服，伫立着，仿佛在等待什么。</p>
<p>两名近卫将太后请上了祭坛，与其说是请，倒更像是押着太后。首辅对天叩拜九次，从香炉旁请下一把纯金制的匕首，上嵌各色宝石，流光溢彩。他将匕首递给先太后，随后跪伏在地，朗声道：</p>
<p>“先帝与太后伉俪情深，必是不忍心一人先行，故不惜违背天意降灵此间，为皇室社稷虑，臣等伏请太后升天，以慰先帝之灵。”</p>
<p>众臣随即跪地，一遍一遍地齐声高呼：</p>
<p>“臣等伏请太后升天！”</p>
<p>太后双眼无神的看着他们，随后举起匕首，定定的望着设在祭坛上的一个高台。先皇帝被两名侍卫的看守下坐在那里，同样着装隆重，也在定定的望着台下的太后，已然泪流满面。</p>
<p>此时皇帝仿佛也意识到了即将发生的事情，声嘶力竭的哭喊起来： “母后！”</p>
<p>稚嫩的童音被淹没在了一声声洪亮的呼喊中，无法被台上的人听闻。</p>
<p>作为苍天之子，生而便不能成为一个人。与其说天子的生活里充满了各种仪式，倒不如说天子的生活本身就是一场仪式。皇帝自小被安排在各种活动里扮演自己的角色，忧愁，威严，或是平静。此时，两位皇帝被侍卫架着，看着自己生命中最重要的女人死去，仿佛也不过是一个仪式罢了。</p>
<p>太后望着先帝，凄然一笑，眼中的光华流泻而过，一滴泪水顺着脸颊滑落。</p>
<p>先帝突然意识到了什么，用尽力气高喊：</p>
<p>“梅菲斯特！我愿献出魂魄！停下！”</p>
<p>却并没有等来回应。</p>
<p>“啪嗒！”泪水掉落在汉白玉的地面上，摔得粉碎，紧接着又一声响，刚才被泪水浸湿的地面染上了血红。</p>
<p>无尽的悲哀压在先帝的身上，他只觉得眼前阵阵发黑，想要嘶喊些什么，干涩的喉咙却无法发出一个音节。</p>
<p>台下山呼海啸般的声音已转为“请先帝陛下安息！”，他怔怔望着眼前的金樽，举起毒酒，一饮而尽。</p>
<p>最后的念头里，是那年京城里格外红艳的芍药，和那少女盈盈的眼波，转眼又成了那倒在祭坛上的华美身影。</p>
<p>“我早该想到……”沉重的悔意里，君王的意识渐渐消失。</p>
<h2 id="section-4">5</h2>
<p>皇帝猛然睁开了眼，还未及反应便被无边的懊悔与仇恨淹没，几乎是惯性般流下了泪。</p>
<p>“皇兄？”亲王疑惑道。</p>
<p>此时皇帝才发现自己回到了那个棋局，此时正与亲王相对而坐。</p>
<p>“没什么，想起了一些事情。”皇帝回答到。</p>
<p>随后棋局进行，几手过后，皇帝抬头凝视着亲王，说：</p>
<p>“如此明显的决胜你为何迟迟不下？”</p>
<p>“臣弟……”亲王避开了皇帝的目光，迟疑道。</p>
<p>“这手下去，朕怕也该死了吧？”皇帝继续问道。</p>
<p>屋内的灯火猛然晃动了起来，亲王仓皇起身碰倒了桌子，黑白夹杂的棋子散落一地。</p>
<p>“皇，皇兄何出此言？”亲王声音颤抖着问到，眼中闪过一抹坚定，抬起了手。</p>
<p>阴影里，刀光闪动。</p>
<p>皇帝起身抓住了他即将挥下的手，道：“朕知道四下已经不会有朕的侍卫了，临死之前，咱们兄弟聊一聊可好？”</p>
<p>亲王没有答话。</p>
<p>“你我兄弟，一母所生，从小一同长大，想必没有什么仇怨？”</p>
<p>“皇兄待我，自是无话可说。”</p>
<p>“那你不是为自己咯？”皇帝问道，未及亲王答话，“可是为了天下苍生？为我那苛税暴政？”</p>
<p>“这……是。”亲王回答到，“近年各省灾祸连连，不少百姓流离失所，如若再担此重负，不知有多少牺牲。”</p>
<p>“哈哈哈，张衡玉，你真是好计谋啊。”皇帝苦笑道，随即皇帝从书案上拿了一本册子，递给亲王，道：“你看看吧，朕的文武百官，给朕的奏折。”</p>
<p>亲王看毕，震惊地看向皇帝，少顷，跪倒在地。</p>
<p>“皇兄，臣弟，臣弟罪当千刀万剐！”亲王泪流满面道。</p>
<p>“起来吧，想必你走这一步之前也上过折子？”</p>
<p>“是。”</p>
<p>“你的折子，朕一封也没有收到。”皇帝叹道，“唉，看来朕的朝廷，该洗一洗了。”</p>
<h2 id="section-5">6</h2>
<p>阳光，辉煌的宫殿。阴霾下的皇城。</p>
<p>灵堂的门口，一袭青黑龙袍，一副本该已逝的面容。</p>
<p>“朕，回来了。”皇帝缓缓地说。</p>
<p>鸦雀无声。</p>
<p>“必是——”首辅的声音刚响起来便被一把抵在脖子上的剑生生抑住。</p>
<p>“侍卫，把这个胆敢冒充先帝的贼人给我拿下！”一名官员喊道。</p>
<p>没有回应。</p>
<p>“侍卫！”又一名官员叫喊着。</p>
<p>“打开棺材！”皇帝呵道。</p>
<p>两名侍卫上前，打开了棺盖，里面赫然空无一物。</p>
<p>众人见状纷纷跪倒在地。</p>
<p>“首辅大人，这出戏可还精彩？”皇帝冷笑着问道。</p>
<p>首辅大臣面如死灰，垂首不言。</p>
<p>“首辅张衡玉及其朋党，蒙蔽圣心在前，意图篡逆在后，实属罪大恶极，现缉拿归案，以待圣判。”禁军统领宣判道。</p>
<h2 id="section-6">7</h2>
<p>夕阳为皇城的主殿覆上一层光晕。</p>
<p>偌大的殿堂内却仅有皇帝一人，正靠在龙椅上，满脸的疲惫。</p>
<p>“该现身了吧，梅菲斯特！”皇帝喊道。</p>
<p>“在，陛下。”虚空中传来回应。</p>
<p>“朕是个重信义之人，朕自知若非动用了你的力量绝无可能逃过此劫。”皇帝缓缓说道，“将朕的魂魄拿去吧。”</p>
<p>“遵命，陛下。”</p>
<p>朦胧的夕阳光晕里，皇帝的身躯委顿倒下。</p>
<h2 id="section-7">8</h2>
<p>“陛下，醒醒。”皇帝睁开了眼，一张关切的面容映入眼帘。看着那盈盈眼眸，皇帝仿佛闻到了一阵芍药花香。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
  </entry>
  <entry>
    <title>小张和小丽</title>
    <url>/blog/2019/11/15/L011-%E5%B0%8F%E5%BC%A0%E5%92%8C%E5%B0%8F%E4%B8%BD/</url>
    <content><![CDATA[<p>第一次见到小张，是相亲时。我妈跟我说她多好多好，某某名校毕业，多少男生跑断了腿，配我这个职专生绰绰有余，后来才知道不过是三本分校而已。</p>
<p>小张有点圆脸，长发飘飘的，坐在那里知书达理，对长辈抱有耐心的笑，偶尔和我有个眼神接触，也是转瞬即逝的样子。</p>
<span id="more"></span>
<p>这是我第一次相亲，并没有体会到一见钟情的感觉，连来电都没有。大人让我送她回家，我们并肩在街上走，有一搭没一搭说话，尴尬的难以置信。走着走着我就想，难道真的要和这样一个陌生人过完下半辈子吗？</p>
<p>于是我就不争气的开始想小丽。</p>
<p>吃散伙饭时，都喝多了，大家乱哄哄凑钱去搞成人礼。有人满嘴仁义道德，可见大伙儿来真的，两百大元比谁放的都快，还强辩“我只是陪你们去，我又不玩那个。”后来那个人做了机关领导，令人不可思议。</p>
<p>小丽推门进来，穿一件很薄的衣服，倚着门框问我，“可以吗？”</p>
<p>我必须故作老练，被不然被失足看扁了多丢脸，很久以后才知道失足的眼才是阅历天下，谁也逃不过。是人是狗，一丝不挂躺那儿，一目了然。</p>
<p>我说，“就你吧，赶紧的。”</p>
<p>她就笑，带上门，唤我起来，铺了一层塑料单子的东西在床上，轻道，“你看你，那么急往上躺，你也不知道等我上来，多脏呀。”</p>
<p>我一愣，“很脏吗？”</p>
<p>她就笑了，“第一次来吧？那么小，不学好。”</p>
<p>我脸刷一下就红了，想狡辩，又怕再被一语戳穿，到时更丢脸，于是转移话题，“你也不大啊！”</p>
<p>她铺好床，把我放上面，“比你大多了，你得喊我姐姐。”</p>
<p>我更觉得丢脸，“少来了你。”</p>
<p>她很认真的盯着我看，说，“你也就十七八岁的样子，我大你五岁。”停了停，笑道，“叫阿姨我会生气的。”</p>
<p>她说很好听的普通话，听不出是哪里人。</p>
<p>她解我浴袍，我下意识躲了一下，她也一愣，随即想到什么，“那你自己来好了。”</p>
<p>我想死的心都有了，这时突然恨不得我们并不是在做这种交易，或者是在校外遇上个心仪的人，或者是在网吧碰见个有感觉的女生。</p>
<p>“你叫什么？”我问她。</p>
<p>她脸上又有了惊讶的表情，估计来这里的雏子并不多，会问这种匪夷所思的问题的人也不常见，但她还是很快的回答，“丽丽。”</p>
<p>“一听就知道是假名字。”我说。</p>
<p>她忽然就把那薄纱给脱了，吓得我有点窒息，“你只有一个钟的时间哦。”说着把我按到了。</p>
<p>房间的灯幽黄幽黄的，像山中的柴房。冷气开的十足，小丽的皮肤如水一般凉。</p>
<p>我摸她，像冷藏的脂肪。几分钟，我就交了枪。</p>
<p>她用薄荷味的湿巾给我擦身体，我跟老年痴呆的病人一样，死鱼般躺在那里，脑子一片空白。期间几次想打个岔说点什么，可是发现脑细胞这会儿好像都射了出去。</p>
<p>她穿好衣服，把她携带东西的小篮子拿起来准备走，我始终没发一言。</p>
<p>走到门口，她回头看我，我俩对视了几秒钟，她噗嗤笑了。</p>
<p>“看你那苦大仇深的样子，好像被鬼附体了似的。干嘛，不爽啊？”</p>
<p>我也恼了，“你看过西游记没？”</p>
<p>“看过啊！”</p>
<p>“猪八戒吃人参果知道不？”</p>
<p>“知道啊！”</p>
<p>我想说我跟二师兄一样委屈，没尝出什么味儿的人参果就吃下去了，突然觉得这样好欲求不满的样子，话到喉咙又生生止住了。</p>
<p>“然后呢？”她站在门边，好奇的问。</p>
<p>“没了，你走吧。”我泄了气，觉得这两百好不值，突然开始心疼钱了，我真没种。</p>
<p>小丽看了我几秒，走了过来，坐在床边，“再做要加钱的。”</p>
<p>“谁要做了！”我切一声，没好气催她，“你快走吧，我歇一会儿也走了。”</p>
<p>“真，的，吗？”她坏笑着，一个字一个字的点在我的敏感词上，手指好像甘露柳枝，洒在那枯萎的人参果树上，片刻又拔地而起了。</p>
<p>“我，我不做了，同学，哦不是，朋友还在等我呢！”我捂着那不争气的人参果树，羞红了脸。</p>
<p>她爬将过来，一手攥住人参树，在我耳边悄声说，“你叫我一声姐，我免费送你一个钟。”</p>
<p>“我才不要……”</p>
<p>她手下力气重了点，我撑不住，</p>
<p>“姐……”</p>
<p>见我出来晚了，他们几个就问，“怎么了小祥，不会被保安抓了吧？”“这么久啊，迷路了么？”</p>
<p>我觉得酒劲上来了，自豪道，“做了两次！”</p>
<p>他们对视一眼，喜闻乐见道，“意淫一时爽，全家火葬场！”“洒逼，吹牛逼也得动动脑子啊，你当这里是超市啊，还买一赠一！”“临走还送你个打火机？”</p>
<p>然后大家大快人心的在街边狂笑不止。</p>
<p>我有点累了，懒得争辩。脑中都是小丽乌黑的毛发，以及她背后幽黄的灯光，像一出京戏，在我的人生中拉开了短暂的帷幕。</p>
<p>相亲完了我就没再联系过小张，我妈不断催我，“多好的姑娘啊！你也上上心，别整天下了班就窝家里打游戏！我跟你爸这么大年纪了，就差你这么个心事儿没办完了。”</p>
<p>我一分神，空血的蛮王忘了开大，死在乱刀之下。</p>
<p>“知道了知道了，催催催，媳妇儿迷！”</p>
<p>媳妇儿迷是我小时候我爸常拿来笑话我的。那时候家里来了客人，就有人喜欢逗我，“你将来娶了媳妇儿，是跟你媳妇儿过，还是跟你爸妈过啊！”</p>
<p>我说，“跟媳妇儿过啊！”</p>
<p>他们就一起笑话我，“媳妇儿迷啊媳妇儿迷！”</p>
<p>这个笑话一直到我长大了也没理解，这些长辈结婚后不也是和媳妇儿过的吗？也没见谁带着自己老爹老娘一起过的啊，怎么着就我自己是媳妇儿迷了？</p>
<p>我给小张发短信，“等你有时间，一起看个电影吧！”然后继续带兵线，拆塔时，手机响了，对面过来两个英雄，我扭头就跑，躲进草丛，回了城，身上的钱刚好出一把红叉。</p>
<p>“你是谁啊？”</p>
<p>我啪啪回过去，“小祥。”然后拖着我饥渴难耐的大刀，传送去了没人防守的下路。带过去兵线，拆了塔，又绕过去，打了龙，手机才姗姗来迟的响了起来。</p>
<p>“呵呵，这个周六下午吧！”</p>
<p>“好。”</p>
<p>那次之后，我就养成了攒钱的好习惯。我爸见了，夸奖道，“媳妇儿迷学会存钱了啊，还没上班就寻思着娶媳妇呐！”</p>
<p>我嘿嘿讪笑，心里磕了一万个头。对不起爸爸，我悉心攒钱是为了护失足的。我不是媳妇儿迷。</p>
<p>再去那地方，从一开始的陌生感，夹杂着隐约的恐怖感，竟然有了一种亲切的感觉。</p>
<p>我问吧台，“小丽在不？”</p>
<p>吧台冷冷道，“这里只售公共浴场套票。”</p>
<p>上次是同学交的钱，我也不清楚是怎么个环节，匆匆交了个通票钱，潦草的冲了个澡，便上了三楼。</p>
<p>门童唱，“三楼贵宾一位——”</p>
<p>立马有个勤快的服务生跑过来，年纪和我约莫大，热情道，“先生有指定没？”</p>
<p>我觉得三楼和一楼这么一对比，的确有天上和人间的区别。</p>
<p>“小丽，比我大几岁那个。”我比划道。</p>
<p>服务生做了难，“先生，咱们这儿叫小丽的有好几个呢，而且好像都在上钟，您知道她的牌号吗？”</p>
<p>我茫然的摇了摇头。</p>
<p>“那要不您先到房间等着，一会儿小丽下了钟，我让她去找您。”</p>
<p>“也行。”</p>
<p>“不过您进了房间就要开始算钟了，45分钟到了您就得出来了，要不您换个试试？”</p>
<p>“不了，我就等等吧，你尽快。”</p>
<p>“好好！先生里边儿请。”</p>
<p>是和上次有些方位不同的房间，装饰布置都一样，灯光有久违的熟悉感。</p>
<p>我记得小丽的话，不敢乱往床上躺，就在那儿直挺挺的站着，腿酸了就溜达溜达。冷气还是很低，好像故意要把人冻跑似的，我找了找，却没有遥控器。</p>
<p>过了会儿有人敲门，进来个女的，我看她，她也看我。</p>
<p>“可以吗？”她问我。</p>
<p>“不可以。”我回道。</p>
<p>她讪笑一下，转身过去的时候变成了厌恶的神情，带上了门。</p>
<p>又过了一会儿，又进来个女的，问，“可以吗？”</p>
<p>我问她，“你叫什么呀？”</p>
<p>“小丽啊！”</p>
<p>“此小丽非彼小丽。”</p>
<p>“什么？”</p>
<p>“对不起，我在等人。”</p>
<p>“什么玩意儿，切。”</p>
<p>墙上有块老旧的表，我心想该不会是暗喻老表子的意思吧？又琢磨了会儿，觉得店长没这么内涵。突然发现，我的时间好像不多了。</p>
<p>一股巨大的失落感扑面而来，席卷着包裹着我，像是从梦里无限的坠落，被抽干了力气。</p>
<p>我蹲下来，难过的想掉泪。</p>
<p>二百块，我攒了他妈两个多礼拜。抽他妈红梅，喝他妈白开水。就这么在这憋屈的小屋里，傻了吧唧的站没了。</p>
<p>一站没。</p>
<p>我小时候学过的古文全冒出来了，什么塞翁失马焉知非福，什么齐家治国平天下，什么老而不死是为贼也。</p>
<p>突然高秀敏彪呼呼的在我脑子里冒出来了，“你此刻就是给我们喝云南白药，也弥补不了我们心中的创伤。”</p>
<p>我蹲在那里，傻呵呵的笑出来。</p>
<p>门又开了，她好听的普通话在我身后问，“可以吗？”</p>
<p>我扭过头，像至尊宝一样蹲在那里，眼里可能还有泪花。</p>
<p>她惊倒，“她们说来个怪人，怎么是你啊！你蹲那里干嘛？”</p>
<p>我觉得自己像小溪汇入了大海，枯木扎进了森林。一股委屈顶风冒雪的冲了出来，我差点没憋住，鼻子酸的要死。</p>
<p>她想起什么，“你的钟快到点了吧？”</p>
<p>我突然被戳中泪点，眼泪扑哧扑哧掉了下来。</p>
<p>她吓坏了，把小篮子丢在一边，扶我坐在床边儿。“哎呦好弟弟，怎么了这是，有什么不开心的事儿吗？跟姐说说。”</p>
<p>门外服务生敲门，“还有五分钟啊！”</p>
<p>我再一次霍金附体，瘫痪在那儿，越他妈想告诉自己别哭别哭，越他妈哭的厉害。后来我每逢回忆到这天，都由衷羡慕夏侯惇真汉子。</p>
<p>小丽说，“哎呀，你赶紧的，要到钟了。”</p>
<p>我摇摇头，鼻涕甩了出来，她赶紧拿湿巾给我擦。</p>
<p>“不了姐，我就是想来看看你，想很久了。”</p>
<p>她给我擦鼻涕的手停住了，看了我一会儿，“真的？”</p>
<p>我的嘴被湿巾堵着，有清凉的薄荷味，让我想起她上次给我擦身体的样子来。她依然穿着那件薄薄的衣服，在灯光下看不出是粉红还是大红。</p>
<p>我不争气的又人参树了。</p>
<p>浴袍很松，她轻易识破了我的谎言，却笑道，“弟弟真好。”</p>
<p>我必须男人一次。我警告自己，话都说这份儿上了，要是敢做，我就自宫！</p>
<p>我接过湿巾，自己揩了揩，站起来，“到时间了，下次再来看你吧！”</p>
<p>说着我就想往外走。见到了小丽，突然觉得那两百块即使没用在了刀刃上，起码也算是物尽其用了。心疼的感觉不翼而飞，我心情又好了起来。</p>
<p>“呐，”她叫住我，“你给我你的手机号，这周六下午我给你补回来吧！”</p>
<p>我冲口欲出，可是又仔细想了想。她该不会讹我吧？找几个黑社会把我绑票了？还是拍下照片管我要钱？</p>
<p>见我杵在那儿，她似乎看透了我的心思，“要不这样，我给你我的，你要是想，就找我，时间地点你定。”说着她翻出一只笔，撕了张纸条，写下个号码给我。</p>
<p>“小弟你能来看我真好！”出门前，她浅浅笑道，有说不出的万种风情。</p>
<p>晚上我握着那张纸条撸了好几次，每次都意犹未尽。</p>
<p>她冰冷的皮肤，冷藏的脂肪。还有出门前那回眸一笑。</p>
<p>我给她发短信，“还是我请你看电影吧！”</p>
<p>她一直没回，直到我沉沉睡去。</p>
<p>我觉得她像敷衍小孩子一样，把我哄了出去，免得我在浴场惹是生非。</p>
<p>可是又想到她对我说，“你能来看我真好”，又觉得那不像是在做戏。</p>
<p>戏子无情，□□无义。也不记得从哪里听来这话，反反复复在我梦里出现。</p>
<p>第二天醒来，她的短信平静的浮现在屏幕上。看时间，是凌晨三点半发来的。</p>
<p>“看电影的话，就礼拜二下午去呀，半价哦！”</p>
<p>我兴奋的从床上翻起来，他妈的，他妈的！谁他妈说□□无义的！</p>
<p>突然觉得，这样叫她，好像很过分的样子。</p>
<p>我们约了时间，在影院门口碰面。</p>
<p>我跟家里说同学过生日，要了一百块出来。买了两张票，又到肯德基买了点鸡翅和可乐。</p>
<p>我在那里等，下午两点半，三点开场。迎面的和逆流的，是面貌各异的人潮。我忽然担心会不会不认识她。</p>
<p>每当觉得有人像她时，便竭力张望，做出翘首以盼的样子，希望她能发现我的存在。当那些面熟的人面无表情的从我身边走过时，一次次加重我的失落感。</p>
<p>等人是世界上最煎熬的事情，尤其是在不确定对方是不是会来的前提下。</p>
<p>向我一样早来一会儿会死吗？</p>
<p>会死吗？会死吗？</p>
<p>两点四十五，小丽提着一塑料袋东西，同样东张西望的向我走来。原来我一下子就可以认出她来，在没有昏暗的灯光下，在烈日炎炎下。</p>
<p>她穿的很素净，阳光下看起来和普通女生没什么区别。</p>
<p>谁也不知道我现在正在和失足约会。</p>
<p>要是被人知道了，我这辈子就完了。</p>
<p>那些护过无数失足的人会跳出来，大义凛然的指责我，说我破坏社会道德，说我影响构建和谐特色社会主义，说我第73条，说我丧心病狂。</p>
<p>我突然有些害怕了。</p>
<p>小丽看见我，走过来道，“你买东西干嘛呀，我带了些吃的了。”</p>
<p>我扬了扬那包小小的肯德基，“走吧，快开场了。”然后心虚的很，生怕碰见熟人，好像全世界都知道小丽是失足似的。</p>
<p>进场的路很短，可是却觉得一直被别人指指点点。</p>
<p>小丽不说话，与我不近不远的走着，她好像能察觉到我的心思。</p>
<p>于是她不闻不问。</p>
<p>我觉得小丽这一点挺好的。</p>
<p>散场后，转出门外，进到熙熙攘攘的人群中。</p>
<p>我们带来的零食基本没怎么吃，而天也将要暗了。</p>
<p>“去吃点东西吧？”我说，“那边的成都小吃的盖饭很好吃的。”</p>
<p>小丽犹豫了一下，我突然意识到天一黑，她就要上班了。</p>
<p>一股厌恶感油然而生。</p>
<p>可是我又想她答应我。</p>
<p>小丽说，“不去外面吃了吧，又脏又贵。”</p>
<p>“不贵啊。”我盘算着两张半价票买完，又买了点鸡翅，剩下的十几块钱还是够我们俩吃一顿盖饭的。</p>
<p>“总是不干净嘛。去我那儿吧，我给你做饭吃。”</p>
<p>“你会做饭？”</p>
<p>“很奇怪吗？”</p>
<p>她租了间民房，在靠近汽车站的附近。</p>
<p>屋内也出乎意料的干净，物件不多，但都井井有条。</p>
<p>小丽炒了两个菜，焖了些米饭。菜很清淡，是从来没吃过的味道。</p>
<p>席间我们都没话说，气氛一度尴尬的要死。</p>
<p>家里没有电视，只有一台旧的笔记本电脑。小丽放了音乐，收拾碗筷。</p>
<p>“我帮你啊！”</p>
<p>“不用，你玩儿电脑吧，这哪是男人家做的事。”</p>
<p>这话我喜欢听。</p>
<p>她手脚麻利，一会儿弄好了。房间里除了有淡淡的饭菜味，其他好像都没有出现过一样。</p>
<p>我机械性的打蜘蛛纸牌，小丽在我旁边看了会儿，跟我说，“诶，现在还想哭么？”</p>
<p>“……提这干嘛？”</p>
<p>“你要是哭出来，我就安慰你呀。”</p>
<p>“我才不哭，有病啊。”</p>
<p>“真的？”她用手撩撩我的大腿，那颗小树又旺盛起来。“你弟弟比我弟弟诚实。”</p>
<p>“去你的。”</p>
<p>“叫声姐就给你做。”</p>
<p>“我不。”</p>
<p>“现在呢？”她的手伸了进来。</p>
<p>“真的可以？”</p>
<p>“叫不叫？” “别说姐姐，婶婶我也叫得。”我把本子放在床头，向她凑去，她吃吃的笑。</p>
<p>那身朴素的衣服，被我笨拙的剥。</p>
<p>时而卡在这里，时而卡在那里，断断续续的。</p>
<p>小丽始终保持着那样的笑容，好像鼓励般似的。</p>
<p>终于在胸罩的扣子上卡了壳。</p>
<p>我像个稚嫩的坦克维修师，满头大汗的精修她背后的铁扣。</p>
<p>小丽的颈间传来淡淡的发香，皮肤上是沐浴露的味道。</p>
<p>又或者是香皂，白色那款的舒肤佳。</p>
<p>我怕气氛僵了，便凑过去想吻她的嘴。</p>
<p>她却躲开了。 我本能的楞在那里，她就趁机笑着解开了衣扣。</p>
<p>我魂牵梦绕的冷藏脂肪，雪白的跳了出来。</p>
<p>我摸摸，像小时候玩过装水的皮球。想去亲时，又被她轻轻挡住了。</p>
<p>“只可以碰，不可以吃。”她在我耳边轻道，然后开始解我的衣物。</p>
<p>“为什么啊！”</p>
<p>她没说话，但是她眼睛里分明写着，脏。</p>
<p>小丽把我轻轻放倒，找到小树苗，含了起来。</p>
<p>天花板也很干净，墙角没有蜘蛛网，是用了心打扫过的。</p>
<p>周遭的温度仿佛都静止了般，凝聚在小树苗的顶端。</p>
<p>我去看她的脸，认真的仿佛像小学生在做功课。</p>
<p>与第一次不同的是，她做的很轻，很慢，不像上次那般赶时间。</p>
<p>又或者，她并没有把我当成客人。</p>
<p>就像恋人般的，用心的照料。</p>
<p>生怕一不小心，就扫了对方的兴。</p>
<p>一个人爱你不爱你，很多小事都可以看出来的。 她牵着我的手，放在她那个地方。</p>
<p>和这个房间一样，那里似乎也一尘不染。</p>
<p>“姐没给你准备小雨伞，不过姐这里很干净，你放心便是。”</p>
<p>我笑，“牡丹花下死——”</p>
<p>她打我一下，“别说这些不吉利的话，姐不爱听。”</p>
<p>然后她扶着我，一点点了进了去。</p>
<p>我贴着她的皮肤，一点也不冷。反而随着天气，越来越烫。</p>
<p>她喉咙里挤出的声音，尽量压抑着，仿佛怕隔壁有人偷听一样。</p>
<p>我想她这样，是怕我听到她的声音联想起她的工作。</p>
<p>还是怕我扫了兴。</p>
<p>我突然很感动。</p>
<p>想起一句台词，便问她。</p>
<p>“不工作了好么？”</p>
<p>她一愣，笑的眼都没了，“你养我啊？”</p>
<p>然后她捂住我的嘴，没让我说下去。随着彼此的喘息越来越浓，小树终是坚挺不住了。 周六下午，还是三点的场。较那年来看，价格不知翻了多少倍。</p>
<p>我在海报前等小张，买了很多肯德基的零食。</p>
<p>天气不算热，有习习凉风拂过。周六的人显然比周二半价那天要多的多。偶尔有一身素衣过去的女生，就让我想起是不是小丽。</p>
<p>两点四十五，是小丽出现的时间，然而小张却不是。</p>
<p>我早就不会诅咒迟到的人会死了。</p>
<p>一些率性而天真的东西，在成长的路上，走着走着就丢了。</p>
<p>即使某天强行捡起，再把玩时，却觉得索然无味。</p>
<p>两点五十四，小张姗姗走来，挎着一个很精致的小包，我觉得那里面很难放下什么零食。</p>
<p>“你怎么还买这个呀，多油啊！”小张见我第一句话，不是问候。</p>
<p>“没事，我自己吃。给你买了爆米花。”</p>
<p>“谢谢，那个我也不吃，膨化食品不好。”</p>
<p>“那进去吧。”</p>
<p>“嗯。” 我们看最新的电影，特效与故事跌宕起伏，前面的人头攒动，与小丽那天的冷清形成鲜明对比。</p>
<p>我的手都是奥尔良的肉汁，使劲擦了擦，还是有点黏，像刚捏过屎一样。</p>
<p>我对小张说，“我去下洗手间。”</p>
<p>小张头也不回，“奥。”</p>
<p>我站在那里几秒，便弓着身子退了出去。</p>
<p>洗干净手，回来不久，便想着牵小张。</p>
<p>画面一个转接，剧情陡然变卦，前排不少观众发出“唔哦——”的惊叹声。</p>
<p>我轻轻攥住小张，瞥着看她，依然没什么反应，认真的盯着屏幕，嘴巴也呈O型。</p>
<p>我在心里比划，不知这个O型，小树苗会喜欢吗。 散了场，我们已然是别人眼中的正规情侣，牵着手一起出来。</p>
<p>见她并没有想回家的意思，看来晚饭也得我请了。</p>
<p>“吃点什么去吧？”我问她。</p>
<p>“好啊。”</p>
<p>我盘算着她先前已经嫌弃过肯德基了，那么这个最划算的晚餐已经不复存在了。</p>
<p>“必胜客？”</p>
<p>“人好多的。”</p>
<p>“川菜？”</p>
<p>“口水油啊！”</p>
<p>“海鲜馆？”</p>
<p>“不正宗啊，都是冻鲜。”</p>
<p>我一肚子窝囊气。我平生知道的几家饭馆都罗列出来了，没一个你不嫌弃的。</p>
<p>“要不回家自己做吧。”</p>
<p>“你会做饭啊？”她欣喜道。</p>
<p>“不会啊。”</p>
<p>“我也不会啊！”</p>
<p>“你不会做饭？”</p>
<p>她惊奇的看我一眼，随即抛出一蔑不屑，“很奇怪吗？”</p>
<p>我可不想约会第一天就为这个吵架。耸耸肩，撇撇嘴。</p>
<p>“那你提议咯。”我无奈道。</p>
<p>“嗯……”她装作绞尽脑汁的样子，迅速说出她盘算已久的答案。</p>
<p>“去湖边吃旋转餐厅吧，那里的西餐蛮好的。”</p>
<p>西餐不会很油吗？</p>
<p>我没敢问。 小张像是英国来的贵族人士，点一些我听过没见过的东西吃。</p>
<p>我很怕面对英文菜单把菜点成钢琴曲，于是叫小张帮我点。</p>
<p>“吃这个吧，意大利口味的，我蛮喜欢的。”小张点完，优雅的喝茶。</p>
<p>餐厅在湖面上缓缓旋转，四个小时走完一圈。很多鸿星尔克吃完出门口就迷了路。</p>
<p>像我一样。</p>
<p>餐厅的灯光金碧辉煌，映得我更像是尘世间的土鳖。</p>
<p>不知道为什么衣服都觉得紧了。我觉得四周的人都在笑我。</p>
<p>然而事实是，谁也没兴趣多瞧我一眼。</p>
<p>包括小张。</p>
<p>她拨弄着手机，多点触控。好几次我咬咬牙，都没舍得买。</p>
<p>女生到底是怎么攒钱的？</p>
<p>她划的专心致志，划的全神贯注。我就坐在她的对面，病入膏盲般，痴呆的望着远方不经意流动的湖面。 “等结婚时让你家买个车吧？”出来后，我们在湖边散步，小张冷不丁这么说。</p>
<p>我不高兴了，“一般来说，不都是男方买房，女方买车么？”</p>
<p>小张更不高兴，“你那是什么旧思想啊！该把你打回旧社会好好批斗一下！”</p>
<p>我想把她一脚踹下去喂鱼。可是我妈那眉间的愁，又锁的我清醒了些。</p>
<p>没办法啊。没办法。</p>
<p>谁让我是个一事无成的人，只靠这微博的家底，招摇撞骗找个大学生准备结婚呢。</p>
<p>“好啊，那就买个车。”我决定委曲求全。</p>
<p>“Mini Cooper吧！”</p>
<p>我心里狂喊迷你mlgb啊，嘴上却说，“小点儿吧？”</p>
<p>“我开刚好啊，市区还好停车。”</p>
<p>不知道是哪个王八蛋说的话，一直在我脑子里徘徊不散：</p>
<p>“每朵黑木耳心里都有个马尔代夫，屁股下面都有个宝马。”</p>
<p>哪怕是你妈的迷你宝马。 走着走着，就到了如家楼下。</p>
<p>“进去坐坐吧。”我坦然自若道。</p>
<p>“想什么呢你？”小张一下子警惕起来。</p>
<p>“你想什么呢？”</p>
<p>“问你啊？”</p>
<p>“我看也该把你打回旧社会去。”</p>
<p>“不早了，我该回家了。”</p>
<p>“真的不去？”</p>
<p>“神经！”</p>
<p>见她如此贞洁烈女，我只好送她回家。</p>
<p>睡觉前我本想撸一管，可是不经意想到今天的花销，小树苗一蹶不振。</p>
<p>病揪揪的样子。 那天以后，我时不时给小丽发发短信，逐渐摸清了她的生活规律。</p>
<p>她一般凌晨三点下班，回到家收拾一下就睡觉，第二天中午起床。做家务，做饭，看看电影。下午要是天气好，会和几个姐妹逛街。晚上八点后上班。</p>
<p>那段时间恰好我有大把时间。学校刚毕业，工作又没着落。大人忙的很，常常我中午饿的醒来，家里却一个人都没有。</p>
<p>“我又被遗弃了啊！”我给小丽发短信。</p>
<p>很快她就回我，“来跟姐吃饭啊！”</p>
<p>“光吃你怎么行！我请你吃成都小吃啊！”</p>
<p>“花那冤枉钱干嘛，快来！”</p>
<p>我骑着单车，时而在机动车道逆行，对面的车呼啸而过，唱着嘹亮的喇叭。</p>
<p>也觉得夏天虽然热，却也不那么难过了。</p>
<p>小树苗蠢蠢欲动，心跳的砰砰的。</p>
<p>小丽屋里新放了一个紫色的方形小风扇，嗡嗡吹来夏天的味道。</p>
<p>“什么时候添了个大件儿啊？”我掂了掂，挺轻的。</p>
<p>“三十块，菜市场那边小店买的啊，好看不？”</p>
<p>“好看。”</p>
<p>小丽在厨房里忙活，青菜下了锅，呲啦爆出香味。</p>
<p>我站她旁边，看她翻翻炒炒。</p>
<p>那只白皙的手，十几个小时前还握着不同男人的小树苗或者大树苗，而今正娴熟的炒着菜，像个普通的家庭妇女一样贤惠。</p>
<p>我突然想，要是小丽不是失足多好。</p>
<p>我在后面抱住她，小丽笑道，“想姐啦？”</p>
<p>“嗯！”</p>
<p>“想也得先吃饭，小孩子家家的，不能整天想这个。”</p>
<p>“那中。”</p>
<p>直到现在回想起来，我都觉得小丽是个不可思议的人。无论她说什么，好像都是令人无法抗拒的提议。</p>
<p>又或者，我很愿意听她的话。</p>
<p>可并不是所有吃过我小树苗的我都这样。</p>
<p>于是小丽是独一无二的。</p>
<p>她收拾碗筷，我像个小孩子一样在旁边跟着，问这问那。</p>
<p>“为什么不装个空调啊？”</p>
<p>“空调多贵呀。”</p>
<p>“一分价钱一分货啊。”</p>
<p>“又不是很热，我家那边比这边可厉害多了。”</p>
<p>“你家在哪儿啊？”</p>
<p>“你猜呀。”</p>
<p>“我哪里猜得到。”</p>
<p>“那就慢慢猜呗。”</p>
<p>“你直接告诉我不就完了。”</p>
<p>小丽停下手里的活儿，关上水龙头，回过身来看我，笑嘻嘻道，“那——可不行，这是商——业秘密——”</p>
<p>我心里一阵憋屈，火起来了，这样的话让我觉得她把我当那些客人一样。</p>
<p>“那算了。”我扭头就走。本想潇洒的摔门而去，可我的小树苗隐约嘶吼着叫我不要这样。</p>
<p>于是我乖乖的听小树苗的，坐在床边生闷气。</p>
<p>小丽见了，便顾不得洗碗了，拿毛巾擦了擦手，赶了过来，坐我旁边。</p>
<p>“干嘛呀？发小脾气啦？”</p>
<p>“哪有。”</p>
<p>“哈，你看你的脸，都掉到地上了，还说没有。”</p>
<p>“去你的。”被她这么一说，我突然有点憋不住想笑场。可是如果就这么算了也太没种了，我必须坚强下去。</p>
<p>小丽的舌头勾着我的脖子滑了上来，直到耳垂，湿哒哒道，“吃饱没？”</p>
<p>“再不饱不就是猪了！”</p>
<p>“那可以做了哈。” 她好像不太喜欢前戏，不喜欢我戏她，也不喜欢戏我。</p>
<p>她掏出小树苗，把头发挂到耳后，便俯下身去含了住。</p>
<p>往耳朵后面挂头发那个动作，直到现在我都觉得特别风情万种。 然而我又觉得她是在戏我了。吞吞吐吐的，就是不肯用力，口水声专业的像电视里一样。</p>
<p>她察觉到我在看她，便翻着眼看我，额头上挤出一些细纹。</p>
<p>她没有停，依然和我对视着。不一会儿我的表情就变形了，她又笑了。</p>
<p>小丽平时长得还算可以，但就在这个时候会显得特别好看。</p>
<p>又或者是躺在那里，不做作的叫床时，微闭的双眼，盖着淡淡的眼帘。</p>
<p>也是好看的不行。</p>
<p>为什么这么好看的一个女孩儿，就去做失足了呢。</p>
<p>我的小树在忧国忧民的心情中，枯萎在她的嘴里。</p>
<p>她捧个水杯漱口，我光着屁股坐在床边，晃着腿。</p>
<p>“姐……”</p>
<p>“嗯？”</p>
<p>“为什么要做这行啊？”</p>
<p>她没有回头，咕噜咕噜把水吐出来，拿毛巾擦拭，慢条斯理的。</p>
<p>“姐？”</p>
<p>她把毛巾挂上，“因为穷啊。”轻描淡写，然后去厨房找了两个苹果，在那边洗，边洗边嘟囔，“我听人家说啊，男生做这事很费身子的，不能贪多啊，以后你得节制点儿，听见没？”</p>
<p>她给我个大的，“别削皮，那样没营养。”</p>
<p>“你家里很穷啊？”</p>
<p>“是呀。”</p>
<p>“我家也很穷啊。”</p>
<p>她扑哧笑了出来，“那你也去卖啊！”</p>
<p>“窝巢，我倒是想，你给我介绍介绍啊！”</p>
<p>她推我一把，“去你的。”用的是我的口气，“以后去考个公务员，当大官去，给姐争争气。”</p>
<p>我刚想说我这种职专生考不了公务员的，可是看她一脸期许的样子，好像真的把我当做她的亲弟弟一样。</p>
<p>“好哇，我考**局失足科，捧你上位做鸡头啊！到时候咱们联手拿下城里的业务，富可敌国啊！”</p>
<p>然后我俩笑的前仰后合。</p>
<p>都快笑出了眼泪。</p>
<p>小丽喘着气道，“你们这些读书人啊，歪心眼子就是多。姐没那么大志气，我再赚点钱，就要回家去啦。”</p>
<p>“回家？”</p>
<p>“是啊，姐也一把年纪了，总不能一直在外面儿飘呀。”</p>
<p>“回去干嘛？家里不是很穷吗？”</p>
<p>她嘿嘿点我脑门，“姐要回家，相汉子，给人当媳妇儿生娃娃呀！”</p>
<p>我突然又不高兴了。</p>
<p>见我不说话，她有点慌，想劝我开心，又不知从哪儿说起，冒冒失失道，“哎呀，我会一直记着你啦。”</p>
<p>我还是不想说话。</p>
<p>她放下苹果，小跑过去擦了擦手，又快速跑回来，小拖鞋啪嗒啪嗒的。</p>
<p>她跳上床来，从后面把我揽住。</p>
<p>“好弟弟，你别这样儿成吗？你那驴脸一掉地上，姐心里没底儿。”</p>
<p>“家里知道你做什么吗？”</p>
<p>“我有病呀！怎么可能让家里知道！我们村里几个约好了一起出来打工的。”</p>
<p>“都是做这个的？”</p>
<p>“是呀。”</p>
<p>“你们村挺与时俱进的。”</p>
<p>“什么啊，一开始都是在工厂和私企，可是难啊，大家辛辛苦苦工作一个月，最后赚的工资勉强够自己生活，这哪里够呀。”</p>
<p>“然后呢？”</p>
<p>“然后我们换了很多工作啊，去超市啊，商场啊都做过事，可是都差不多啊，辛苦的要死，赚的钱还是那么一丁点儿。”</p>
<p>“然后呢？”</p>
<p>“后来有人牵线，我们就去卡拉ok做陪侍啊。”</p>
<p>“坐台？”</p>
<p>“哪儿啊，也常有客人要求出台的，一般都是老板的熟人，不去不行。”</p>
<p>“毕竟出的少啊。”</p>
<p>“可是喝酒厉害啊！我又不会唱歌，又不会玩色子，在那里不是被揩油就是被灌酒。”</p>
<p>“所以后来就做这个了？”</p>
<p>“是啊，一开始都很抵触啊，谁没个脸皮良心。可是入了行才发现，其实这地方比外面干净多了。”</p>
<p>“你还挺幽默。”</p>
<p>“是真的啊！这里有硬性规定，每个客人必须戴T，而且不能有任何体液接触，老板明令男服务生一律不许跟我们越界，管的超严的！而且每三个月还组织集体查体，提成也不错！”</p>
<p>“那……你跟多少人做过？”</p>
<p>“啊？这个……”她掐着指头算，“大概一天三四个的，一年也就千把个吧。”</p>
<p>“做了多久了？”</p>
<p>“快一年了呀。”</p>
<p>“快一千了？”</p>
<p>“哎呀我又不是收藏家，哪记得那么清楚呀，大差不差吧。”她装作没好气的样子，“问这个干嘛？”</p>
<p>我若有所思，“那么多次，可是觉得还是蛮紧的……”</p>
<p>她楞一下，扑哧又笑了。</p>
<p>又到了国考时节，小张报了名，天天往大学里跑，找图书室上自习。</p>
<p>我到了单位，沏上茶， 给她发短信，“近期有空的话就找我啊。”</p>
<p>临近下班时，她回，“好啊，如果考上了，你要请假带我去凤凰玩。”</p>
<p>“凤凰？”</p>
<p>“是啊，很有名的，景色很美。”</p>
<p>“去过再去不就没意思了嘛。”</p>
<p>“要你管。”</p>
<p>“那就去咯，你好好考。”</p>
<p>“必须的。”</p>
<p>然后就断了茬，没了消息。</p>
<p>回家后我跟我妈商量结婚买车的事儿，我妈说，“买个二十几万的不就挺好嘛，你看那小谁，挺大气的啊。”</p>
<p>“小张想要个小点儿的。”</p>
<p>“那更好呀！”</p>
<p>“可是小了不见得就便宜，跟水果不是一个道理。”</p>
<p>“那得多少啊？”</p>
<p>我懒得解释，开网页给她看迷你宝马。</p>
<p>“这么贵啊？这么一点点！”</p>
<p>“是啊！海鲜就是比猪蹄儿贵啊。”</p>
<p>“哎呦呦，再想想，再想想。”我妈吓了一跳，嘟囔着去厨房做饭了。</p>
<p>我开LOL，进弗雷尔卓德，打了起来。</p>
<p>那时问小丽，“你一个月能赚多少钱啊？”</p>
<p>“不固定啊，有时候偷懒，不去上班，就少一点啊。”</p>
<p>“少一点是多少？”</p>
<p>“一万块总是有的。”</p>
<p>“窝巢！姐，我不管，你快带我入行！”</p>
<p>“哈哈哈，小祥好好学习，姐养你。”</p>
<p>“我毕业了都。”</p>
<p>“考大学啊！”</p>
<p>“我不能考的。”</p>
<p>“为什么啊？”</p>
<p>“身份啊。”</p>
<p>“嗯？”</p>
<p>“就是说，我不是正规高中生，不能考的。”</p>
<p>“怎么这么多条条框框，烦人！”</p>
<p>“就是说呢。”</p>
<p>“那就找份工作，踏踏实实做呀！男人跟女人不同，只要努力，就能出人头地的！”</p>
<p>“姐，你真是个大明白人！”</p>
<p>“一直都是！诶，手别乱动，昨天做过了，今天要休息一下！”</p>
<p>“我生猛的很，姐你尽管拿我开发新型技术产业，弟弟我万死不辞。”</p>
<p>“滚开啦你。”小丽笑着推开我，我又欺上去，她半推半就顺从了。</p>
<p>做完后，我从床头把烟抓过来，小丽挡了一下，“做完就吸烟不好的。”</p>
<p>我“啪”把火点上了，小丽白我一眼，光着身子跑去客厅，把烟灰缸拿来了。</p>
<p>“晚饭我回家去吃啊。”</p>
<p>“好啊，我收拾一下就去上班。”</p>
<p>“今天这么勤快啊？洗心革面，重新做人了啊？”</p>
<p>“哪儿啊，要挤公交车，很麻烦的。”</p>
<p>“你这一年下来十好几万呢，买辆车啊。”</p>
<p>“是这么想过，可是舍不得啊。”</p>
<p>“想过什么？给我说说，我懂点车的。”</p>
<p>“小祥无所不知啊！”她真心夸我。</p>
<p>“我在职校学的就是汽车维修我会到处说？”</p>
<p>小丽爱怜的摸一把我的脸，“那你可别笑话我。”</p>
<p>“我笑你干嘛。”</p>
<p>“我啊——最想买的车，是那个吉利自由舰，四万八，黑色的。”</p>
<p>“挺好啊，怎么想到要买这个？”</p>
<p>“没出来前，在老家街上，偶尔会看见这个车，印象很深。”</p>
<p>“你那儿是有多穷啊！”</p>
<p>“跟你说过了呀，很穷很穷。”</p>
<p>“这车还行吧，买个雪佛兰的小□□不更适合你么。”</p>
<p>“不呀，我那时候发过誓，等我以后有钱了，就买个一模一样的开回去，给家里长长脸。”</p>
<p>“那就去买啊。”</p>
<p>小丽不说话，陷入了沉思，认真想了半天，“再等等吧。”</p>
<p>这天我下班早，突发奇想，去接小张下课。</p>
<p>我没上过大学，不懂得什么是象牙塔；可是进来后，明显与外界的气息不同。</p>
<p>也可能差不了多少人情世故，但终归要干净一些。</p>
<p>我穿的比较休闲，像几年前与小丽在一起时学生的样子。挨个问路，找到了图书馆。</p>
<p>不时有三三两两的情侣与我擦肩而过，我本想找个台阶坐下，又怕被小张看见不雅，就站着抽烟。</p>
<p>11块的南京买不到了，我升了点档次，在15块左右徘徊，可是没有一款可以让我再一直吸几年。</p>
<p>就觉得大学生和我们职校生也差不多，都没有中学时急急忙忙赶路的情景。人们三三两两，不紧不慢的走着，与世无争的样子，丝毫不曾觉得这个社会已经张开了血盆大口，虎视眈眈的在这圈围墙外盯着他们。</p>
<p>趁着年轻抓紧享乐吧。别跟我一样投身建设社会主义的浪潮中去了再追悔莫及。</p>
<p>约莫半个小时后，小张和一个高个子男生并排从楼里出了来。</p>
<p>他们说说笑笑，经过我的身边，并未发现目瞪口呆的我。</p>
<p>所以说人一定要长得突兀，哪怕丑一点，也得要你的女朋友和别的男人一起走路时可以一眼发现你的存在。</p>
<p>“小张。”我轻声唤她，她并未听见，依旧在那个有说有笑的世界里。</p>
<p>上个自习而已，有那么开心吗？</p>
<p>“小张！”我提高声音，觉得有些难堪。</p>
<p>她一惊，回头看我，“呀，你怎么来啦？”</p>
<p>那男的对我点头微笑。</p>
<p>“今天下班早，特意来接你。”</p>
<p>“这么好啊？”小张落落大方的介绍，“这是我学长，也准备考试呢；这是我朋友，小祥。”</p>
<p>学长对我点点头，一副女方家长的样子，高深莫测的表情，看不出对我是满意还是嘲讽，脸上是播音员般的笑容，“来接小张啊，好，好，那我先走了啊！”说这话的时候一直对着小张，说完后又对我点了一下头，便扬长而去了。</p>
<p>我和小张站在原地，僵持了几秒。</p>
<p>学长的背影混进来往的学生中，继而不见。我觉得他像成功偷吃了炊饼的西门庆，留下我和金莲在这里面面相觑。</p>
<p>“今天犯哪门子邪劲儿啊，想起来接我了呀。”小张盈盈笑道，丝毫不为炊饼之事耿耿于怀。</p>
<p>“想你了嘛。”</p>
<p>“那陪我走走吧，学了一上午，脖子都酸了。”</p>
<p>“那个学长也考公务员啊？”</p>
<p>“是啊，志在必得呢。”</p>
<p>“他家里是干什么的啊？”</p>
<p>“你管人家呢！”小张不悦，像护犊子的母鸡。</p>
<p>“先去吃饭吧。”</p>
<p>“好啊。”</p>
<p>“去哪儿？”</p>
<p>“你说啊。”</p>
<p>“我想吃成都小吃。”</p>
<p>“那多脏啊！再说拆了多少年了都。”</p>
<p>“你也吃过啊？”</p>
<p>“怎么没吃过？”</p>
<p>“上学那会儿？”</p>
<p>“是啊。”</p>
<p>我就不再问了。</p>
<p>在我的印象里，成都小吃是我们那一代情窦初开的穷逼，能带女朋友吃得起的最好的地方了。</p>
<p>出校门不远便是站台，这时人不多，我本想和小张坐公交车的，她张手拦下一辆出租。</p>
<p>“去湖边那个旋转餐厅。”小张好像女皇，居高临下的指挥师傅，优越感十足。</p>
<p>她从包里拽出两条耳机，塞给我一支，是个清凉的女声，唱着幼稚园的儿歌。</p>
<p>“范晓萱？”</p>
<p>“什么啊，陈绮贞，真是的！”小张很不高兴，好像我间接侮辱了她的人格一样。</p>
<p>过市中心时塞车，儿歌让我昏昏欲睡。</p>
<p>惊蛰后的春光总让人有游园惊梦的错觉，半睡半醒间，不时想起小丽。</p>
<p>小丽一直素面朝天，跟街邻关系都很好，没人知道她是做那个的。</p>
<p>“小弟你来时在路口小卖部拿个西瓜来啊，钱我给过了，让他冰上了。”</p>
<p>那光着膀子的老头，胸前两陀咪咪松软的耷拉着，象征着往日的雄风日薄西山。</p>
<p>他很和蔼，笑眯眯的，不住夸我，也夸小丽，好像把我们当成了恋人。</p>
<p>我也高兴，又买了两罐冰镇可乐，一包红梅。</p>
<p>小丽见我掂着可乐，埋怨道，“不要总是喝饮料啊，没营养。去洗洗手吃西瓜吧！”</p>
<p>我就听话的把可乐放在一边。小丽见袋子里还有包烟，拿出来放一边，怕给潮了。</p>
<p>见是软包红梅，便没说话，径自出了门去。</p>
<p>“干嘛去啊你？”</p>
<p>“忘了点儿东西，你先吃，我就回来。”</p>
<p>我吃了两条边角，中间大的给她留下。小丽回来后又埋怨，“那么大我怎么吃呀，你帮姐吃了，姐喜欢吃小块的。”</p>
<p>然后不动声色的扔了一包南京在桌子上。11块那种。</p>
<p>“怎么又买烟去了？”</p>
<p>小丽吃西瓜很小声，吐籽的时候也用手挡着，一粒一粒抿出来。</p>
<p>“抽烟本来就不好，还抽那么破的——以后抽点好的，少抽点。”</p>
<p>我这一抽，就是四年。</p>
<p>吃过饭，小张要去逛街。我本来不想去，可是无意间想起那学长，便还是陪着去了。</p>
<p>小张在我旁边走，时不时走到我前面去，在商场里小张惯用一种趾高气昂的神色，就像康熙来了里面的小S。</p>
<p>摸摸这里，拽拽那里，眉宇间尽是嫌弃的态度。</p>
<p>服务员唯唯诺诺的伺候着，也不知小张的来历。若不是我这土逼在旁边衬着，估计服务员会更惶恐。</p>
<p>一路挑三拣四，小张在马克华菲前停下。服务员快步赶过来问有什么需要。</p>
<p>“你去试试那款西装。”小张犹自未从上帝的角色中转换过来，对我也颐指气使。</p>
<p>我向墙上瞄去，是那种韩款的修身西装，亮面的，在日光灯下灼灼生辉。</p>
<p>我手心都是汗，完全没有星矢遇见射手座圣衣的亢奋。</p>
<p>那种超出我生活范围外的事物，一概会引起我的不安。</p>
<p>我穿惯了了新郎希努尔，觉得挺舒服的，也从没想过换什么牌子的衣服穿。</p>
<p>而且我那吐了吧唧的皮鞋和薄毛衫，无论怎样看也不搭这高贵的西装。</p>
<p>还有我那瓮声瓮气般的衬衫。</p>
<p>最主要是我这张城乡结合部的脸。</p>
<p>“我不要啊，又不好看。”</p>
<p>服务员见我诋毁他们的衣服，便跳出来站在小张一边，巴拉巴拉介绍这衣服多么多么好。</p>
<p>我最怕这个了。就像很害怕去现在的理发店一样，进去坐下就要承受剪发师的百般嫌弃和万般推荐，弄得我毛骨悚然坐立不安。最后只花15块剪个头的话，全理发店的人都用仇恨的眼光目送我离开。好像齐声在喊，快滚回乡下吧，你这土狗！</p>
<p>小张下巴一点，“就让你试试，又不买。”</p>
<p>服务员殷勤道，“先生试衣间在那边。”</p>
<p>我突然被激将，横了心，“我不要！”</p>
<p>小张好奇，不明白为什么我这么苦大仇深，“为什么？”</p>
<p>“因为不喜欢。”</p>
<p>小张眼里黯淡一下，随即抛出一丝不屑。</p>
<p>“哦。”</p>
<p>小丽家外面有颗梧桐树，有风过时，便传来沙沙的声音，继而带着那夏天的味道，铺满房间。</p>
<p>一开始见面的主题就是把我的小树苗弄枯萎，时间久了，小树苗的游戏只成了点缀，去见小丽成了理所当然的正事，在我百般无聊时，在我自己在家时，在没有朋友约我玩时，去小丽家成了我唯一的乐趣。</p>
<p>在一起的时候其实很索然无味，无非就是一起吃个饭，或者吃些水果，有一搭没一搭的说话，她的电脑也不能上网，在一起做的最多的事，就是互相呆着，却从未腻过。</p>
<p>我觉得小丽就像是一个可以**的家人，无微不至的出现在我的生活里。</p>
<p>当然点缀还是必备的，只不过没一开始那么频繁而已。</p>
<p>小丽通常都用嘴巴帮我，开始我以为她是嫌麻烦，后来才知道这样其实更累。</p>
<p>只有我强烈要求时，她才顺着脱下自己的衣裤。不过始终不许我亲她每一寸皮肤，摸倒是横行无阻。</p>
<p>“你对这事很反感吗？”</p>
<p>“啊？”</p>
<p>“就是插进去啊。”</p>
<p>“还行吧，没什么喜欢不喜欢的啊。”</p>
<p>“那干嘛总不让我进来……”</p>
<p>小丽躺在那里，胸前冷藏的脂肪早已融化，被推的一动一动的。见我问这个，便用手摸我的脸，“小傻瓜，我怕有个万一什么的。”</p>
<p>“怀孕啊？”</p>
<p>她轻轻拍一下我的肚皮，“笨，怕姐不干净啊。”</p>
<p>“你怀过孕没？”做完后，我俩并排躺床上聊天，窗外的云压到了梧桐枝头，风也骤了。</p>
<p>“快下雨了呢，你快走吧！”小丽趴在窗边担心道，沉沉暮色勾勒出她美好的背影，浑圆的弧线深深刻进那个夏天。</p>
<p>“没事儿，一会儿打车好了，送完你我再回家。”</p>
<p>“呵呵呵呵，小保镖啊。”</p>
<p>“问你呢，怀过孕没啊。”我以为她在转移话题，又问一遍。</p>
<p>“怎么可能——”她强调着，“受罪不说，耽搁上班呀，笨蛋，老板要求很严的，我们这儿很少出事儿。”</p>
<p>“那我这样……”</p>
<p>她白我一眼，娇嗔道，“难不成还要在你这黄毛小子这儿阴沟翻船不是？我有吃药啦——”说着她用手指点我额头。</p>
<p>“我不是那意思，我——”</p>
<p>她用手指轻抵住我的嘴唇，“姐知道，姐也不想给你造负担不是？”说着她把头发勾一下，俯下身来又含了含小树苗，用舌头在冠状那里滑了几下，拿过抽纸给擦拭一下，然后把口水吐进纸巾里。“回家记得再洗个澡呀，要讲卫生！”</p>
<p>她就像个年长的哺乳动物，给幼崽舔抵毛发一般。 近来小张学习紧张，我们见面的机会便少了许多。</p>
<p>我蹲家里狂玩lol，曙光女神用的越来越顺手。</p>
<p>加的全攻击的点，带一身攻速符文，前期下路杀人，然后果断变肉盾。</p>
<p>正开心时，我妈敲敲我开着的门，“最近都没见你出去啊？吵架啦？”</p>
<p>“哪儿啊，她复习考试呢。”</p>
<p>“哦，那也多联系联系啊，关心一下。”</p>
<p>“知道了。”</p>
<p>“你没事了也学点东西，总不能一直这样吧！”</p>
<p>“嗯嗯嗯。”</p>
<p>“那个车的事儿，你再劝劝小张，实在不行，做做难，也就买了。”</p>
<p>“好。”</p>
<p>“这孩子。”</p>
<p>中午时，我给小张发短信。</p>
<p>“博士，学完没？请你去湖上吃饭。”</p>
<p>等了半天，也不见回音，让我不禁怀疑我的手机是不是在接小张短信的时候会自动故障。</p>
<p>好大会儿，小张回，“不啦，没几天了，我再加把劲。”</p>
<p>“那好吧，考上了带你去凤凰。”</p>
<p>那边就没了声音。</p>
<p>我妈问，“给你爸打个电话，看中午回来吃饭么。”</p>
<p>我照做了，结果我爸外面有场，不回来了。</p>
<p>“那就简单吃点吧。”我妈说，便要去厨房。</p>
<p>我觉得平时总是和小张去湖上吃饭，也没和家人一起去过，今天都没事，不如改善改善。</p>
<p>“算了，别做了，我请你出去吃吧。”</p>
<p>“出去吃干吗，乱花钱。你啊，就是不知道过日子，你看你爸，一把年纪了还在外面卖命，你也不知道省省。”</p>
<p>“省了，这顿饭本来是要请小张的，她学习没空，借花献佛，请你好了。”</p>
<p>“那就攒着啊，下次还不是要吃。”</p>
<p>“你不去我就充到游戏里去了。”</p>
<p>“你这孩子！”</p>
<p>“还不快换衣服？”</p>
<p>我妈算计不过我，便跟我打个车奔湖边吃饭。</p>
<p>她找出最喜欢的衣服，穿的很是隆重，像是出席访美的领导人一般正式。</p>
<p>“都这个点儿了，该不会没东西吃了吧？”快到门口了，我妈开始打退堂鼓。</p>
<p>“24小时营业的。”</p>
<p>“怎么可能，这不是西餐馆么。”</p>
<p>“那就12小时营业，反正只要有太阳，就有吃的。”</p>
<p>我挽着她走到门口，与出来的小张撞个满怀。</p>
<p>小张旁边儿，自然是那英俊伟岸的学长。</p>
<p>“呀，阿姨，小祥，你们怎么这个时间才来呀，都快打烊了。”小张开始怔了一下，但反映极快，亲切的过来拉我妈的手。</p>
<p>学长也如同家人般过来，对我们娘俩点头致意。</p>
<p>“小张也来了呀。”我妈尴尬的笑。</p>
<p>“可不是，”小张泰然自若，有说有笑，让我暗暗佩服。“上午出来的晚了，就顺道儿跟学长吃了个饭，请教了些面试经验，他可是老考生了！”</p>
<p>学长很会接话，“别笑话我了。”</p>
<p>气氛就被圆下来了。</p>
<p>这种时刻可不能认怂，我也挤出笑容，“正巧又碰见了，一起坐坐吧。”</p>
<p>小张与我面对面站着，客气道，“就不打扰你和阿姨享受天伦之乐啦，我和学长还要赶回去啃书，等考上了再陪阿姨吃饭啊！”</p>
<p>学长点头，和小张一起与我们依依惜别，便一起打个车走了。</p>
<p>点菜时我要了常和小张一起吃的那两款。</p>
<p>“刚才……那个……”我妈虽然不好说什么，但也忧心忡忡。</p>
<p>“别乱想啊，那男的我认识，学习不错，小张的学长。”</p>
<p>“那也不能约人家的女朋友出去吃饭啊！”</p>
<p>“嗨，你那什么老思想。”</p>
<p>“小张这孩子也真是的，大中午的也不回自己家吃饭。”</p>
<p>“你啊，句句都是万恶的旧社会，快吃饭吧，要正确面对同志们之间的关系。”</p>
<p>“你干嘛去？”</p>
<p>“洗手间。”</p>
<p>我插上门，坐在马桶盖子上抽烟。</p>
<p>吸一口，呛一口。胸口一揪一揪的，像被人打了一样。</p>
<p>连续几天不见小丽，越发想得慌，吃过午饭，便骑车去找她。</p>
<p>奇怪的是，小丽却不在家。</p>
<p>我以为她去逛街了，便给她发短信，结果一直没回。打电话，也是不接。</p>
<p>我就坐在门口等她。知了的叫声透过层层枝叶洒了下来，激起地上滚滚热浪，兜头而来。正午太阳正毒，白花花浇着地面。知了叫得越发的响。</p>
<p>认识小丽也有段时间了，这样的事情却是第一次出现。</p>
<p>除了她上班时，一般我的短信她都是立马就回，甚至是在她睡觉时，更别提不接我电话。</p>
<p>我在当院里胡思乱想，不多久便觉得被晒的发晕。</p>
<p>身上的燥热慢慢转移到心口，可我上了犟劲儿，越是等不来，就越偏要等。</p>
<p>恨不得要打她一巴掌才解恨。然后还要撞见她跟个相好的在一块儿，让我捉奸成双，愤怒的质问她是怎么一回事。</p>
<p>热的很了，我脱了外衣，顶在头上。皮肤开始火辣的疼。</p>
<p>我刻意折磨自己，觉得这样心里才好过些。</p>
<p>不知不觉就有委屈油然升起，不多久便占据了整个胸腔。</p>
<p>我又窝囊的想哭。</p>
<p>就像那次去找小丽，花了两百却等不来时一样。</p>
<p>不争气的是，想着想着我就掉了泪下来。一块一块砸在脚下的青砖上。</p>
<p>天色渐渐青了下来。</p>
<p>快六点时，小丽惊呼的声音把我拉回现实。</p>
<p>小丽吓坏了，见我两眼红肿的样子。</p>
<p>我也觉得自己逊毙了，跟个**一样。见她终于来了，我拔腿就往外走。</p>
<p>小丽一把把我抱住，声音都变了调，“小祥你怎么了？别吓姐啊，怎么了？”</p>
<p>我鼻子又酸的厉害。</p>
<p>我挣开她，掉头就走。小丽把手里的东西一扔，踉踉跄跄就追了出来。</p>
<p>“小祥，小祥！你别跑啊！等等我！”</p>
<p>小丽尖锐的声音引起那些纳凉的人，好奇的看我们。</p>
<p>我被她追上，才发现她穿的高跟鞋。</p>
<p>她紧紧抓住我的手，不住的喘，“小祥你先别走，生姐的气了？我下午出去逛了会街，刚才才发现没带手机，怕你找我，就急忙赶回来，本来约好了一起吃饭的……”</p>
<p>“那你去吃啊！”</p>
<p>“小祥乖，先跟姐回家成吗？”</p>
<p>“不，见到你就行了。”说着我又往外走，小丽死命的抱着我。</p>
<p>远处的人开始交头接耳。</p>
<p>“姐错了，小祥别生气好吗？你看你背上都晒破皮了，快跟姐回家，姐给你擦擦。”</p>
<p>我又挣一下，居然没挣出去。见那边慢慢有些人聚起来了，不想他们议论小丽，便冷冷说道，“你松开我，我跟你走。”</p>
<p>这时才发现，小丽也哭了。</p>
<p>小丽搬个小凳子，让我坐在院子里，打了盆温水，用热毛巾小心擦我的背。</p>
<p>就觉得背上一会儿湿一点，一会儿又擦干了。潮气被余温蒸发了去，带来丝丝凉意。</p>
<p>小丽哭个不止，我的心也软了下来。</p>
<p>“你别哭了。跟你多委屈似的。”</p>
<p>“嗯。”</p>
<p>“我……没事，就是有些憋屈。”</p>
<p>“我知道，我知道。”</p>
<p>又是一阵沉默。小丽给我擦好了背，把水泼在梧桐脚下。</p>
<p>我看她的脸，肿的比我还厉害。</p>
<p>小丽拉着我进了屋里，洗了水果给我吃，蹲在我面前，趴在我膝盖上道歉，“你这几天都没过来，我一时粗心，就忘了带手机，我就觉得今天有事，特意跑回来，结果还是让你受委屈了，对不起小祥，姐以后再也不会了。”</p>
<p>我又想哭。</p>
<p>我说，“不是，我下午在院子里晒的头昏脑热，就乱想，想你去相亲了，想你和男朋友出去玩了，想你是不是在别人床上……胡乱想了好多，很难过。”</p>
<p>小丽破涕为笑，“我去哪儿相亲啊我。”</p>
<p>“我怎么知道，万一是……”我本想说万一是客人呢，可是话到嘴边又咽下了。</p>
<p>小丽捧着我的脸，认真道，“在这个城市里，我只有小祥你一个人最好！我不会在这里交男朋友，我也不会把客人带到家里来，我在不上班时也从来不招揽人！”</p>
<p>我还是哭了出来。</p>
<p>迄今我和小张最亲密的动作就是牵手，我觉得应当巩固一下我们的关系。</p>
<p>上次吃饭之后，小张态度明显有些转变，回信息的速度也快了许多。</p>
<p>这让我觉得会不会真的是我搞错了，想多了？</p>
<p>小心眼的男人最可恶，我不想那样。</p>
<p>城府深的女人更可怕，我更不想那样。</p>
<p>我带小张回家，第一次带女生回家。</p>
<p>她进门后端庄贤淑的坐在一边，不卑不亢，像见多识广的大人物。</p>
<p>“我们结婚后住哪个屋呀？”小张探我的话。</p>
<p>“搬出去住啊。”</p>
<p>“租房子怪不安全的，还是住家里吧。”</p>
<p>“哪儿啊，买房子啊。”</p>
<p>小张脸色荣辱不惊，淡淡的哦了一声。但是我想她没理由不高兴。</p>
<p>“看地段了吗？”她果然长驱直入。</p>
<p>“就在那个湖上餐厅附近吧。”</p>
<p>“那可不便宜！”小张惊讶道。</p>
<p>“紧紧还是有的，”我坐小张身边，揽住她的腰，“不说那个了。”</p>
<p>我凑过去，吻住了她的嘴。</p>
<p>我以为她会躲开的。</p>
<p>我接吻的技术很笨拙，只听见彼此愚笨的呼吸声。</p>
<p>小张的舌头柔软无比，狡猾的闪躲着我的追击，总让我找也不着。</p>
<p>气氛良好，我便牵着她的手来我的房间。</p>
<p>其他的我就轻车熟路了。闭着眼睛也能知道女生的这里在哪，那里在哪。</p>
<p>大概小张没有料到我会这么直接，在我的手顺势盘到她的胸口时，她终是下意识护住了。</p>
<p>不过事已至此，箭在弦上，就由不得她说了算了。</p>
<p>我们像玩偷天换日的游戏，又像是带兵攻城的战役。</p>
<p>她守上面，我走下面；她护外围，我烧她粮草。</p>
<p>此刻我像一个专心偷塔的剑圣，一边呼喝队友团战拖住敌人，一边□□似的开着大砍塔。</p>
<p>不一会儿，小张被我剥个一丝不挂，孤零零扔到床上。</p>
<p>小张这才意识到大事不妙。毕竟我看起来是那么愚钝。</p>
<p>与女孩子身体打交道，几年前小丽就带我从卡拉赞毕业了。</p>
<p>除了面孔有异，女人的身体也就那么回事儿。</p>
<p>但就是这张脸，可以激起男人诡异的好奇心和征服欲。</p>
<p>在性与爱上，男人永远是远航的哥伦布，对每一寸新大陆都锲而不舍。</p>
<p>我也脱了自己，怕她尴尬，俯下去继续接吻。</p>
<p>气温乍凉，很像那年小丽房间里充足的空调。</p>
<p>我们像两团冷藏的肉，面无表情的拥抱在一起。</p>
<p>我很想知道女人是什么味道的，便一路湿吻下去。</p>
<p>然而小张却捧住了我的头，不许我下去。</p>
<p>我用力，她也用力。</p>
<p>她在嫌弃什么？</p>
<p>我便端直了身子，扶着微软的树苗，在她那里蹭一蹭，湿滑无比。</p>
<p>而后便做着习以为常的爱。</p>
<p>忽然觉得，几年没有做，我好像变小了。</p>
<p>装作无意的，偷看小张那里。</p>
<p>一开一合间，像一扇过期的海鲜，矫揉着腐朽的蚌壳。</p>
<p>又如久经沙场的铁器，黑的发亮。</p>
<p>最后例行公事般，毫无兴趣的做到了底。</p>
<p>她那纸擦拭自己，眉宇间有不喜的神色，“不要弄在肚子上啊，又得洗澡。”</p>
<p>说着自顾自跳下床，去洗手间摆弄。</p>
<p>“怎么没热水啊？”</p>
<p>“哦，我家是太阳能，这天气应该没热水。”我倚着床吸烟。</p>
<p>她还是开了淋雨，哗哗的水声隔着门，钝重的传来。</p>
<p>一会儿便跑了回来，拉开被子，钻了进去。</p>
<p>“把你烟灭了，不知道二手烟危害多大嘛！”</p>
<p>这个时候我应当让着她点，毕竟该要的都得到了。</p>
<p>然后内心深处忽然有一种空虚致死的失落感。</p>
<p>这就是我下半生要一直和她做，直到老死的人吗？</p>
<p>我看她陌生的脸，难以言喻的伤心。</p>
<p>活着又无法选择，真是生不如死。</p>
<p>我问小丽，“客人是不是都很变态啊？”</p>
<p>“啊？”</p>
<p>“就是——试图让你做一些匪夷所思的动作啊，招式啊什么的。”</p>
<p>“哈哈，哪有。”</p>
<p>“那是什么人啊？”</p>
<p>“年轻人，中年人，很少有老年人。”</p>
<p>“你怎么不说都是中国人？”</p>
<p>“一年也会遇到个把老外的啊。”</p>
<p>“很大吧？”</p>
<p>“啊？还好啦。”</p>
<p>“啊？不会有那——么大么？”我夸张的比划，逗得小丽合不拢嘴。</p>
<p>“怎么可能啊，就是中等偏上吧。而且老外汗臭很厉害，又喜欢抹很浓的运动香水，不喜欢。”</p>
<p>“不都是洗了澡的么。”</p>
<p>“那种味道根深蒂固，好像都长到皮肤里去了。”</p>
<p>“不过会很帅吧？金发碧眼的。”</p>
<p>“金发碧眼倒是真的，不过都是些大胖子，骨架很大，要是瘦一点兴许不错。”</p>
<p>“那你呢？是什么颜色？”</p>
<p>“什么什么颜色？”</p>
<p>我笑着指指她那里。</p>
<p>“黑色的啊。你又不是没看过。”</p>
<p>“没仔细看过。”</p>
<p>小丽眼睛一转，柔声问，“你想看啊？”</p>
<p>我郑重的点头。</p>
<p>“叫姐啊。”</p>
<p>“姐姐姐姐姐……”</p>
<p>小丽随手脱下底裤，就像她择菜一样娴熟。</p>
<p>她打开腿，我蹲下来，她突然有些害羞，用手挡住了。</p>
<p>“还是不要玩了吧？”</p>
<p>“又没有在玩。”</p>
<p>“这样多不好意思呀。”</p>
<p>“严肃点儿，我们这儿打劫呢。”</p>
<p>“啊？”</p>
<p>我趁势拉开她的手，她就顺从的撑在身后。阳光在她背后模糊了她的脸，小风扇嗡嗡的叫着，与窗外的蝉和声一片。气温与空气都凝固了般，静静落在小丽那个地方。</p>
<p>她就像一幅油画，神圣凛然的摆在那里。</p>
<p>“好了吧？胳膊都酸了。”小丽这么说，可是没等我同意，还是不敢动。</p>
<p>“好啦。”我帮她拿底裤。</p>
<p>“黑乎乎的，有什么好看的啊。”</p>
<p>“不黑啊。”</p>
<p>“去你的。”</p>
<p>“真的，”我拿出专家学者的样子，仔细跟她分析道，“是褐色的，像一块天然的琥珀，被分割出很好看的形状。”</p>
<p>“小祥嘴真甜。”</p>
<p>“真的啦，我见过黑的，跟放了酱油的辣炒花蛤似的。”</p>
<p>“真恶心你。”小丽笑道，“你哪儿见的啊？”</p>
<p>“电视上啊。”</p>
<p>“电视？”</p>
<p>“就是网上，真是的，我对影片类的东西统称电视。”</p>
<p>“这样呀。”小丽顿了顿，“那你喜欢不？”</p>
<p>我和她对视几秒，笑的很开心，“喜欢！”</p>
<p>小丽就爱怜的把我抱在怀里。</p>
<p>小张躺床上玩手机，被子盖到肚子处，豪迈的露着胸，一点也不避讳我。</p>
<p>女人好像一旦捅破最后一层防线，什么都变得无所顾忌起来。</p>
<p>先前她去上厕所，门也不关。搪瓷被水呲的声音嘹亮的回荡在我家不大的房间里。</p>
<p>我问她，“你谈过几个啊？”</p>
<p>小张眼都不抬，继续拨弄她的手机，反问，“你呢？”</p>
<p>“这么大点儿的地儿，我也不瞒你，五六个吧。你呢？”</p>
<p>“两个。”</p>
<p>“多久啊？”</p>
<p>“你呢？”</p>
<p>“我啊，不固定，最长的半年，短的个把月。”</p>
<p>“嘁。”小张吐一个拟声词，“不专一，我一个两年，一个三年。”</p>
<p>“那么久啊？”</p>
<p>“高中一个，大学一个。”</p>
<p>不知怎么的，失口问了句，“那你怀过孕没有啊？”</p>
<p>“神经啊你！”小张不悦，“怎么可能啊！家里管得很严的！那都是纯洁的感情。”</p>
<p>“哦。那后来怎么没在一起啊？”</p>
<p>“毕业后就各奔前程了呗。”</p>
<p>“呵呵。”</p>
<p>就想起一个笑话：女孩儿依偎在男孩儿怀里，指着墙角的暖水壶对男孩含情脉脉的说，“这几年你在我体**的，也够装满这一暖壶的了吧？”</p>
<p>我上职校那会儿，交女朋友最大的愿望，就是挖空心思找各种借口约会，占尽便宜吃尽豆腐，把暴走的青春与性欲发泄个干净才罢休。不几日，又上头来，再斗智斗勇，千方百计约女朋友出来。小树林，小旅馆。各种苟且之地，留下各种苟且之事。</p>
<p>后来问别人时，也大多如此。</p>
<p>看来还是大学生素质高。</p>
<p>小丽给我配了把钥匙，我把它跟我家里的串在一起。</p>
<p>我说，“你不怕我偷偷翻你的百宝箱吗？”</p>
<p>小丽呵呵呵呵，笑得很是开心，“我可不是杜十娘呀。”</p>
<p>“你知道她啊？”</p>
<p>“我看起来就这么没文化么？”</p>
<p>“nononono，远远看去像色艺双绝一代优伶。”</p>
<p>“去你的，十娘可是业界精英，我辈榜样呢。”</p>
<p>“千万提防张生啊！”</p>
<p>小丽依旧笑着，在我面前总是笑着，用心道，“若是张生就如小祥这般好，负心也值得。”</p>
<p>虽然我不知道我哪里好，但我感动的一塌糊涂。</p>
<p>这天我来的早，小丽并不在家。发短信问了，是在逛街，要我乖乖在家里等。</p>
<p>我想做点家务表现表现，可是房间干净的无从下手。</p>
<p>厨房里有苹果，便洗了吃了。</p>
<p>电脑旁边放着一盒没拆包的南京，小丽不抽烟，专门给我留的。</p>
<p>我拿个小凳子，坐到梧桐下面，一边吃苹果，一边等小丽回来。</p>
<p>就像小时候，等家长下班那种感觉。充满期望和温馨的。时间走得慢也不会生气，周围的一切都觉得美好。</p>
<p>不多会儿，小丽挎着蔬菜水果，便回来了，我慌忙去接。</p>
<p>“诶？不是去逛街了么，怎么去菜场了？”</p>
<p>“有逛啊。”小丽嘿呦把吃得都递给我，提起一个小包装袋，“锵锵锵！”</p>
<p>那些水果挺沉的，却看到小丽手里拿的是真维斯的包装袋。</p>
<p>“买了衣服呀？”</p>
<p>“是呀！”</p>
<p>“我把水果放回去，你换上我看看。”</p>
<p>“你把水果放回去，你换上我看看。”小丽说“你”的时候，强调百转千回。</p>
<p>“给我的啊？”</p>
<p>“嗯啊！”</p>
<p>我好像过圣诞节的小孩子一样，忽然开心得不得了。小跑着把水果扔回房间，急匆匆赶回来。</p>
<p>小丽沿着边线仔细拆开包装，拿出抖了抖，是件素白镜面的T恤。</p>
<p>我换上，料子很软，细腻的盖在皮肤上，心情愉悦。</p>
<p>“纯棉的啊。”</p>
<p>“是啊，吸汗，还好洗。”</p>
<p>“你怎么知道我喜欢镜面的衣服？”</p>
<p>“我傻啊，看你平时穿着就知道啊。”</p>
<p>“可是我从来没穿过白色的啊。”</p>
<p>“所以要试试呀。”</p>
<p>“好看么？”被她这么一说，我突然有点害羞，怕驾驭不了这种颜色，会显得突兀。</p>
<p>小丽“嗯”拖着长音，耐人寻味的围着我转了一圈，又捏捏领口，理了理肩膀。</p>
<p>“很——帅！”</p>
<p>我就憨憨的傻笑。</p>
<p>然后才发现小丽并没有给自己买什么。</p>
<p>我以为和小张齐越鸿沟后，感情上和生活上会有质的飞跃。</p>
<p>看来是我想多了。</p>
<p>我们就像什么都没有发生过的同学一样，不冷不热的联系。</p>
<p>当我在等她的回复短信时，会想她在我身下的脸。</p>
<p>虽然很近，却又很远。</p>
<p>像微闭着眼睛浅睡眠的人，在失眠与失落之间徘徊，本能的敷衍外界的骚扰，只想尽快进入梦乡。</p>
<p>而我却像怀春的小女孩，时不时总是想小张。</p>
<p>闲来便给她发短信。她大多不回，或者是在说，“学习呢。”</p>
<p>我就哑口无言。</p>
<p>又想起他学长的脸，从容带有风度的，热情中带着不屑的，像礼貌的面对弱势群体的态度。</p>
<p>然后他与小张重叠在一起，狰狞的游荡在我的脑海里。</p>
<p>落落大方在我身边站着的小张，原来站在他的身边更显亭亭玉立。</p>
<p>小张昏昏欲睡的脸，在他身下反而更显妩媚和妖娆。</p>
<p>他们激烈的碰撞着，完美的黏合在一起。</p>
<p>那黝黑发亮的海鲜，贪婪得张着嘴。</p>
<p>我突然觉得，他们像是树上玩耍的猫。</p>
<p>而我是地上的狗。</p>
<p>小丽喜欢周传雄，电脑里都是他的歌。听得多了，我多少也会唱一点。</p>
<p>每当我跟着曲子唱时，小丽就一脸谄媚的趴在我膝盖前仰望我。我被弄得不好意思，小丽就假装去收拾家务，耳朵竖得尖尖的。</p>
<p>她最喜欢的是《青花》，她喜欢叫他小刚。</p>
<p>“小祥你看，这歌词写的多好啊！”</p>
<p>“哪句？”</p>
<p>“从头到尾呀！”</p>
<p>“笨，要去其糟粕，取其精华。”</p>
<p>“什么意思？”</p>
<p>“说你最喜欢的。”</p>
<p>小丽从来不会思考反抗我的命令，于是皱着眉头，忍痛割爱的哼着曲，一句一句找精华。</p>
<p>“找到了！”她雀跃。</p>
<p>“哪句？”</p>
<p>“就是……嗯……我唱不来，你来唱，唱到了我喊停。”</p>
<p>“……”</p>
<p>“唱嘛。”</p>
<p>我清清嗓子，一句一句慢慢唱：</p>
<p>三月走过柳絮散落恋人们匆匆，</p>
<p>我的爱情，闻风不动。</p>
<p>翻阅昨日仍有温度蒙尘的心事，</p>
<p>恍恍惚惚，已经隔世。</p>
<p>遗憾无法说 惊觉心一缩。</p>
<p>紧紧握着青花信物信守着承诺，</p>
<p>离别总在失意中度过；</p>
<p>记忆油膏反覆涂抹无法愈合的伤口，</p>
<p>你的回头划伤了沉默。</p>
<p>那夜重逢停止漂泊你曾回来过，</p>
<p>相濡相忘，都是疼痛；</p>
<p>只因昨日善良固执委屈着彼此，</p>
<p>打碎信物，取消来世——</p>
<p>“停！”</p>
<p>“打碎信物这句？”</p>
<p>“嗯啊。”</p>
<p>“我还以为你要诳我唱通篇呢。”</p>
<p>“是有这个意思，你可以继续了。”</p>
<p>我没唱，小丽探头，问，“怎么啦？”</p>
<p>“突然觉得这词写得挺伤感的。”</p>
<p>“本来就是呀。”</p>
<p>相濡相忘，都是疼痛。</p>
<p>谁知这样的词后来竟成了现实。</p>
<p>小丽来月事，我便跟家里撒谎，说去亲戚家住几天。</p>
<p>她半卧在床上，像一尊菩萨雕像。穿翠绿薄纱睡衣，很热又不敢开风扇，见我来了，很是开心。</p>
<p>“我不能陪你去郊游呀。”小丽见我拿着大包小包，以为我要远行。“过个一两天吧。”</p>
<p>“过个一两天也来不肃静呀。”我说。</p>
<p>“但是起码可以下床或者走路了嘛。”</p>
<p>“恢复行动力便陪我去郊游啊？”</p>
<p>“尽力而为呀。”</p>
<p>“谢菩萨，还是免了吧。”</p>
<p>“你又发小脾气啊？”</p>
<p>“哪有，我看起来就这么缺心眼儿么？”</p>
<p>我把包裹都打开，掏出些日常用品，罗列在桌上。</p>
<p>“我跟家里请了假，这几天不回去了，住这里伺候你。”</p>
<p>“蛤？”小丽大惊。</p>
<p>“怎么，怕我撞到奸夫不成？”</p>
<p>小丽挣扎着从床上爬下来，过来捧我的脸，“真的假的呀？”</p>
<p>“我小黄书都带来了，预备打手枪用的，你说真的假的。”</p>
<p>小丽像中了彩票的残喘老人，搂躬着身子，小心翼翼的嗨着。就像给孙悟饭开启超能力的上代界王神，喜不自胜的挥着拳头，喊着万岁。时而痛一下，皱了眉头，可嘴角还是挂着笑意。</p>
<p>她教我用煤气，教我淘米。我第一次接触这些东西，新鲜又开心。</p>
<p>闲暇时，我们也不说话。我坐她旁边玩电脑，她就靠在一边闭目养神。偶尔翻个身，我就探头问，要不要喝点热水呀之类的。她就笑着摇头，大概难受的话都说不出。</p>
<p>现在回想起来，我们那时候就像结婚多年却仍然恩爱的夫妻一样。过着平淡且乏味的生活。但正因为有了彼此陪伴，这样的日子才得以继续下去。</p>
<p>所以在小丽走后，长达好几年里，我都无法适应这样的生活。它好像处处与我为难，故意将我冷落，彻底把我抛弃。所以那段时间，我长怀疑，在遇到小丽前那些年里，我是怎样活过来的？</p>
<p>所以美好的事物最好不要拥有。不然失去时，根本无法用追悔莫及来形容。</p>
<p>“小祥这么体贴，将来一定会是个好老公！”</p>
<p>小丽衷心的夸我，而我却高兴不起来。</p>
<p>我知道我们绝对不可能结婚，所以很多关于未来的话，在我们两个之间都是禁忌。不管是谁提了开始，那么接下来都会有一方要伤心。</p>
<p>我接不上话，气氛就僵在那里。</p>
<p>我在心里演练过无数遍，在小丽面前泰然自若的讲，“不工作了好吗？我养你啊！”</p>
<p>然后期待着小丽满脸热泪的，扑进我的怀里，说，好啊！</p>
<p>可我终究没种。</p>
<p>每当我幸福的幻想完，紧接着出现的便是我父母含辛茹苦的脸，又或者是他们心灰意冷的脸。继而是小丽在不同男人身下辗转反复的脸。最后是我茫然又呆滞的脸。</p>
<p>我很想哭。</p>
<p>为什么上天安排了这样一个完美的女人在我生命里，为何又要带着如此致命的缺陷。</p>
<p>小丽大概知道我的心事，也知道自己说错了话，便像只猫一样，用头轻轻的抵我。</p>
<p>我抚摸着她的秀发，一丝一丝的，柔韧又有弹性，充满着健康的光泽。</p>
<p>这样正常的一个女人，身上却刻着极其隐晦的烙印，终身不得明示。</p>
<p>我时而觉得小丽命苦，时而觉得自己命苦。</p>
<p>也许本来一开始，我俩都是抱着玩玩的心态，却不知互相动了真情，不加掩饰的好，酿就了这么一出无法结果的感情。</p>
<p>接下来会怎样呢。这个问题我也想了很多次。苦于不能与他人商量。最后管他呢，过一天是一天。</p>
<p>起码这个过程快乐着。</p>
<p>像死于吸毒过量的病人。</p>
<p>我给小张发短信，“下周要是没事，我们就请个假，去凤凰玩一圈啊？”</p>
<p>不久小张回，“又没考上，我才不要安慰奖。”</p>
<p>“看你傲得，数九隆冬的梅花儿见了你都自愧不如。”</p>
<p>“结婚的时候再说吧。”</p>
<p>“结婚是结婚，下周是下周。我去联络旅行社，你准备一下请假的事吧。”</p>
<p>小张见我动真的，急道，“那不要跟旅行社啊，我们自己去就行。”</p>
<p>就这样，我俩一起坐上了南下的客车。</p>
<p>车子行驶在盘山路上，睁着惺忪的双眼看到那些葱茏的山和绿油油的田，心情又转而高涨起来。</p>
<p>老房与旧屋环抱在山中，街道错综复杂。因是淡季，人不算太多。</p>
<p>小张带我去虹桥，到了却又不说话。周遭是淡淡静静的人流，细细碎碎低声说着关于时光的故事。</p>
<p>小张望着远处入神，我看她的背影，瘦小又寂寞，却不知这副小小的身躯里，埋藏了多少死在心底的经历。</p>
<p>就像我的心里永远住着一个早已不见的人，我不知小张心里如今还剩下多少空间给我。</p>
<p>何事悲风秋画扇？</p>
<p>我突然觉得我们两个其实都很可怜，便在后面抱住了她。</p>
<p>小张在我怀里，懒懒的说着几年前这里还没有那个店，那里还没有这个店，哪里哪里有怎样的物什，哪里哪里有什么样的摊主。</p>
<p>她用一种旁观的语气，变相的说着自己的故事。</p>
<p>我跟着她的思绪，可以联想到几年前扎着马尾穿着牛仔裤的小张，在唇上有稚嫩绒毛的男朋友身边，开心的在相机前摆着可爱的造型。</p>
<p>那个时候她还是没有钱，可是她比现在开心。 我知道此刻小张心情不错，可是她再也无法撅着嘴，在我的镜头前，像过去那样笑了。</p>
<p>她挽着我，淡淡的走在河边。我们各怀心事，互不打扰。</p>
<p>我此刻眼里，也全是小丽的影子。</p>
<p>我仿佛又看见她，穿着翡翠色的裙子，在前面一颠一颠的走，肩膀下的长发跟着一跳一跳。我要是陡然吓她，定会把她弄得一个激灵，继而追着我轻轻的打。</p>
<p>想着想着，就笑出声来。</p>
<p>再看小张，也是陷在笑意中。</p>
<p>挑了靠江的吊脚楼客栈，窗外正好对着万名塔和那一带轻舟荡漾。</p>
<p>夜里小张的呼吸与江面轻轻波涛重叠在一起，刻住了那时的梦。</p>
<p>远处有苗女迎客的山歌，飘飘渺渺落在水云之间。</p>
<p>你看这暮色蔼蔼西风紧。</p>
<p>路过酒吧，我们便去落座。</p>
<p>有人抱着吉他唱罗大佑的恋曲八零，听得心里一阵潮湿。</p>
<p>春风秋雨多少海誓山盟都随风远去。</p>
<p>在路边买了一包白沙，吸了几根，把剩下的大半包都放在了桌上。</p>
<p>走时，小张看到，提醒我，“你的烟。”</p>
<p>我带着小张往外走，“不要了，搁那儿吧就。”</p>
<p>“多浪费啊。”</p>
<p>“哪儿会。”</p>
<p>小张就懒得再与我争辩。很多时候，她对我往往是报以不屑一顾的态度。甚至连吵架她都懒得跟我吵。毕竟我只是个职专生。</p>
<p>那时候小丽问我，“你呀，整天吸呀吸呀，多伤身体啊！”</p>
<p>“总会戒的啊！”</p>
<p>“鬼才信咧！”</p>
<p>“是真的！”我笑着瞥小丽，她素白的脸上没有一点皱纹，“比如，我当爹前。”</p>
<p>小丽陪着笑，笑的很假。</p>
<p>我以为她能感受到我在想什么，然后顺从得靠过来，低眉顺眼道，“我给你生个孩子啊！”</p>
<p>然后我就被鼓起了勇气，冲破了世俗的枷锁，斩钉截铁道，“好啊！”</p>
<p>从此我们幸福的生活在一起。</p>
<p>可她终归没有，只是离远了，对我憨憨的笑。</p>
<p>现在想来，那么懂我的小丽，当时笑得是多么惨绝人寰。</p>
<p>离开凤凰的前一晚，去江边放河灯。</p>
<p>小张提前写了个字条，团成团，顺势放在河灯里，慢慢的飘得远了。</p>
<p>“笔呢？”</p>
<p>“干嘛？”</p>
<p>“我也要写啊。”</p>
<p>小张从包包里翻出笔和纸给我。然后一脸落寞的寻找自己放得灯，河面的烛火映得她的脸红彤彤的。</p>
<p>我写下“身体健康”四个字，塞到灯边，小心的放走了。</p>
<p>“写了什么？”小张问我。</p>
<p>“身体健康。”</p>
<p>“嘁。”</p>
<p>我就嘿嘿的笑。小张继而懒得理我。</p>
<p>若是小丽，一定会咋咋呼呼，“怎么写这个呀，跟个老头似的！”</p>
<p>她一定是那种嫌弃的表情，夸张做作的，几秒钟后又一头扎进我怀里来，嬉皮笑脸的说对不起，若我坚持臭脸，她就会对我动手动脚。</p>
<p>小张蹲在那里，姿势仍然很优美。就好像连这个动作都受过高等教育一样。</p>
<p>久了，她强撑着站起来，跟我说，“不早了，回去睡吧。”</p>
<p>然后挽着我回了客栈，第二天一早便结束了凤凰行。</p>
<p>成绩下来了，小张忽然变得对我恩爱有加。</p>
<p>好像一夜之间成了女主人似的，到了我家，拾掇拾掇这里，收拾收拾那里，勤快得不得了。</p>
<p>我要做，她便给。这种事情向来都是越做越容易的，只是没想到会突飞猛进到这个地步。</p>
<p>虽然过程依然很陌生。</p>
<p>我们光着身子，靠在床上。</p>
<p>“那个学长也落榜了吗？”</p>
<p>“是啊，他那个职位几百个人抢，他家又没什么深厚关系，凭实力，怎么可能。”</p>
<p>我心中窃喜，但又不好表现。一是不能让小张误以为我是小人，二来她也刚落榜，得顾及一下她的感受。</p>
<p>“公务员考试就是很占运气的嘛。”</p>
<p>小张没接话。显然她不赞成，所以不屑与我理论。甚至连敷衍一声的意思都没有。</p>
<p>见场面冷了，我拼命圆，“你也别灰心，整装一下精神，明年再来啊！”</p>
<p>“明年……”小张喃喃道，表情很失落，像错过了人生重大的抉择，又仿佛此刻正在洪流的中心，眼睁睁看着救生船远去，只好闭目等死的神情。</p>
<p>“明年就该结婚了。”小张轻轻道，好像更加难过了。她不看我一眼，把头埋进双臂中。肩膀有些微耸，倔强得不肯发出声音。</p>
<p>窗外是昏暗藏蓝的傍晚，残月尚未当空，夕阳却已垂落。</p>
<p>我不知道小张遗憾的是她要结婚了，还是学长要结婚了。</p>
<p>或许她们约好了一起吃公粮，约好了踹掉我一起为理想奋斗。毕竟她们才是一个世界的人，受过高等教育，拥有纯洁的感情，谈恋爱不会开房，学习之余不忘吃西餐。</p>
<p>而我只是一个职校毕业的土逼，家里砸锅卖铁供我结婚生计。穿不入流的杂牌衣服，不懂英文，吸烟喝酒，最喜欢的歌手是小刚。</p>
<p>我有些心软。</p>
<p>其实换做我是小张，我也会暗度陈仓。一边按捺住自己的土鳖未婚夫，一边积极寻求更加可靠的未来。</p>
<p>进可忘恩负义，退可忠孝两全。</p>
<p>只是退回来时的心情，大抵与我第一次与小张上床后一般失落吧。</p>
<p>这就是接下来要与我共度余生的人吗？</p>
<p>这是个多么悲凉的问题。</p>
<p>又是多么凄惨的回答。</p>
<p>我便抱住了小张，在这样夜凉如水的房间里，忽然失去了语言。而她像被大雨淋湿的雏鸟，瑟瑟不安的躲在我的怀里。</p>
<p>期望与绝望，往往贯穿着那些心比天高命比纸薄的人生。</p>
<p>起秋风那天，小丽屋里十足的冷。</p>
<p>古人说饱暖思淫欲是对的，我在瑟瑟发抖中只盼着快点开饭。</p>
<p>“你玩儿会儿电脑呀，我去买菜。”小丽刚起来不久，睡眼惺忪的。</p>
<p>“这么冷，还出去干嘛，吃个泡面不就得了。”</p>
<p>“没有啦——再说哪能一直吃那个呀，你等等呀，一会儿就好。”</p>
<p>见她执意要出去，我也跟了出来。小丽催我，“你不用跟着来呀，我自己就可以。”</p>
<p>“别买菜了，出去吃吧。”</p>
<p>“哎呀，我来做就行。”</p>
<p>“我们还没一起吃过饭呢。”</p>
<p>小丽沉默一下，又道，“也行，不过你不许请客。”</p>
<p>“那我就不去了。”</p>
<p>“哎哎哎，你看你！”</p>
<p>我很认真的说，“我呢，钱不多，能吃得起啥就吃啥，你别争别抢，好吃你就多吃点儿，不好吃下回咱不吃这个了，成吗？”</p>
<p>小丽见我硬争，只好点头。</p>
<p>路口不远有个小店，挂着横幅：自助火锅48元，两盘肉，四个青菜。</p>
<p>店里人很少，大概过了吃饭的时间了。老板帮我们支上家伙，我点颗烟。</p>
<p>“又吸！空腹吸烟不好！”</p>
<p>“什么时候吸烟都不好！”我嘿嘿的笑。</p>
<p>老板端上来肉和菜，锅也热了起来。</p>
<p>我和小丽涮火锅，是那种很难吃的锅，没有底料，像清水煮菜，肉也不新鲜。</p>
<p>可是记忆中，那是世上最好吃的一餐，再没有这样经历。</p>
<p>隔着雾蒙蒙的锅，小丽吃着吃着，就抬起头，对我笑。</p>
<p>几绺碎发荡在她额前，她把它挂在耳后，样子特别美丽。</p>
<p>我终于憋不住，问，“不工作了好吗？”</p>
<p>我觉得世界一下子安静下来，小店里破旧电视里的新闻变得格外清晰，火锅咕嘟咕嘟吐着泡泡，青菜在小丽腮帮子里更是清脆。</p>
<p>我一直等她嚼完那片菜。许久，她慢悠悠的说，“好啊！”</p>
<p>“真的啊？”</p>
<p>“吃菜。”小丽把那些肉，挑些好的，都夹给了我。</p>
<p>我觉得我们好像过家家的两个小孩子，而我是率先打破游戏规则的那个。</p>
<p>回来的路上，我们第一次逛街。</p>
<p>顾及我的心情，小丽懂事的只在窗外瞄一下，从不带我进去，怕遇到熟人。</p>
<p>我也想勇敢一点，牵起她的手，可是每次冲动前，都觉得满世界的人都在对我指指点点。</p>
<p>沿途走了一段，小丽忽然慢了几秒。她在一户落地窗前犹豫一下，被我发现了。</p>
<p>“喜欢这双鞋啊？”我看，是个小牌的鞋店，一双翻毛绒的系带皮鞋，小巧玲珑的。</p>
<p>“是呀。”</p>
<p>“喜欢就买啊？”我摸口袋，只有几十块了，看样子豪爽不起了。</p>
<p>“买了就不一定喜欢了，还是这样好。”小丽拽了拽我，“走吧。”</p>
<p>“起码也要知道价格啊。你等我一下。”我把小丽放门口，进去问了一下。</p>
<p>两百八十块。差不多是我三个礼拜的零花。</p>
<p>我吐吐舌头，小丽问，“很贵呀？”</p>
<p>“是啊。”</p>
<p>“我的眼光果然很好！”</p>
<p>“嗯嗯嗯，快走吧，清冷清冷的。”</p>
<p>我没告诉小丽，其实不算太贵。要是戒了烟，三个礼拜就可以买到。</p>
<p>我觉得我像是亟待做某件撼天动地的大事，充满了期待与兴奋。大概每半个小时一次想抽烟的欲望上来时，便会引起这种喜悦。</p>
<p>两个小时后我在家里到处翻，找到小半包剩了许久的红金龙。烟叶都酥了，点上以后死命的呛。</p>
<p>戒烟的第三天，我浑身上下都是报复社会的想法。</p>
<p>看到谁都觉得仇恨。为什么只有我忍痛割去了自己唯一的嗜好，而你们却活得那么开心？</p>
<p>又不敢让小丽看到，还怕她老是给我买烟，破了我的斋戒。</p>
<p>两天没去找她，她小心翼翼的给我发短信，“小祥没事儿吧？”</p>
<p>“没大事儿。”</p>
<p>“啊？怎么啦？你别吓姐！”</p>
<p>“嗓子不舒服，有点上火吧。”</p>
<p>“哎呀，我给你煮梨水喝好不好？”</p>
<p>犹豫了半天，小树苗又高昂了。</p>
<p>“好啊！” 小丽把整只梨放在锅里煮，断生后捞出来给我吃，梨水则加了冰糖继续熬。</p>
<p>我哪有什么嗓子不舒服，见桌上有南京，迫不及待拆开吸。</p>
<p>“哎哎？你嗓子不舒服还吸！”</p>
<p>“就一根。”</p>
<p>“一根一根一根！给你收起来啊，好了再吸。”</p>
<p>她就熟视无睹的放过我嘴里这根，把那一包藏起来了。</p>
<p>吃过梨水，吃小丽。</p>
<p>“那个……”</p>
<p>小丽把树苗吐出来，“啥？”</p>
<p>“今天可以进去不……”</p>
<p>“我想想啊。”</p>
<p>“还要想啊？”</p>
<p>“不想的话那就不用了。”</p>
<p>“快想快想！”</p>
<p>“那么今天可以呀！”</p>
<p>我就满心欢喜。把她摆弄一下，让她转过身站着，忽然一个激灵。</p>
<p>“姐————”</p>
<p>“呀？干嘛嘴巴突然变甜了？”</p>
<p>“你吃过肯德基的鸡肉卷没？”</p>
<p>“当然啊。”</p>
<p>“哪个味道的？”</p>
<p>“老北京啊。问这干嘛？”</p>
<p>“墨西哥味的吃过没？”</p>
<p>“吃过啊，没老北京好吃。”</p>
<p>“我没吃过诶。”</p>
<p>“带你去吃啊！”</p>
<p>“呐——我的意思是，你这里呢，还有这里，就好比是墨西哥和老北京——我通常只吃老北京了，偶尔我也想试试墨西哥是啥味儿的。”</p>
<p>“啊？”</p>
<p>“我想进后面——”我撒娇。</p>
<p>“多脏啊？”</p>
<p>“不脏不脏。”</p>
<p>“去你的！”</p>
<p>从凤凰回来，小张买了五串佛珠，说是保平安的。</p>
<p>她爸妈一对，我爸妈一对，我一串。</p>
<p>“怎么没你的啊？”我好奇。</p>
<p>小张冷笑一下，“小孩子才信这个。”</p>
<p>“是舍不得花钱吧？这又不贵。”</p>
<p>“一种感情的凭依和寄托，能使人开心，就物尽所用了，不必太在乎形势。”</p>
<p>“那怎么还给我买了个啊？”</p>
<p>小张斜我一眼，又冷笑，“你应该会挺喜欢吧。”</p>
<p>好像是在说，“就你这智商。”</p>
<p>我是挺喜欢的。第一，只要有人送我礼物我就喜欢；第二，小张把我和我的父母已经摆到她的家人圈子里去了。</p>
<p>“抽空跟家里商量商量，把日子订了吧。”我说。</p>
<p>小张假装沉默一下，说出预期的答案，“也好，不过婚期不要订在冬天啊，穿裙子很冷的。”</p>
<p>“唔……四月结婚，来年二月就可以添孩子了。”</p>
<p>“晚一两年再造计划吧。”</p>
<p>“你不想要啊？”</p>
<p>“你想要啊？”小张又用文革的眼神看我。</p>
<p>“我还好啦，估计咱爸咱妈等不及了。”</p>
<p>“再等等吧。”</p>
<p>“嗯，看来可以经常走后门了。”</p>
<p>“什么？”</p>
<p>“避孕呀，走后面。”</p>
<p>“我才不要，痛死了！”</p>
<p>说着小张一愣，见我没什么反应，故作生气般转开话题了。</p>
<p>转的我的心里生疼生疼的。</p>
<p>天色渐凉，也挡不住小丽每天洗澡的好习惯。</p>
<p>通常是做完后，她把我陪到厌了，哄我或者拾掇我躺下休息了，她再去洗澡。生怕走的快了，会被我察觉到嫌弃的意思。</p>
<p>小丽体贴的无微不至是一种病。</p>
<p>我翻着身子趴在床上，喉咙深处学伽椰子发出咯咯咯的声音。小丽用一只水桶，添些热水，用毛巾擦身子。</p>
<p>外面的梧桐叶子大把大把的落了，看得心里一片荒凉。</p>
<p>房里没有开灯，淡淡月色斜过窗，洒在小丽光滑起落的身上。继而被毛巾挤下的水冲散，哗哗掉在地上，碎成无数凉风。</p>
<p>小丽惋惜道，“只顾着玩了，也忘记捡些梧桐果吃。”</p>
<p>“什么玩意儿？”</p>
<p>“梧桐树的果子啊，可以吃的。”</p>
<p>“你那里是有多穷啊！”</p>
<p>“蛮好吃的啦！”</p>
<p>“真的？”</p>
<p>“我什么时候骗过你呀？”</p>
<p>“那明年弄些吃吃啊！”</p>
<p>小丽擦身子的手停了一下，继而笑道，“好哇！”</p>
<p>就在很多年后，我安慰小张的那个夜晚，我发觉她们转过身抽泣的肩膀，异常的像。</p>
<p>初次见小张父母，比我想象中要和蔼的多。</p>
<p>或者是我把他们想的太憎恶了，我开始以为他们一定会有高级知识分子特有的气质，以及职业医生固有的优越感，最后还要地方官员字正腔圆的调子。</p>
<p>就是一对平凡的老头老太太。</p>
<p>跟万万千千普通职工家庭一样，待人客气周到，对未来女婿说话有些诚惶诚恐。</p>
<p>我受宠若惊。</p>
<p>小张像凌驾我们之上的生物一样，自顾坐在一边看电视。阿姨拿出一些老照片给我看，见证小张幼时到现在都是多么的完美无缺。</p>
<p>一如千千万万的普通职工家庭的老人一样，自己这辈子没能实现的期望，全部寄予到孩子身上，倾尽所有，以为可以培养出一个国家级大人物来，岂知自己多年来辛苦经营的，不过是当今亿亿万万普通孩子中的一员。</p>
<p>叔叔竭力伪装成一副极有威严的样子，不多话，不搭腔，希望可以长久在两家之间镇得住场面。我觉得小张在这点可以完爆培育她多年的阿玛。从那五串佛珠就看得出来。</p>
<p>我们丰盛的吃一餐简饭，阿姨爱屋及乌，常给我夹菜。叔叔怕被我看出他食人间烟火，只一昧的喝酒，企图用他擅长的技术给我一个下马威。小张不悦，“爸你少喝点儿！”“爸你吃点儿菜！”时不时剜我一眼，吓得我也不敢吃菜。</p>
<p>我们都喝多了，在各自媳妇儿前强忍不吐。</p>
<p>谁是一家之主一目了然——小张从容的指挥她妈操持这操持那，自己也游刃有余的帮忙拾掇，没多大会儿我们爷俩就从乱糟糟的饭桌上转移到干净的 我是畜牲， 我吧上；片刻后酒桌也亮堂了出来，小张挽着我，“爸，妈，我送小祥回去，你们休息吧。”</p>
<p>阿姨有点轻微的手足无措，想说些客套话，被小张一个眼神放平了。</p>
<p>叔叔现在只会说“好”“好”。</p>
<p>“喝那么多干嘛，我爸那么大年纪了，你跟他较劲干嘛！”路上小张埋怨我。</p>
<p>还没来得及解释，扭头就吐了一地。鼻涕眼泪齐出，苦辣无比。</p>
<p>小张别过头，也是强忍着给我拍背。我知道她受不了这个，就挥挥手叫她去一边。</p>
<p>小张从包里翻出一包纸巾，抽一张捂住自己口鼻，把剩下的塞进我手里，几步走到了一边。</p>
<p>我撅着屁股挪了几步，在绿化带里又吐了些，方觉好些。</p>
<p>小张离远了看我，见我回身走了，走过来递给我一瓶水。</p>
<p>“喝口水漱漱口，这水别喝，太凉伤胃。”</p>
<p>说着又嘟嘟囔囔躲到了一边，很是不高兴的样子。</p>
<p>这就是小张的温柔。</p>
<p>来自高等学府千锤百炼后精简后的温柔。或许它曾经繁冗的飘荡在篮球场的上方，图书馆的下方，操场的角落，树林的草地。如今它风景都看透，却没了一颗细水长流的心。</p>
<p>这就是我仅有的，来自于施舍的温柔。</p>
<p>订婚的酒店也是小张联系的。</p>
<p>我爸交代给我，我交代给小张。</p>
<p>小张大可以不必操着心，但是她怕自己仅有的一次订婚仪式泡了汤，毕竟她对我的个人能力视若罔闻。</p>
<p>被人看不起也挺好的。</p>
<p>两边的家长都很礼貌，客客气气的说些好听的话。</p>
<p>小张才是镇得住两家场面的人物。在她的坚持下，任何旁亲都没能参加这个小型仪式。</p>
<p>理由是小张一人镇得住她全家，我一人可以镇住我全家，小张镇得住我。</p>
<p>淡淡的吃了个饭。</p>
<p>出门前我对小张说，“结了帐，咱们就是未婚夫妻了。”</p>
<p>“你想反悔还来得及。”</p>
<p>“赌一把好了。”</p>
<p>“你看上去不像运气很好的样子。”</p>
<p>“你少气我，你知道我要赌什么？”</p>
<p>“无非……幸福安逸什么的。”</p>
<p>“如果是这样愿望，赌赢了不是挺好的吗？”</p>
<p>“是呀，挺好的。”小张漫不经心的应了几句，便几步赶到前面去，给两边的老人拦出租车。</p>
<p>“去干吗？”送走家长后，我在路边问小张。</p>
<p>穿梭而过的车流带起小张的长发，胡乱的摆。她眼里只有远处未见的出租车，“去看看家具什么的吧。”</p>
<p>“下礼拜再去吧。”</p>
<p>“你就会拖——慢性子，拖来拖去最后不还是得干。”小张劈头盖脸说我一通。</p>
<p>我本来想和小张开个房什么的，无辜就挨这么一顿，心里窝住一团火，想发，又他妈没有理由。总不能跟个洒逼似的站在马路中央，人来车往的街头，跳着骂“凭什么不让我艹逼，凭什么不让我艹逼？！”</p>
<p>想着忽而觉得好笑，脸上的表情也许就有些怪异。小张皱着眉头瞥我一眼。</p>
<p>“神——经！”</p>
<p>小丽给家里打电话的时候，从来不用手机，都是跑到小卖部那里用公话打长途。</p>
<p>夏天时老伯会从冰箱里拿些切好的瓜给我吃，见我吸烟，偶尔也给我点根。这会儿秋意正浓，生意都冷清了许多。小丽在那边用我听不懂的话说这说那，我跟老伯并排坐门口愣神。</p>
<p>“你们结婚了没有啊？”老伯估计酝酿了很久，故意装作不经意的样子随口问起。因为每次见他的眼神都在咨询这个问题，都被我们巧妙的避过去了。</p>
<p>“还没有，再等两年吧。”为了满足老伯，我顺着他说。</p>
<p>“哦——”老伯若有所思，沉吟道，“一开始吧，觉得她是你姐姐；后来吧，看你们挺亲密的，又不像——嗨，女娃娃大点好，女大三，抱金砖！抱金砖啊！”然后老伯豁然开朗，哈哈笑着拍我后背。</p>
<p>“好！好！抱金砖！”我尊老爱幼，把眼都笑没了。</p>
<p>回去路上，小丽问，“你跟那大爷扯什么呢？”</p>
<p>“他问我什么时候娶你。”</p>
<p>“蛤？”</p>
<p>“老伯古道心肠，非得帮咱俩算日子。”</p>
<p>“小祥你可别闹了，”小丽拉我一把，正色道，“我怎样都没关系，但你是本地人，别传出去给你闹了笑话，看你以后怎么娶媳妇儿！”</p>
<p>“我又不是媳妇儿迷，干嘛说得我非得要娶媳妇儿似的！”</p>
<p>不知怎么的，突然又很委屈。一把甩开了小丽，两个人僵在路边。</p>
<p>小丽见我生气，又凑了过来。</p>
<p>“你别生气，姐没别的意思……”</p>
<p>她很好听的普通话被风卷进树枝里，渐渐飘得散了。小丽依然素面朝天，身后是大片枯黄的叶，映得她颈间的皮肤格外雪白，丝丝青脉，烙进日光里。</p>
<p>小丽见我不吭声，怕极了，用更小声的力道问，“咱不吵了好么，回家去吧……”</p>
<p>我刚刚看她看的出神，都忘了先前为什么要生气了，被她这一叫回过神来，看她急得快要哭了，忙抹她的脸，越抹越湿，把我也吓坏了。</p>
<p>小丽每逢觉得自己惹我生气了，回头做起来便格外卖力。几乎不用我动，自己忙上忙下的。</p>
<p>其实我不喜欢那样，没有参与感。但见她这么诚心诚意，也不好拂了她的兴。</p>
<p>那天下午也是，回到家里，她便牵着我的手到了床边。</p>
<p>她好像从来不会嫌弃我几天没有洗澡，见我没反对，就把小树苗攥在手心里摆弄下，像只猫一样悉心的碎碎舔了一遍，舍不得用力似的含了住。</p>
<p>她在我身上起落了会儿，忽然又哭了。</p>
<p>“姐你怎么了啊？今天这是犯什么邪劲儿了？”</p>
<p>小丽脸憋通红，明知自己失态却又无法弥补，纸巾在床头，她骑在我身上又不敢下来，只好用手捂住了嘴。</p>
<p>我把她放下来，拿纸给她擦。</p>
<p>“缓一会儿，慢慢说，到底怎么了？”</p>
<p>小丽一昧摇头，然后就是不住的擤鼻涕。</p>
<p>过了会儿她缓过来了，又要做，被我按在那里。</p>
<p>“不想说就歇歇，万一熬坏了身子怎么办。躺会儿吧我们。”</p>
<p>小丽哭得多了，鼻音很重，“没事儿，就是，就是突然……”</p>
<p>话没说完，泪又打了下来。</p>
<p>我就抱着她，不许她再说了。</p>
<p>当有人无助的在你怀里哭泣时，你会觉得你是世界上最有成就感的人；但是继而无法为她解决问题，你往往又会自责自己是最没用的。</p>
<p>喜悦与绝望并存，希望在夹缝中生存。</p>
<p>小丽说，“刚才不知道为什么，突然想到以后就见不到小祥了，特难过。”</p>
<p>小丽把我说的一愣，先前那种委屈一下子冒了出来，扑哧扑哧，也哭了。</p>
<p>那是我第一次在类似女朋友关系的人面前哭。</p>
<p>彼此都光着身子。</p>
<p>后来我们并着肩，抱着腿，靠着墙壁，坐在床上。</p>
<p>外面起了风，带的门框哗哗做响。稀薄的阳光被刮散，卷进细细碎碎的尘土中，兜过玻璃窗，粒粒轻响。</p>
<p>小丽的电脑唱着罗大佑的恋曲八零。</p>
<p>春天刮着风，秋天下着雨，</p>
<p>春风，秋雨，多少，海誓，山盟，都随风远去。 “暑假也过完了，小祥也去找份工作吧。”小丽沙哑道。</p>
<p>“哪还有什么暑假，我已经毕业了啊。”</p>
<p>“嗯，那就去找点事做。”</p>
<p>我非常不喜欢她这样郑重的与我，说这些老生常谈的话。</p>
<p>我不接话，环顾房间。耳畔似乎又可以听到夏日淋淋的大雨，不绝的从梧桐树上灌进院子里。小风扇也放起来了，它的嗡嗡声被秋天送走了。 最重要的是，这个快乐的热天，好像过去了。</p>
<p>同样的房间，异样的心情。我眼里都是十几天前，或者几十天前，我坐在如今同样的位置，一手夹着烟，一手摸着小丽黝黑的长发。</p>
<p>有时梦中想到，那手中的长发，会像粉丝一样好吃。 “在这个社会里呀，很多人都没有良心——可能以前是有的，但是被别人吃了后，自己也就学会了吃别人的良心。”小丽拉着我的手叮嘱，“没人会管你是不是家里的独子，是不是大人手里的宝贝，是不是情人心里赖以生存的寄托——所以如果有人欺负你，攻击你，这是很正常的事情，和热天下雨，冷天下雪是一样的道理。” “我知道。”</p>
<p>“——所以，小祥你要好好的，像个男人一样，顶天立地的生活。”</p>
<p>“顶天立地不就顶雷子了么。”</p>
<p>“顶天立地是胸怀要大，像大海一样。”</p>
<p>“你这不是矛盾么。”</p>
<p>“温柔的男人像海洋……哎呀我唱不来，你唱。”</p>
<p>“爱在风暴里逞强，哭还是风平浪静的模样……”</p>
<p>然后小丽与我轻声合唱，“卷起了依恋那么长，挥手目送你起航，到你觉得我给不了……”</p>
<p>她凑过来，吻我的嘴，</p>
<p>揽住我的头，埋在她胸口。</p>
<p>之前和之后，我亲过很多人的嘴。对我而言，接吻不过是交换口腔气味与口水的仪式，是与新结实的恋人确立关系的行为罢了。</p>
<p>可是小丽的嘴巴很软，和她在空调下如水的冷藏脂肪一般。这张嘴巴曾含过无数男人的树苗，她将此视为工作，如今她很干净，与我轻抵在一起，像是在吃滚烫的梨水，小心翼翼的。</p>
<p>我从没有觉得小丽脏，尽管我深知她是做什么的。她就像是土豆或者莲藕这些生长在泥土里的作物，吃起来时通常都觉得比韭菜豆芽一类的干净的多。</p>
<p>我觉得小丽是爱我的，既像是家长般的慈爱，又像是恋人般的疼爱。呵护的，没有原则的爱。我能回报的，也只有过之而无不及的，更加用力的爱。</p>
<p>为什么小丽这么好的女人，会做了失足呢？</p>
<p>为什么偏偏又让我遇上了呢？</p>
<p>为什么明明很干净的小丽，从没有堕过胎的小丽，每几个月就去检查身体的小丽，只有过不到一千次经验的小丽，在那些衣冠楚楚的人们眼里，却是如此肮脏和不堪呢？</p>
<p>他们刚提上裤子，就骂她是□□；她们刚从医院出来，就说她是破鞋。</p>
<p>“呵呵，我只交过两个男朋友，高中两年，大学三年。”</p>
<p>我闭着眼睛，手搭在小丽的腰间。这些日子来，我能熟悉的了解小丽的每一根肋骨在哪里。</p>
<p>我知道她的琥珀是什么颜色，知道她每个月哪几天不上班，知道她不喜欢哪些体位，知道她爱听谁的歌。</p>
<p>我觉得我很了解小丽了，就像她如此了解我一样。</p>
<p>可我居然不知道她从哪里来，要到哪里去。万一小丽有天不辞而别，我该去哪里寻她？</p>
<p>那天，是我们第一次，也是最后一次接吻。</p>
<p>开始下雪了。只是这边的气温一直不能得偿所愿，无法看到白雪皑皑，只会把道路弄得泥泞肮脏，若是走路，会溅的裤腿后面许多泥点。</p>
<p>我跟小张出去吃饭，打了车，我说，“去湖边。”</p>
<p>小张打断，“干嘛去啊？”</p>
<p>“旋转餐厅吃饭啊！”</p>
<p>“你就这一个心眼儿啊？”</p>
<p>“啊？”</p>
<p>“师傅，麻烦您去小吃街。”</p>
<p>我调侃，“你还会用敬语啊？”</p>
<p>小张轻语，“滚。”</p>
<p>“干嘛去小吃街啊？”</p>
<p>“你是富二代啊？吃一辈子西餐啊？”小张嫌弃的嘁我一声，别过头看窗外，懒得搭理我。</p>
<p>我嘿嘿赔笑，司机不时从后视镜里瞄我们。</p>
<p>“看么斯？！”</p>
<p>“冇得，冇得！”</p>
<p>吃过饭，还是周身冰冷。我俩瑟瑟的在路边等车。</p>
<p>“下午没事儿吧？”我问小张。</p>
<p>“没什么事儿。干嘛？”</p>
<p>“去洗个澡吧？这么冷的天儿。”</p>
<p>“神经啊你——又没带东西。”</p>
<p>“现买啊。”</p>
<p>“有病吧！你回家去拿！”</p>
<p>“为什么是我拿啊？”</p>
<p>“那你还洗不洗了？”</p>
<p>到我家，拿了洗浴用品，见小张楚楚动人站门边儿，小树苗就一拱一拱的。</p>
<p>我过去抱她，想亲她，她把头别过去，我这才发现自己满嘴烤鱼味儿。</p>
<p>胡乱摸索一阵，我就拖着她往床边走。</p>
<p>“等等！”小张似乎一直无法进入迷情状态，理智打断我。“你家有那个没？”</p>
<p>“哪个啊？”</p>
<p>小张没说话，在我胸口划了个小圈。</p>
<p>“我艹我又不是鸭子，在家准备那个干嘛！”</p>
<p>小张乐了，把我推开，“你要对我负责是吧？”</p>
<p>“是啊？”</p>
<p>“所以，没有那个，就不能碰我，你也不想我吃苦吧？”</p>
<p>我懊恼的跺地，“快走快走，去洗澡！”</p>
<p>在成人店门口停下，小张脸红道，“你快去，我那边等你。”说着就往一旁走，被我一把拉住。</p>
<p>“我也没去过啊，怕的，你陪我啦！都老夫老妻的，怕毛！”</p>
<p>小张不屑的嘁我一下，返身带我进去。</p>
<p>老板是个年轻小伙，好像也很少见恋人来这儿逛街的，也是吓了一跳，蹭一下站起来楞那里，不知道说什么好。</p>
<p>隔着玻璃柜台，我们挨个扫描五颜六色的包装盒。</p>
<p>我指着一盒螺纹超薄问，“这个多钱？”</p>
<p>小伙还没开口，小张捅我一下，指着一盒普通装，“就这个吧。”说话的时候脸有些红。</p>
<p>小伙脸更红，支支吾吾笨手笨脚打开柜台，颤颤巍巍的跟我们算了账，连再见都忘了说。</p>
<p>“那小子该不会跟你有一腿吧？”</p>
<p>“何止一腿，盘根错节！”小张冷哼。</p>
<p>“他这会儿一定拉了店门，独自默默对着你刚才指过的玻璃片撸啊撸。”</p>
<p>“哎你说话怎么这么恶心啊？”</p>
<p>“心疼啦？”</p>
<p>“滚！”</p>
<p>我本来想去浴场，暗暗的想去小丽原先工作的那里，但是被小张立马打断，去了大众浴池。</p>
<p>排了半天队，要了个单间。</p>
<p>小张红着脸，不满道，“整个破事儿还费这么大工夫，家里要是准备了，现在一人开个淋浴不就完了？真是！”</p>
<p>胜利的果实没有吃到嘴里前，我对任何攻击性语言都报以谄媚的笑。</p>
<p>就好像建国前隆重召开的郑智协商会议似的。</p>
<p>一个浴池，两个花洒，一对光着的人。</p>
<p>我过去给浴池放水，小张警惕道，“你干嘛？”</p>
<p>“泡澡啊！还能是喝酒不成？”</p>
<p>“你有病啊！这多脏啊！”</p>
<p>“开水一煮就不脏了啊！”</p>
<p>“滚，傻了吧唧的！要泡你自己泡，泡了别碰我！”</p>
<p>我跪下的心都有了，赶过去抱她，却被硬邦邦的小树苗戳到她大腿顶了一下，咯得生疼，猥琐的蹲在一边。</p>
<p>小张把眼泪都笑出来了，我去瞄她，胸前两滴桑葚紫油油的上下乱颤。</p>
<p>笑得够了，小张一边嘟囔，一边穿衣服去了外面，不一会儿拿了块搓澡巾回来，又脱了衣服，混着沐浴露仔仔细细的擦浴池。</p>
<p>我在一旁装作洗淋浴的样子，望着小张一摆一摆的白花花的屁股，几欲爆体而亡。</p>
<p>终于忍不住，嚎着冲过去，趁她没注意就钻了进去——原来她也很期待了，一下子就到了底。</p>
<p>面子还是要的，小张被从后面推着，一只手带着搓澡巾撑着浴池沿，另一只手腾出来拍我大腿，“诶你干嘛啊你？套子呢？”</p>
<p>鬼才管你套子呢。</p>
<p>白驹过隙般，我的威风就不在了。可怜兮兮的泡在池子里，被在一边冲淋浴的小张从头到尾骂了个遍。</p>
<p>小张骂我很有特点，一个脏字都没有，像个小学语文老师似的，拐弯抹角的从一些稀奇古怪的角度，蚕食鲸吞的抹黑我。</p>
<p>我必须要做出一副快哭的样子，这样她才满意的放过我。</p>
<p>“进来泡泡吧？”我摇尾乞怜道。</p>
<p>“不要！脏死了！”</p>
<p>“你不是洗干净了么！”</p>
<p>“那是骗你的，我只是胡乱擦了一下——还被你个混蛋偷袭了！我能洗的干净吗？”</p>
<p>“好，好，别生气——可是真的很舒服，你不想试试么？”</p>
<p>“不想！”</p>
<p>“草木一秋，人这一生什么都得尝试一下，才不枉此行啊！”</p>
<p>小张冷笑，“谢谢，没您那么博学。”说着擦干了身子就往外走。</p>
<p>我“呼啦”一下从水里站起来，带了池子外都是水，小张给吓一跳。</p>
<p>“好话说尽你也不识抬举，看我怎么……”我一边怒指，一边大跨步出池子，忘了刚才自己猛站起来弄的外面都是水，刺溜一滑，以诡异的姿势劈叉摔在那里。</p>
<p>我和小张蜷缩在池子里，膝盖抵着膝盖，热气腾腾的水面上，小张的脸有些模糊。</p>
<p>我胯下还阵阵生疼，瞄一眼小张，恰好她也瞄我，瞄了个咪的，她又吭哧要笑。</p>
<p>“舒服吗？”热水烫着下巴，我看绿水下面我俩曲折的腿。</p>
<p>“挺好的。”</p>
<p>小张下面的头发像湖面的芦苇，从这个角度看，仿佛我置身水底，在阳光的折射下，看游游荡荡的发丝飘在那方。</p>
<p>忽然想吃海鲜。</p>
<p>我两手抄下去，捧小张的腰。小张吓一跳，“你又搞什么啊你？”</p>
<p>我一脸倔强，不屈的告诉她，“我要吃你那里！”</p>
<p>“滚！”</p>
<p>“不给就死给你看！”我用力扳她，不知是她怜悯，还是屋里太热，她象征性的骂了两句，就被我摆弄好。我用身子抄下去垫住她，把她两腿托在我胸前，膝盖支起撑住她后背。</p>
<p>那只牡蛎，微微闭合着，湿漉漉的芦苇，无精打采的盖在上面。黝黑发亮的外壳，包裹着鲜美可口的扇贝，混着浴池热水的味道，与它本来的味道，像是腌过菠萝的盐水。</p>
<p>“进了腊月，我就要回家了呀。”</p>
<p>“哦，什么时候回来？”</p>
<p>“应该……不回来了吧。”</p>
<p>“你要相汉子去了？”</p>
<p>“前段时间家里给说了亲事，回去见个面，不反感的话，或许就把事办了。”</p>
<p>“然后呢？”</p>
<p>“可能去县城上个班，也可能开个店。”</p>
<p>“听起来不错呢。”</p>
<p>“男方家里有点关系，找个工作应该不难，但我还是想开个卖衣服的店。”</p>
<p>“挺好的。”</p>
<p>“小祥你别这样，姐看了难受。”</p>
<p>“不然你要我怎样？敲锣打鼓给你抬花轿吗？”</p>
<p>小丽就哭了出来。</p>
<p>我也跟着掉泪，“为什么是我？为什么要给我留手机号码？为什么要对我好？”</p>
<p>小丽只是哭。外面的天色一直灰白，许久不见阳光。梧桐的叶子落了大半，残余枝叶也在冷风中摇摇欲坠。我们在房间里通常不开灯，小丽节约的很有个性。她把夏天的衣服都整齐的码在一端，还真有点专卖店的样子。</p>
<p>“这几天我就去把工作辞了，好好陪你些日子。”</p>
<p>“不用。”</p>
<p>“小祥！”小丽很认真的，少有的严肃，“姐最后一个心愿，就是想看小祥你穿着西装，打着领带，精神的去上班。”</p>
<p>“我才不穿那个。”</p>
<p>“姐也没什么好送你的，前些时间一直看些男装店，太贵了姐也买不起，约莫着你的身高，买了套送你。”说着从床上爬下去，打开衣柜，举出一套盖着好像帆布似的西装。拆开了，是一身藏蓝色，隐隐有竖条暗纹。</p>
<p>“还有衬衣，也是镜面的，领带是送的，我本来想要红色的，可是觉得太土了……”小丽一手举着西装，怕弄出褶，一边又泣不成声。</p>
<p>我倚着墙，冷笑，“腰带呢？”</p>
<p>小丽一愣，放声大哭起来。</p>
<p>不久，她就办好了后事，孑然一身，每天在家做好饭等我来。床上散落很多招工简章，也不知她跑了多少地方搞来的。</p>
<p>吃过饭后，她便像小学老师一样黏着我，一页一页给我看那些信息。其中大多都是假的，骗招工的，海外劳力输出的，招大堂经理的。或许在我的眼里看来这些都是一文不值的东西，可是在小丽手里都如获至宝，她甚至专门找了个文件夹，把它们详细归类，放在里面。</p>
<p>“你不去读博士，真是可惜了。”</p>
<p>“小祥不许笑我！”</p>
<p>“哪有。”</p>
<p>“姐文化不高，也不知道小祥喜欢做什么，但是我觉得小祥将来一定可以成器，在这个小城里呼风唤雨，威风的很！”</p>
<p>总觉得小丽每一句话都是在说遗言，就像人之将死，其言也善。</p>
<p>我就抱住她，不许她再说下去。小丽就乖巧的藏在我怀里，等个片刻，就悉悉索索褪我的衣服。</p>
<p>西墙上挂着一本老黄历，从来没留意过，这天无意看到，格外刺眼。 我俩并排躺在犯潮的被窝里，像一双搁浅的鱼，残喘着动着鳃。 “明天陪你去人才市场看看吧？”小丽谨慎问道。 “然后呢？” “然后？你想干嘛…就干嘛呀。”小丽误会我的意思了，又或者她故意装傻。娇嗔的拂了树苗一把，便套上衣服下床给我拿烟。 我心里又是一阵难过。我已经戒了两个礼拜的烟了，本打算再攒点钱，圣诞节就可以买下那双鞋送给小丽了。 可是小丽要走了。 我还以为可以被穿着这双鞋子的小丽牵着手，逛逛公园或者夜市，买些廉价的而小丽又喜欢的物什；或者她把牛仔裤褪到鞋子上，微微踮着脚，我们站着从后面做。 突然觉得还有好多事情没来得及和小丽做，一些平凡但又温馨的琐碎小事，以前总觉得有的是时间，岂料世事变幻如此措手不及。 “呐，吸支烟呀？” “啊，戒了，谢谢。” “蛤？为什么啊？” “因为穷。”</p>
<p>“说起来，有段时间没见你吸烟了，真戒了呀？好孩子！”</p>
<p>“是啊，每天很早就睡觉，怕犯了烟瘾扛不住。有时候自己委屈的都想哭，就这么个爱好，还给戒了。”</p>
<p>“那就不要戒呀。这又不是什么原则性的错误。”</p>
<p>“久而久之也习惯了，现在看到别人吸烟，就觉得他们好像是被大麻荼毒的败类一样。”</p>
<p>“啊？”</p>
<p>“就是很看不顺眼啊！”</p>
<p>小丽披着衣服把烟搁远了去，“那就不吸！”再钻进被窝时，冰凉的脚冻了我一下。</p>
<p>“冬天回家……也挺好，总不比这边这么冷。”</p>
<p>“我家那边更冷的！”</p>
<p>“诶对了，你到底是哪儿人啊？”</p>
<p>小丽眼珠一歪，还是不想说。</p>
<p>“窝巢我又不实名举报你。”</p>
<p>“不是，小祥你别生气——我就是觉得，我这样一个人，不值得你以后都牵肠挂肚的。你是生活在正常社会里的人，将来该有很好的日子。”</p>
<p>“你就这么确信？”</p>
<p>“还有，我如果嫁人了，就得好好过日子，不会再胡乱生活——可是如果是小祥，我怕自己又会乱来。”</p>
<p>“为什么对我这么好？”</p>
<p>小丽呃一下，张口欲言，迟钝了半天，也没想起该说什么好。</p>
<p>“不知道，就是很亲切。就像有时候在街边会遇到小猫小狗，如果身上有零食，就会给他们一点啊！”</p>
<p>“你这么勤俭持家身上还有零食啊？”</p>
<p>小丽啪的拍我一下。</p>
<p>“等等，我怎么吃流浪狗了我？”</p>
<p>“狗狗乖，吃牛奶不？”突然又想到什么，两手交叉护在胸前，“开玩笑的。”</p>
<p>我茫然的看着她，她也茫然的看着我。</p>
<p>“让我吃一次吧。”</p>
<p>“不行。”</p>
<p>“又不脏！？”</p>
<p>“不行！”</p>
<p>我就强行推她，她也很用力的抵抗，好像武师过招一样，两人架在那里，僵了住。</p>
<p>我凑过去吻她，她把头别过去。</p>
<p>我心里一阵懊丧，挣开了她。小丽赶忙给我掖被角，眼前晃着一对脂肪。我去摸，她浑然不觉似的，依旧专心弄被子。好了，便缩到我旁边。</p>
<p>我手顺着下去，她也不反抗。</p>
<p>“客人也不能摸的吧？”</p>
<p>“那当然了！”</p>
<p>“为什么可以做不可以摸啊？”</p>
<p>小丽被问蒙了，“店里的规矩啊，不干净。”</p>
<p>我手指陷进那片温暖，小丽表情有些走样。</p>
<p>然后她凑到我的颈间，轻轻的吻。</p>
<p>婚纱照最终还是定在本地，我知道小张是渴望去海边拍实景的，但是她最后还是敲定了一家口碑不错的店。</p>
<p>我是打算满足她的，毕竟正常情况下结婚这辈子就一次，婚纱照是个见证，多花点也说得过去。可是小张反常的很，坚决制止铺张浪费。</p>
<p>“那蜜月还去马尔代夫么？”</p>
<p>“哈？”小张冷笑，“那要不要去瑞士登记，然后北欧自助游啊？”</p>
<p>“我说真的……”</p>
<p>“你醒醒吧，就你那点儿工资。”</p>
<p>“算上份子钱，出去走一遭也是够的。”</p>
<p>“那回来呢？你知不知道公开旅游花销多大呀？家里老的少的知己闺蜜一个不能落下，你朋友多不多我不知道，我姐妹儿可是不少。”</p>
<p>“那就只给你朋友带，我不用。”</p>
<p>“说了不去。”</p>
<p>“那去哪儿啊？”</p>
<p>“国内短线，来回几天功夫，单位也好交代。”</p>
<p>“那还不如不去，新马泰三日游好了。”</p>
<p>“新马泰？”</p>
<p>“辛集、马颊河、台前。”</p>
<p>“哪儿来的犄角旮旯啊？”</p>
<p>“特惠线。”</p>
<p>“滚！”</p>
<p>拍照那天，选的衣服也不多。小张的意思是把衣服平均了，一人三套；我说我就两套吧，匀给你一套。</p>
<p>最后我俩一人两套衣服，最后给她单独拍了个写真。</p>
<p>拿照片的时候，小张悉心摩挲厚重的封面，意犹未尽的看画里的人。</p>
<p>我不知她心底是否又在惋惜命运，但是她看上去并不快乐。</p>
<p>“女人啊，也就这几年。等生了孩子，一切都走样了。”小张对着画里的人说。</p>
<p>“拍照留念，不挺好么。”</p>
<p>“嗯，挺好的。”</p>
<p>出门时有细细春雨，带着冬末的味道。</p>
<p>等车时，小张拽过我的衣领，用力的整了整。</p>
<p>“看你那邋遢样。”语气里都是责备和嫌弃。</p>
<p>雨水有些打湿了她好看的梨花头，呢子外套上粒粒晶莹的水珠。</p>
<p>一起办了些琐事，最后决定去湖上餐厅犒劳自己一下。</p>
<p>我已经可以熟练的点英文菜了，毕竟我只吃那一道。</p>
<p>小张要了份平时很少吃的简餐，我笑她，“还没过门就知道过日子了啊？”</p>
<p>她剜我一眼，“我只是换个口味。”</p>
<p>“你这人挺极端的。”</p>
<p>小张眉一挑，“说来听听？”</p>
<p>“没什么。”</p>
<p>“小祥你今天要是说不出个一二三来，”</p>
<p>“来怎么样？”</p>
<p>她陡然出手，狠狠在我手背掐了一下，疼的我险些呻吟出来。</p>
<p>“窝巢！”</p>
<p>小张忽然得意的笑，下巴两侧的梨花卷一颤一颤的。</p>
<p>我也跟着笑。在别人看来好似一对甜蜜的情侣。</p>
<p>吃过饭，隔着玻璃窗看外面蒙蒙的雨水挂玻璃。都懒得走。</p>
<p>“哎，你以前谈过几个啊？”小张冷不丁发问。</p>
<p>我觉得她一定也闷很久了，一方面看不起我，觉得我孤家寡人苦禅多年，一方面又充满敌意的审视我的过去。</p>
<p>“大概……有这餐厅的一半人数吧。”</p>
<p>小张又狠掐我一下，“你再说？”</p>
<p>我吃痛，“那再减一半好了。”</p>
<p>小张不屑道，“你们男人，总喜欢吹嘘自己有过多少多少女朋友，好像很了不起的样子似的。”</p>
<p>你们。</p>
<p>“是啊，总好过你们女人总说自己没谈过一样。”</p>
<p>“谁没谈过了？”</p>
<p>“你闺蜜。”</p>
<p>“你闺蜜！”小张反击。</p>
<p>“那就我闺蜜好了。”</p>
<p>两人无言，又坐了一会儿。待我准备想走时，小张唉了一声。</p>
<p>“我啊，以前一直深信我将来会和一个工科男生结婚，他穿纯棉衬衫，棕色卡其裤，一定不要戴黑框眼镜，在某个知名企业默默无闻的做事，几年或十几年后，飞黄腾达——或许他会找个小老婆，但依然对我宠爱有加——我啊，就睁一只眼闭一只眼，每天过着悠闲的日子，闲的无聊时，就约一票姐妹儿斗小三儿。”</p>
<p>“宫廷大戏啊！”我言不由衷的赞道。</p>
<p>“你给我滚。”</p>
<p>我带小丽去网吧，要了两台联机。付□□的时候她抢着给，我没抢过。</p>
<p>旁边打传奇的几个男的不时看我们这边，我心里有些犯哏，总觉得这些社会气息浓重的人，多多少少会去过小丽她们店。</p>
<p>网吧里没有空调，脚底一会便麻了。劣迹斑斑的玻璃门上贴着被雨水打褪了色的暗红字样，外面的人行色匆匆，屋里的则面无表情。浓重的烟沉淀在头顶上方无法散去，不多久衣服上都是辛辣的气味。</p>
<p>我想给小丽申请个□□，便于以后联系，可是那个年代，服务器总是繁忙。</p>
<p>“弄不成就不要弄了呀。”小丽趴在我扶手旁心不在焉道。</p>
<p>“可以的，就是需要等一会儿。”</p>
<p>“那就慢慢弄，不急，今天不行就明天。”</p>
<p>“你想玩点什么？”</p>
<p>“我不知道。”</p>
<p>“看****吧。”</p>
<p>小丽惊恐的瞪大了眼，“不好吧？”</p>
<p>“说的也是，那你有什么想看的没有？”</p>
<p>“没有啊。”</p>
<p>“你以前都是怎么打发时间的？”</p>
<p>“没打发过时间呀，偶尔看个电影什么的，一般都是逛街啊！”</p>
<p>“只逛不买！”</p>
<p>“嗯嗯！”</p>
<p>“那给你找个电影看吧。”</p>
<p>那时候没有网管系统，看电影要上本地的信息港，会有几部粗糙的港片可以看。</p>
<p>“周星驰看不？”</p>
<p>“可以呀。”</p>
<p>无独有偶，周星驰系列只有一部唐伯虎点秋香。</p>
<p>于是给她调出来看电影，我在这台机器上申请□□。</p>
<p>她不时探过头来问我进展，她那边的电影总是缓冲——那时候的网站就是这样的。</p>
<p>整个网吧肆处都是CS的B31咚咚咚连射的声音混着传奇战士喝啊喝啊砍杀的声音，彼此起伏。我眼前的企鹅跳半天，提示服务器繁忙。</p>
<p>时间一点点在过，我就跟着小丽一起断断续续看电影。</p>
<p>小丽的笑点很低，遇到一些烂俗的桥段也会欢喜一阵。见她笑的专心，我就陪她应付几声。</p>
<p>当秋香把华安推出府，插上后门时说了一句我爱你时，小丽突然落泪了。</p>
<p>我本来想笑她一笑的，小丽尴尬的抹自己的脸，我才发现原来她泪点也低的怕人。</p>
<p>我俩都不是随身带纸巾的人，她用手背正反揩了几下，突然可怜兮兮的扭过头看我。</p>
<p>“干嘛？”</p>
<p>她想说又憋住，扑哧一下喷出个鼻涕泡，慌用手捂。浓郁的鼻音后是她好听的普通话，“我也爱你啊。”</p>
<p>天快黑时，终于申请到一个。我赶忙让小丽下机，又押了些钱在我机器上。</p>
<p>“取个名字吧？”</p>
<p>“什么名字啊？”</p>
<p>“你□□上的名字啊！给自己取个代号一类的。”</p>
<p>“9527！”小丽不假思索。</p>
<p>“不是真的取代号啊！真服了你！——取个小名儿，懂了吧？”</p>
<p>“那就叫丽丽吧！”</p>
<p>“那，就，叫，丽，丽，吧！”</p>
<p>“不是全部都写上啊！笨死了你！”</p>
<p>“你还好意思说我？”顿了一下，我问，“你真名到底叫什么？”</p>
<p>小丽很自然的说了，跟“丽丽”连根毛的关系都没有。</p>
<p>“你果然骗我啊！”</p>
<p>“我以为你知道的啊！”</p>
<p>“我去哪里知道啊我！”</p>
<p>“这不就知道了么。”</p>
<p>“还是丽丽好听点。”</p>
<p>“那就叫丽丽呀！”</p>
<p>“什么贤良淑芬的，哈哈！”</p>
<p>小丽狰狞的掐我，力道却很轻。</p>
<p>“再说个状态。”</p>
<p>“什么状态？”</p>
<p>“嗯……就是你现在的心情。”</p>
<p>“小祥万岁！”又是不假思索。</p>
<p>“你正经点。”</p>
<p>“真的啦！我是这么想的。”</p>
<p>“傻了吧唧的，你再想想。”</p>
<p>小丽想了半天，最后说，“要不先这样吧，等我想起来就要你帮我改。”</p>
<p>然后我教她操作，登陆和密码，她似懂非懂的应了。</p>
<p>出来的路上已是夜火辉煌，天桥下是来往不息的灯河。潮冬的湿气浸透了衣服，棉絮变得矫揉，隔不住风，留不住体温。</p>
<p>小丽依偎着我，淡淡走在街上。我们和普通的情侣一样，在这个声色犬马的街头走着，混进潮流般的人堆里，一不留神，便淹没了。</p>
<p>第二天一早，我骑车去找小丽。</p>
<p>扑面的凉风闯进胃里，寒了整片胸腔。路两旁的四季青也暗淡了许多，上面盖着泥泞的灰霜。</p>
<p>我时不时想起前些时间在烈日炎炎下去找小丽的心情，同一条路，分别通往高空与低谷。</p>
<p>那种感觉就像小学时的每个礼拜天下午，明明是愉快的假期，却因焦虑周一开学而闷闷不乐。</p>
<p>似乎比那还要糟糕。</p>
<p>小丽没在家，打电话，说马上回，我就在屋里溜达。就好像第一次攒了钱去等小丽一样，总觉得等待是件绝望的事。</p>
<p>不久小丽提个柚子回来。</p>
<p>“干嘛去了啊？”</p>
<p>“嗯……昨天你教我上网，我就趁早去巩固了下知识，没想到你这么早就来了。来来，吃柚子。”</p>
<p>“知识巩固的怎样？”</p>
<p>“可以熟练的登录了啊，还随手加了个好友聊了会儿。”小丽没心没肺的笑，像一串铃。</p>
<p>“可以啊——早说你有这么优秀的电子基因，当初去做网管多好！”</p>
<p>“网管是啥？”</p>
<p>“吧台收钱的。”</p>
<p>“是自己的不？”</p>
<p>“不是。”</p>
<p>“那有什么意思呀——你怎么不说我开网吧？”</p>
<p>“你不是穷么。”</p>
<p>“也对！”</p>
<p>而后小丽咨询我的意见，问我可不可以陪她去买火车票。我说买两张，陪你一起坐车车。</p>
<p>小丽顺手摸我的脸一把，咯咯笑个不停。</p>
<p>买了一张，终点是没听说过的地方，而小丽会在中途下，去一个我更加陌生的地方。</p>
<p>在公交上挤了很久，小丽贴着我，隔着厚重的衣服依然可以蹭到她柔软的地方。</p>
<p>奇怪的是，我明知那是很吸引人的，却仅仅有这个念头，却毫无兴奋之意。</p>
<p>我突然觉得我和小丽好像是已经结婚许久的夫妻，彼此熟悉烂熟于心，抚摸对方犹如触摸自己。</p>
<p>可是车子不断颠簸，她却始终离我一个身位。她习惯了在人群密集的地方与我保持距离。</p>
<p>我见她愣神儿，便逗她。</p>
<p>“姑娘，从刚才你的手就不老实，请你尊重点儿！”</p>
<p>周围离得近的几个人吓一跳，小丽也一脸骇然，“蛤？”</p>
<p>我做作的哼一声，像极了村头的李寡妇。</p>
<p>“哎——呀？”小丽发狠道，“姐摸你一下怎么了？”说着又摸我下巴一下，小手又快又滑溜。</p>
<p>“你再这样我就生气了！”我把脸一拉。</p>
<p>小丽毕竟脑子不够使，这会儿也转不过来，见我一直演，她自己倒没了词儿。傻乎乎楞在那里。</p>
<p>周围有人轻声叨叨。小丽的脸色急转直下，泪点说来就来，几秒钟的时间眼圈就憋得红了。我一看再闹下去就出事了，一把搂住她的腰抱住，在拥挤的公交上。</p>
<p>“还跑这么远不？”我柔声问她。</p>
<p>“臭小祥！臭小祥！”她在我怀里，极低的声音，不断锤我胸口。我就这样抱着她，在别人的指指点点中，直到下车。</p>
<p>在路口，我要去商场，小丽要去人才市场。</p>
<p>我俩说话的声音被呼啸而过的车辆卷走不少，路面是雪水与泥巴被压过的嘈杂，四下都是小水洼，不时被迅速溅起飞花。</p>
<p>我们的争执只用了不到一分钟，起先小丽还想用猜拳定胜负，我说“跟我走，”她就乖乖跟来了。</p>
<p>到那个鞋店，却找不到那双鞋子。</p>
<p>服务员用近似台湾腔调的普通话委婉的说，“对不起先生，您说的那款已经下架了，现在有冬季新款，您可以带这位女士试试。”</p>
<p>我牵着小丽的手，在这间装修典雅的店里，一双鞋子一双鞋子的看。</p>
<p>我看价码，小丽看我。</p>
<p>我攒够了钱，戒了三个礼拜的烟。可我只有三百多块，而冬季新款比那双我们看中的要贵不少。</p>
<p>有的鞋子明明很普通，可因为系出名门，便随意标上一串数字来彰显尊贵；而稍微价格正常点的，也远超我的消费范围。我唯一能够买的起的，已经被这间风云变幻的店，不知淘汰到哪里去了。</p>
<p>我就这样牵着小丽，走走停停，像是中了毒一样，自尊一点一点被消耗殆尽。</p>
<p>在这间店里，服务员穿着统一的工装，像写字楼里的白领，因为阅人无数，很快便看出我的家底。</p>
<p>我硬着头皮，一步一挪在她们的目光下，希望可以找到一双拯救我的鞋子，让小丽穿上她，快点带我离开这个地方。</p>
<p>我和小丽本来是极其普通的穿着，但是在这店里呆的越久，越显得突兀。</p>
<p>小丽则始终不说一句话，默默的跟着我走，她的手心里一片潮湿，顺着纹路，一直暖着我的心，给我最后一丁点儿勇气。</p>
<p>快要走完一圈时，小丽轻盈的转到我前面，娴熟的摘下一只鞋子，我看标签，是我手里的三倍有余。</p>
<p>“麻烦您，这款拿双三十八码的。”小丽微笑道。</p>
<p>服务员将信将疑的审视我们，还是去了。</p>
<p>我们依旧不说话，小丽坐在宽大的矮脚 我是畜牲， 我吧上，优雅的架腿而坐，跷起一脚，缓缓的褪下鞋子，留半只脚荡在鞋桶里。</p>
<p>服务员把鞋拿来，小丽换上一只，气势登时而起。</p>
<p>她很老练的试了试，简略指出几项设计上的硬伤，惋惜道，“走吧小祥，”我好像在深渊里见到了希望的光。</p>
<p>“这里没姐喜欢的款，我们去别家看看。”</p>
<p>出了店，我犹自惊魂未定，说不清是羞辱还是难过，交织在一起，不说话。</p>
<p>小丽挽着我，手指陷进我臂弯褶皱里。</p>
<p>走不多远，遇到一个职校同学，带着她村容土貌的女朋友，狭路相逢。</p>
<p>“小祥？交女朋友了啊？一夏天没见你，原来专心陪嫂子啊！”</p>
<p>小丽微笑着对他俩点头，而他女朋友好像有些敌对的目光，不断扫量着小丽，好像小丽的出现，阻碍了她这道亮丽风景。</p>
<p>“找到工作了吗？”我想把话题岔开，毕竟他也常去那地方，生怕被他认出来，恍然间手心里已攥出了汗，被凉风一带，冰凉的冷。</p>
<p>“过了年儿再说吧！你和嫂子什么时候认识的啊？”</p>
<p>“有些时候了，近来忙着找工作，忘了给你们介绍。”</p>
<p>“我说呢！找一这么漂亮的媳妇儿，自然是无暇跟我们瞎混了是吧！”说着他自娱自乐的笑，引得他身边的村姑更是不满。</p>
<p>这时小丽腾出一只手去，轻轻托起村姑胸前挂的一串饰品，像是那种在公园打气球送的赠品一样，在这种阴暗的冬季里，都能闪闪发光的塑料货。</p>
<p>“哎呀，这个水晶真好看！”小丽热切道，转过来对我说，“小祥我也要！”</p>
<p>村姑的脸立即回光返照，绽放出和谐美满的笑容，悉心指导我们在哪条巷子哪间女生店可以买到，小丽一脸诚恳的不住点头，我意外的发现小丽其实挺聪明的。</p>
<p>最后我们皆大欢喜，纷纷与对方依依惜别。甚至过了马路，还意犹未尽的挥挥手。方不甘远去。</p>
<p>“别回家了，直接去外交部吧，巴以和平全靠你了。”</p>
<p>“女孩子嘛，总喜欢听些好话的——小祥以后要是追妹妹，记得嘴巴要甜啊！”</p>
<p>我不吭声，小丽便又怕了。</p>
<p>“你想买那双鞋子给我吗？”小丽试探问。</p>
<p>我又一阵委屈。</p>
<p>这几个礼拜戒烟后，做什么都无法专心，时不时就从嘴里吐出一口气，嘶嘶被鼻子吸进去。吃饭后，上厕所时，做完后，最可怕是大片大片的空闲时间，被烟雾在口腔中缓冲的记忆一波一波袭来，无论做任何事都失去了原本的欢愉。</p>
<p>结果费尽心机的一番苦心，失败了不说，还差点被高贵的灼死。</p>
<p>“是这样的，戒了三个礼拜的烟，攒了三百块，本想在圣诞节送你的，看来等不到了，没想到今天也……”</p>
<p>说着，就觉得这座城市离我远了起来，四周的景与人都急速扩大，我终于卑微成一粒尘土，可以不顾及旁人的眼光，没种的哭了出来。</p>
<p>婚纱照拿出来了。相框里两个人神情机械而刻板，陌生的像电梯里不得不一起同行的人，终点一到，立即各奔东西。</p>
<p>小张让我把它挂起来，便不再过问。此后几年，她无数次在这照片下经过，却从未停下来看上一眼。</p>
<p>婚期定在了公历三月三号，巧的是，这天是小丽生日。</p>
<p>这时去小张家吃饭，早已习以为常了，大家各吃各的，再没人想做一家之主，因为小张就在那里。谁也无法逾越她的权威。</p>
<p>小张妈妈给小张准备了一张十万的存折，既是嫁妆，又是心意，不带车也不买新房家电，一切尽在不言中。</p>
<p>有天小张在电脑前看汽车网站，看得我一阵犯怵。小张也不理我，过了几天，直接问我家里要了提车的钱，跟我妈两人开了个小polo回来，天窗自动挡，黄色的。</p>
<p>“说好的宝马呢？”我喜不自胜。</p>
<p>“模样差不多。”小张语气波澜不惊，哼着儿歌。</p>
<p>“天窗好小啊，还不如不要呢。”</p>
<p>小张瞪我，“你要是不吸烟，我这就调了去。”</p>
<p>我就不敢吱声了。</p>
<p>新房还没盖好，我们便先结在老房子这里。</p>
<p>小张对大人和对我是两个概念，太会装好孩子了，小时候一定是班长。有时候明明是小张在凶我，我妈听到了，也要过来帮小张再凶我几句。</p>
<p>“你给我妈吃什么了？”</p>
<p>“什么吃什么了？”</p>
<p>“我妈怎么那么向着你？”</p>
<p>“哦，我把存折交给阿姨了。”</p>
<p>“你妈给你的存折？”</p>
<p>“是啊。”</p>
<p>“为什么啊？”</p>
<p>“不为什么啊，有什么好奇怪的？”</p>
<p>“那可是你的嫁妆啊。”</p>
<p>“所以我才有权利支配啊。”</p>
<p>“留着咱俩存起来就好啊，我家里又不缺钱，咱们刚结婚，以后再添了孩子，日子很难过的……”</p>
<p>“烦不烦啊，给了就是给了，你不准去要！一是我们现在住老人的房子，让大人高兴也是应该；二来你家就你一人，将来不都是我们的，你怎么这么没出息！”</p>
<p>我哑口无言，直勾勾盯着小张看。</p>
<p>“干嘛？不服啊？”</p>
<p>“服，服！”说着我小跑过去，柔情蜜意的揽住她，“这么晚了，一起去车里做一做吧！”</p>
<p>“冷死了，不要！”</p>
<p>“可以开空调啊……”</p>
<p>“不要，多费油！”</p>
<p>……</p>
<p>“以后我要有了钱，就去找你好不好？”</p>
<p>“不好。”</p>
<p>“为什么？”</p>
<p>“那时候小祥肯定一把年纪了，而且老婆孩子一大把。”</p>
<p>“不会的，我会为你守身如玉！”</p>
<p>“守多久呀？”</p>
<p>“在下次见到你之前！”</p>
<p>“要是一直见不到呢？”</p>
<p>“那就一直守！”</p>
<p>“一直手啊？哈哈——”</p>
<p>“有笑点吗？”</p>
<p>“你说你一直手啊——诺，像这样——”</p>
<p>“你这笨蛋！我说的是守护的守！”</p>
<p>“哈哈——”</p>
<p>“你别笑了，亏你还有这心情。”</p>
<p>“因为哭了太多次了，觉得眼泪都好像流干了。一天比一天短下去，反而难过不起来了，每一次见到小祥——应该说每一眼，都非常 ”</p>
<p>“那我以后要是想你，怎么办？”</p>
<p>“找一栋高楼，在楼顶对着南方喊呀。”</p>
<p>“哼，你就不怕我跳下去？”</p>
<p>“小祥！你不要总是乱说话，这样不好的！”</p>
<p>“生气了？”</p>
<p>“有点。”</p>
<p>“那我以后不说便是。”</p>
<p>“你得答应我。”</p>
<p>“我答应你啊！”</p>
<p>“答应我以后都不会随便咒自己！”</p>
<p>“我答应你以后都不会随便咒自己！”</p>
<p>“小祥真好！”</p>
<p>……</p>
<p>……</p>
<p>“诶，我是不是很小啊？”</p>
<p>“蛤？”</p>
<p>“我弟弟啊！？”</p>
<p>“还好呀，为什么突然这么问？”</p>
<p>“一直很好奇而已……我又没见过别人硬起来什么样子。”</p>
<p>“——但是小祥是最好的！”</p>
<p>“仅此而已？”</p>
<p>“仅此而已！”</p>
<p>“到了家里，电话也不能打吗？”</p>
<p>“唔……最好不要。”</p>
<p>“怕我扰乱你的平静生活？”</p>
<p>“应该是我不想扰乱你的生活小祥！你还这么年轻，将来应该和正常的男孩子一样，穿西装打领带，做事风风火火的，而不是整天想一些有的没的。”</p>
<p>“再也无法联系了吗？”</p>
<p>“我会换掉手机，但是小祥的号码，无论何时，我都能随口背出来——我若是忍不住，便去公话给你打长途，好不好？”</p>
<p>“你会不会忍不住？”</p>
<p>“尽力而为！”</p>
<p>“一想到还有许许多多事情没来得及与你一起做，就难过的想哭。你要是早点告诉我你会在冬天离开，那么我们就可以提前准备了啊！”</p>
<p>“可是总有遗憾是无法弥补的呀！”</p>
<p>“能多补一些，就多补一些啊！”</p>
<p>“比如划船呀，唱歌呀，或者去吃烧烤或者郊游什么的，在我看来只不过是生活的一部分，都是可有可无的，对我没什么吸引力——唯一在乎的，只是能再小祥身边就好，这样子其他的事情就都有了意义——所以，‘与小祥在一起’，就是我最想做的事，其他的，不用一直附加的，反而会觉得累。”</p>
<p>“你这样说，我又会想更多没有做的，比如像我们这样说话都很少，除了吃饭，就是做那个。”</p>
<p>“你喜欢就好啊！”</p>
<p>“那你呢？”</p>
<p>“你喜欢的，就是我喜欢的啊！”</p>
<p>婚期前几天，小张匆匆去了趟外地。我问她，她说去了鼓浪屿，还了个心愿。</p>
<p>没有车票也没有相片。小张一如既往的高深莫测，像一座小型图书馆，蕴藏着不计其数的已落尘封的故事。</p>
<p>出门前，我给小张发短信，“一会儿盘头，我去陪你啊？”</p>
<p>小张很快回，“不用，明天事多，你睡觉。”</p>
<p>“一辈子就这一次，我想尽量做的圆满些。”</p>
<p>“真有心就把以后的日子过圆满，形式主义大可不必。”</p>
<p>“冷血鬼！”</p>
<p>“滚！”</p>
<p>不少亲戚朋友在房间里贴着拉花和喜字，我爸妈喜气洋洋的迎来送往，见我换衣服出门，便问，我答，“我去陪小张盘头，明天一早就回来。”</p>
<p>“新娘盘头不用男方去啊？！”</p>
<p>“一辈子就这一次，我想以后过的圆满些。”</p>
<p>“这孩子，媳妇迷！”</p>
<p>打了个车，当年小丽工作的店早已不见了，便去了就近一家。</p>
<p>时间也就是这么快，当年我来时，服务生居高临下的眼神，怀疑着我这样不学好的毛头小子是否可以拿足了钱，一双双诡异的眼神，时刻都有见我没钱暴打一顿的样子。</p>
<p>而如今，迎面一个约莫二十岁的小伙子，虎头虎脑对我喊，“哥！来啦？！”继而热情的与我带路，服务周到又麻利。</p>
<p>也不知是时代进步了，还是别的什么。</p>
<p>“看您身体这么好，叫两个怎么样？”小伙子对我挤挤眼，三言两语就挤兑的我要多花一倍的钱。</p>
<p>“有叫丽丽的吗？我不知道牌号，有的话，叫个南方的过来。”</p>
<p>“几个？”</p>
<p>“一个，我外强中干。”</p>
<p>“哥您谦虚！稍等就来！”说着，一阵风似的跑了。</p>
<p>这屋里还是没跟上历史的脚步，依旧老树枯鸦，与浴场外面金碧辉煌的大气景象截然相反，处处显得外宽内忌，一如我生活的地方。</p>
<p>或许世道大多如此。</p>
<p>烟盒里还剩最后一根，晃起来空荡荡的回响。怕等得久了，便先点上了。</p>
<p>给小张发短信，“我决定为了你戒烟！”</p>
<p>“戒烟是为了你自己啊！”</p>
<p>“那我不戒了。”</p>
<p>小张就没了音讯，她显然不信。门被推开，闯进来一个年轻女孩，模样甚是俊俏。</p>
<p>“老板您叫我？”</p>
<p>“你叫丽丽？”</p>
<p>“是啊！”</p>
<p>“多大了？”</p>
<p>“十七！”</p>
<p>“我不信。”</p>
<p>“不信您试试？”</p>
<p>而后在我新婚前一晚，我护了人生中第二个失足。恰好她也叫小丽，所以严格意义来说，我护过的失足，只有小丽。</p>
<p>此刻我的未婚妻正在婚纱店盘头做嫁妆，而我赤身**与小丽缠抵在一起。时而想起，罪恶的快感如电流走过全身。</p>
<p>灯光昏黄厚重，沉沉打在我俩身上。我挪了挪角度，看到小树苗进出在那个地方，就像一根羸弱的羊鞭摆在没有火的木炭上烧烤。</p>
<p>“你还有烟没？”我问她。</p>
<p>“没啊！”女孩专心致志的收拾自己的东西，像愉悦的劳动人民，收割好了麦子，开心的回家过年。</p>
<p>“做多久了呀？”</p>
<p>“几个月呀。”女孩套上衣服，麻利又迅速，对我莞尔一笑，“老板下次来再叫我呀，我带个姐妹儿一起伺候你！”</p>
<p>“不陪我坐会儿吗？”</p>
<p>“下次啦！”说完，带上了门，把我独自留在昏暗的房里。</p>
<p>我百无聊赖，躺在床上看手机。</p>
<p>小丽的□□头像是蓝色头发的系统头像，从来没有亮过。我怀疑她是不是忘记了怎么上□□，又或者忘了号码或者密码。</p>
<p>可是她的签名改成了，“小丽永远爱小祥。”</p>
<p>是在给她申请完□□的第二天早上，她自己跑去改的。</p>
<p>这么多年，也是不经意的就过去了。小丽的名字始终像盘根错节的植物，扎进我的心里。可随着时间的推移，我只能隐约拼凑起小丽的音容笑貌，可是很多次在梦中，我都再也看不清楚她的脸。</p>
<p>这才发现，我们连一张合影都没有。在一起只顾着吃饭和上床，青春是来不及享受便开始缅怀的经历，这过程全部都是暴走的性欲与食欲。</p>
<p>刚买电脑那几年，给小丽留言是我每天必备的工作。我对她寒暄，跟她嬉笑，时不时凶她一凶，很少眼泪鼻涕的求她回来。</p>
<p>小丽现在，孩子应该都很大了吧。或许会像小丽一样，有雪白的皮肤黑亮的头发，健硕又温柔。我要是抱他，他应该也会用好听的普通话问，“叔叔，你是谁呀？”</p>
<p>可能小丽也胖了，至少不会太走样。每天在她身上践踏的汉子，应该是皮肤黑溜溜的农村人吧？听说有点关系，难不成会是小县城里肥头大耳的小公务员？只见他在小丽身上动不几下，就交了枪，气喘吁吁的红了脸，像我第一次见小丽时一样——而小丽也温柔安慰他，两人说着说着，便笑了。</p>
<p>时间过去了那么久，我根本都不会哭了。“像个男人一点！”小丽的话时常在心底响起，在我每一个撑不下去的瞬间。</p>
<p>小丽走的那天我也没哭，像终年笼罩在这个城市上空的薄雾，揪心不止。</p>
<p>在候车室，小丽买了本杂志，准备路上看。我坐在她旁边，看守着她的大包小包。</p>
<p>小丽异常的冷淡，看得出来装的也很勉强。</p>
<p>她随手翻书看扉页，忽然对我说，</p>
<p>“小祥你看，这首歌我会唱诶！我唱给你听好不？”</p>
<p>我看，是杂志的最后一页，印着通俗歌曲和简谱，歌名叫《风筝》，歌手是孙燕姿。</p>
<p>在人声鼎沸的火车站里，小丽在我耳边轻声浅唱，一如她每日在我枕边轻轻的喘息。</p>
<p>仿佛世间只剩下我们二人，音符错落有致的跳跃着，句句伤神。</p>
<p>我只盼时间过的再慢点，若洪荒仍有主管，请将我们永远抛弃。</p>
<p>我送她上车，安顿好，怕过路车走的急，便下去在月台看她。</p>
<p>隔着模糊的车窗，小丽的脸就此在记忆里道别，从此再无音讯。</p>
<p>半夜还是去陪了小张，虽被她责怪，但看得出她蛮开心。</p>
<p>天快光时，我们坐不同的车分头回家。几个小时后，在乱哄哄的喝彩中，我被司仪鼓励向小张表白。</p>
<p>小张的婚纱是影楼租来的，在镁光灯下有些黯淡。她依旧挂着不冷不热的笑容，宛如这个社会精心培育的淑女一般，亭亭玉立的站在我的面前。</p>
<p>在我遇到小丽之前，小张这样子的女生，一定是我心目中的完美女神，当时若知此日，定死而无憾矣。</p>
<p>可小丽偏偏非要给我打上一枚烙印，像军荼利养的孔雀王，让我懵懂之年遇到极限的经历，让我而后的日子都成了废墟。</p>
<p>塞翁失马，安知非福？</p>
<p>若我可以一直普普通通的活过来，那么今天，我一定是世界上最幸福的人——忽然间好像明白了小张那不屑的笑，她似乎在说，“你这样的男人，能娶到我，不是天大的幸运吗？”</p>
<p>是的，是的，以前来说的话，是的。</p>
<p>真的，对不起。</p>
<p>——台下的人起哄的热切，瓜子和糖块时不时丢来。我看着小张，她也看我。她的眼神很古怪，就像前几天她收拾屋子时，随手扔了我的那件T恤。</p>
<p>那是我们第一次吵架。换句话说，那是我第一次对小张反抗，甚至动怒。小张自然不吃我这一套，一个电话弄得两边家里鸡犬不宁，四个老人轮流给我道歉疏导，谁也不知道扔了件破衣服，怎么就这么大仇了？</p>
<p>小张心里一定清明的很，那件T恤几乎洗得破了，纤维与棉料近乎透明，还藏着不扔，不是信物，又是何物？</p>
<p>她轻而易举的打碎了我与小丽的来世。</p>
<p>灯光让我有些眼晕，小张的脸看起来更加趾高气扬。</p>
<p>主持人又在催了，逼我说一些我从未说过的话。</p>
<p>小丽结婚时，会听到什么呢？怎样的话就能让她眉眼弯弯了？</p>
<p>“不工作了好吗？”我问小张。</p>
<p>“你养我啊？”小张冷哼。</p>
<p>“我爱你！”我冲口说出这句，小张和主持人都楞了一下，这好像不是电影里的原词。</p>
<p>莫名其妙的桥段还是让观众们沸腾起来，主持人宣布开席，我俩就退了下去。</p>
<p>几个朋友随着我们，去换衣服的路上，准备给包间敬酒。</p>
<p>路过分叉口时，小张落下一步，让过几个伴娘，在我身后道，</p>
<p>“我也爱你啊。”</p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>横亘在人与人之间的鸿沟 ——读《献给阿尔吉侬的花束》</title>
    <url>/blog/2018/08/24/L017-%E6%A8%AA%E4%BA%98%E5%9C%A8%E4%BA%BA%E4%B8%8E%E4%BA%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E9%B8%BF%E6%B2%9F%E2%80%94%E2%80%94%E8%AF%BB%E3%80%8A%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F%E3%80%8B/</url>
    <content><![CDATA[<blockquote>
<p>高二的一个晚自习上随手写的读后感，收作纪念。</p>
</blockquote>
<p>这本书记述了一个人由黑暗中走出，回顾黑暗，审视黑暗，回过头被光明晃得头晕目眩，再一步步挣扎着被拖回黑暗的过程。</p>
<p>这样的一个过程里，处处是对人性的讨论和对生活的假设。生与死，自我欺骗，认知差异，傲慢，自卑，情绪化......如同一条条鸿沟横亘在每一个人中间，人们因此无法相互理解。在我看来，对“理解”的思考，正是全书的主题。</p>
<p>在查理.高登短暂的旅途里，他的每一种状态，他对世界的态度与世界对他的态度，都在或多或少的对某一类特定的状态造成的理解差异做出讨论。最浅显也最主要的，便是对智力造成的差异的探讨，并在此基础上，将理解的差异扩散到了其他层面上。</p>
<p>傲慢和自卑，造就了这个故事里一切的恶意。这两种心理背后共同的根源，是虚荣。虚荣，是对于某种身份认同的渴望，是对一种自己并不具备的品质的伪装。面包店众人和教授对查理的恶意，母亲对查理的逼迫，皆出于此。虚荣，正是造成理解隔阂的一大原因。</p>
<p>造成理解隔阂的另一原因，在于过于的自我与自利，每个人站在自己的立场上，事事由自己出发。他们永远无法理解他人，因为他们从未试图理解他人。</p>
<p>阿尔吉侬，是对消除理解差异的一次失败尝试，而献给他的花束，则是对无法相互理解的人们的悲哀与缅怀。</p>
<p>记得这捧花，不要沉浸在无知的深渊里。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
  </entry>
  <entry>
    <title>仿写：《春赋》</title>
    <url>/blog/2019/08/24/L018-%E4%BB%BF%E5%86%99%E3%80%8A%E6%98%A5%E8%B5%8B%E3%80%8B/</url>
    <content><![CDATA[<blockquote>
<p>大一写作基础课的作业，跟据图片仿写《春赋》，自觉有记念价值。</p>
</blockquote>
<span id="more"></span>
<p>”苔始绿而藏鱼，麦才青而覆雉。吹箫弄玉之台，鸣佩凌波之水。移戚里而家富，入新丰而酒美。石榴聊泛，蒲桃酦醅。芙蓉玉碗，莲子金杯。新芽竹笋，细核杨梅。绿珠捧琴至，文君送酒来。“——《春赋》庾信</p>
<figure>
<img src="https://img.xilong.site/20210824/chunfu.jpg" alt="" /><figcaption>插图</figcaption>
</figure>
<p>雨将霁而飞鸟，雾初散而见叶。青墨泼卷之峰，清平明镜之潭。泛轻舟而神怡，沐清风而凉意。芊竹素洁，张弦入水。拙朴木盏，无文瓷樽。粗茶半两，滚水一杯。沉沉将睡去，鱼儿上钩来。</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>白岛</title>
    <url>/blog/2021/07/17/L013-%E7%99%BD%E5%B2%9B/</url>
    <content><![CDATA[<p>不久以前，这里住着一个女人。但现在没有了，她死了。她是我的女人，名叫白素贞。你听出来了，这是白蛇娘娘的名字。记得刚结婚那阵，老熟人见面就朝我跷大拇指，喊一声：好福气呀！意思是我娶了白蛇娘娘。我自己竟也这样想，如果白素贞在身边，我还故意当着人的面，问她青蛇在哪里，有白蛇就该有青蛇的，“在临安收青儿主仆同走”，戏曲里就这么唱。现在想来，那真是年少轻狂，尽管当时我就早已不再年少。娶了白蛇娘娘有什么值得显摆的？白蛇娘娘是传说，娶了一个传说，我并不因此就成为传说。如果我也成为传说，我就是许仙了。许仙不是我喜欢的人，他长得太白了，比白蛇娘娘还白，以至于我感觉到，白蛇娘娘是嫁给了一个女人。她却要为这个女人丈夫，冒死去盗仙丹，还跟法海斗。她是斗不过法海的，因为法海是真正的男人。小时候看《白蛇传》，我恨过法海，但恨他的唯一理由，是他用雷峰塔镇住的，不是许仙，而是白蛇。他应该把许仙镇住才好。</p>
<p>正如此刻，如果死的是我，不是我的女人白素贞，才好。</p>
<span id="more"></span>
<p>但这只是假设。世间有万般无聊，假设是最无聊的一种。</p>
<p>我的女人白素贞，死了。我要把这事实再陈述一遍。</p>
<p>按事实去生活，才是我应该做的。昨天晚上我就在想，我应该离开这座小岛。小岛上没有别人，只有我和白素贞，那是以前；现在，只有我和白素贞的坟冢。</p>
<p>其实没有坟冢，也没有墓碑。她的墓碑就是一棵树。</p>
<p>我和她认识不满一个月的时候，两人就经常以各种语气说到死亡。那是我们最富激情的话题，一说，她就软了，我呢，就想着对付软的办法。她说，未必还需要想吗？的确，不需要想。在对死亡的言说中，办法早就有了。但我真的像许仙，文弱得像根棉签。她明显不满意了，说，你讲讲你的前世吧。这证明她也想到了许仙。这让我羞愧。我不愿意讲。她说，来世呢？我差点儿就说法海。虽没说出口，她却从我嘴唇颤动的纹路，认出了法海两个字。那是我的仇人，她说。说话间亢奋起来，像一首歌唱到高音，运足了气，浑身抖。幸亏我早有准备，不然就被颠下了床。有时候，仇人真是个好东西。我说，你的仇人也是我的仇人。言不由衷吧？她刮一下我的鼻子，突然间有了厌倦，把我推开，说，不说别人了，我是白素贞，不是白蛇，你是朱家田，不是许仙，法海嘛……她停下来，像陷入了沉思。在远远近近的时光里，白蛇和许仙都是偶然，法海却是必然的，我懂，她也懂。但我们并不畏惧。我们连死都不畏惧。她从沉思里回过神，又缠住我，问我死后想怎么处理。我说随便你，反正我比你死得早，我看过你的手相，我死过后，你还要活三十年。她把手举起来，问哪只手？我说两只手都看，高手除看手掌，还看手背。她把手藏进被窝，说如果真是那样，我就把手剁了，让你看不见，然后逼着我承认她比我先死。她说我死过后，你把我埋在一棵树下，那棵树要好看，不，树都好看，但也不是随便哪棵树，那棵树下要干净，你听见了吗？</p>
<p>那时候我们住在城市。</p>
<p>我至今说不清是不是要为她找一棵干净的树，才来这座小岛的。小岛没有名字，我为它取了名：清溪岛。是因为岛外的河流叫清溪河。这是一条荒河，上下几十里没有人家，我跟白素贞，是从县城包了快艇来的，带着弯刀、斧头、锄头、木锯和种子，还有可供半年的食物以及一切生活所需。本以为还要自己动手砌房子，结果不必，野藤、杂树和乱草的深处，有间木屋，木屋低矮，却很结实，就像一个人躺着比站着更不容易倒下一样。白素贞大声喊：有人吗？先朝屋里喊，然后朝四面八方喊。我说别喊了，你没见那屋里都长了树？门开着，屋子正中长了棵杏树，贴地生了铁线草。毕竟缺少阳光和雨水，草长得像上了年纪人的头发，稀稀拉拉，还泛白，杏树虽有半人高，叶片却比指甲盖还小。两人进屋。两人都是先出左脚，再出右脚，步调一致，连步幅也一致。而今回忆起来，那真是意味深长。我们不怕死，却怕在陌生的地界里活着。共同的恐惧，把两个人变成了一个人。</p>
<p>除了小树和杂草，只在傍东墙的地方横了两块不足尺高的条石，条石上铺着木板，算是床。床上空空荡荡，但我们还是来回转了好几圈，把每个角落都看仔细。万一主人就躲在那里呢？确认之后，才出门去，拿来锄头锄草。草皮底下是黑泥，足以说明旧主人曾在这屋子里生活了许多个年头。铲罢草，再挖树，但白素贞不让挖。她说那年我去云南，在怒江边见到一户人家，院子紧傍山崖，就是说，山崖是院子的一部分，而山崖上是挂瀑布，几十米高，他们能在家里养瀑布，我们养棵树也不行？她两只手把树梢虚虚地握住，眼神迷离，是一种会飞却不知道飞向何方的眼神。那时候我就该看出些什么，但我太兴奋了，草一除，别人的房间就变成了我们的房间。听了她的话，我只是哈哈笑，说随便你，只要你不怕它可怜。可怜这个词把她打动了，但她并没改变主意。她对树说，我们会想办法的。然后跟我一道，去抬了块扁平的石头进来，将锄松的泥土夯实。</p>
<p>然后我们就在那里住下了，一住三年半。</p>
<p>三年半过后她死了，我也要离开了。</p>
<p>离开的意思，是得有个去处。我的去处就是我的来路，是那座远方的城。白素贞死在冬末，现在已是暮春，春水发过两次，清溪河成了哺乳期的河，胀鼓鼓的，在河上跑的快艇，犁出哗哗的白浪。这条河连接两座县城，但那都不是我的城。我的城在更远的地方。这天早上，我收拾停当，就去河边等着。为了让人注意到我，我抱着白素贞的红色羽绒服，听到山弯那边有响声，就举着羽绒服挥舞，还高声吼叫。我在那里坐了一天，吼了一天，手也挥了一天，如果手臂上长着果子，早就摇得一干二净了。但没有人理我。快艇大都是包船，就像三年半以前我和白素贞来这座小岛时一样，即使没人包，也要等人坐满了才开，总之中途是不会停的。以前有竹筏、木筏、独木舟、乌篷船，后来有了汽劃子，现在连汽划子也不见了踪影，更别说竹木筏子。它们把自己让给了速度。我似乎没有离开的机会了。</p>
<p>一个人在这里生活，我从来没有想过。我是跟白素贞来的，也是因为白素贞来的，可是白素贞死了。踏着走一步暗一层的暮色，从河畔回到小屋时，我突然觉得，白素贞是故意死的。她似乎早就感觉到我想离开小岛，而她不愿离开，就干脆死在这里。</p>
<p>她死的前一天，我们还没起床，阳光就落进了屋子。冬天的阳光，是另一种质地的雪花，比雪花还冷。她说，冷。我就抱住她。可许多时候，两个人的温暖比不上独自的温暖。她磕着牙，说，反正没事，我们去爬山吧。半岛背后是山，是它跟大陆唯一的连接。山很高，抬了头望，望到了天，却望不到山峰。我们煞有介事地穿了运动鞋出门。山野木叶尽脱，光秃秃的树身，画出迷宫似的路。她在褐色的树干间绕来绕去，真像迷住了的样子，其实是想表明，天底下的迷宫，都只为目标设置，把目标抛开，迷宫也就自动解体。我们是来爬山的，可山峰并不成为我们的目标，因此我们是轻松的，也是自由的。青冈树叶铺了厚厚一层，踩上去，哗！溜出老远。败叶是行进在山野间的船。她说，河里可以逆水行舟，山里为什么不能？说罢踩住败叶，往山上滑，可怎么也滑不动，那模样看上去很傻。可我比她更傻，我说，逆水行舟需要动力，没有机器动力的时候就靠人拉，我外公住在瞿塘峡，我小时候到外公家去，经常看到那些光着屁股的纤夫；我外公年轻时候，也做过好几年纤夫，拉纤时也是那样光着屁股。她弯腰抓起一把叶子，奓着手往山上跑，说自己是个纤夫，可惜太冷了，不能光着屁股。我说，试一试，说不定没那么冷。这句玩笑话，她却当了真。她站在高处，扶住一棵遍身鳞甲的老松说，你先脱。我知道自己说错话了，但收不回来。我是不能违拗她的，这是我们关系的模式，也是我们婚姻的秘密。</p>
<p>穿着衣服的时候，没感觉到一丝风，衣服一脱，风就来了，像闻到香气的蜜蜂。这比喻把我自己美化了。我已不再年轻，虽不老，但也不年轻。她年轻，而且美。那比喻是属于她的，但暂时还不属于她。我对她说，别脱，冷死了。确实冷，风和阳光都成了在身上甩打的鞭子，带着芒刺。她说，你跑吧，跑起来就暖和了。也只能这样。当我气喘吁吁地越过她，跑上一块黑石头，回头见她跟了上来。她比我脱得更彻底，我穿着鞋袜，她啥都没穿。光脚更滑，她只能四肢着地，像个动物。一只美丽的动物。黑黝黝的头发跑在她的前面，挡住了她的脸。我去接她，确切地说，我是想回去穿上衣服，她却不让。你站着别动！她这样命令。我对着冰片似的太阳，不知羞耻地蹦跳。河似乎比太阳更遥远，偶有一艘快艇呼啸而过，快艇激起的冷气和水花，却子弹般朝我射来。</p>
<p>回去的路上她很沮丧，因为我没有满足她。她想站在那块黑石头上做爱，我实在不能满足她。血液想离太阳更近一点，都跑到我头上，我只有头是热的，别处都麻木得失去了知觉。朱家田，你对我不好，她说。听了这话，我承认我很愤怒。承认之后，才发现自己一直很愤怒。玩得太过火了，玩得把自己身体都丢了。这是要付出代价的。</p>
<p>我付出的代价过于沉重，白素贞死了。我说过，那是在第二天。其实当天还不怎么看得出来。她沮丧过后，说我对她不好过后，很快释然，回到屋子，暖气一扑，她就打喷嚏，接着喊冷。火是生上的，添一笼干枝进去，打瞌睡的火苗便炸开，毕剥乱响。我们并排站着，弓着腰，几乎架到火上。这姿势跟裸身于冬天的山野一样可笑。于是她笑了，嘴微微翕开，舌头顶住牙齿。</p>
<p>谁知道她第二天会永远地离开我呢。</p>
<p>她离开了，半岛上只剩我一个人了。</p>
<p>一个人的日子我过了整整一个季度。如果这个季度是夏天，或者秋天，甚至冬天，大概都会好受些，可偏偏是春天。春天是让人愁的季节。我是要离开的，却找不到离开的办法。连续四天，我去河边拦快艇，快艇却把我当成了半岛上的一块泥土。快艇是水上的生物，不喜欢泥土，我也不喜欢泥土。不喜欢泥土的人怎么可以跟荒野打交道。如果不是白素贞，我怎么可能走出城市，到这与世隔绝的地界上来。我是在责怪她了。阳光落得像雪花的那天，也就是她死的前一天，我的愤怒已经苏醒。如果给愤怒做个注释，应该是这样的：颜色，深黑；气味，辛辣；性质，剧毒。如此说来，白素贞是我害死的。我没有理由去責怪一个被我害死的人。</p>
<p>每次责怪她时，我都觉得自己没有理由。这不是好事情，她的任性就是这样惯出来的。</p>
<p>她以前不是这样。</p>
<p>不过她以前究竟是怎样，我也说不清。</p>
<p>我碰见她时，是在北极村——北极村的黑夜。当时我是山城一家地理杂志的记者，接到一个任务，采写从漠河直至广州的秋天。九月下旬，我从山城出发，飞往哈尔滨。那天山城是三十六摄氏度，到哈尔滨就十五摄氏度了，但我并不打算添置衣物。反正是从南往北走，且不会在一个地方久待。第二天到了漠河，下车吃了顿饭，立即租车前往北极村。大雪在两天前下过，茫茫雪尘里，大兴安岭很有节制地起伏着。乌鸦蹲在树梢，像是长在上面的。它是在炮制冲突。冲突就是互动，黑与白的互动，美与丑的互动。这是天地间显而易见却又守口如瓶的秘密。这秘密是在提醒我，我也将有一场互动。但我没意识到，轻率地放过了。到北极村天就黑透了，而且停电。我冒着风寒摸到一户农家，这家人做着旅游生意，门前挂着“鹿祥园农家乐”的牌子。这是我第二天才知道的，当天夜间我看不见牌子，只担心不收留我。我快冻僵了。冻还是其次，主要是对广大无边的黑和荒漠似的静，非常恐惧。主人鹿祥园听见有客人上门，划根火柴，把黑暗灼出一个窟窿，接着点上蜡烛，叫他儿子生火烧炕。他儿子是个快进中年的侏儒，抱来柴块，却怎么也点不燃。他手里拿着明子，很容易就能点燃的，可就是不行。过了一会儿，鹿祥园从黑暗的深处端出一钵挂面，热气腾腾地放在桌上，说，只能将就了。我想他咋这么好呢，原来只要住在这里，就包吃，吃好吃坏，全凭主人的良心。他拿来两副碗筷，喊一声：吃了。一个女子便走出来，披散着长发，鲜红的羽绒服把蜡烛的光焰染成了粉色。她坐下就往自己碗里挑面。我初以为是鹿祥园的家人，是让我跟他家人同吃，可鹿祥园和他那个侏儒儿子都隐到了暗处。于是我决定等一等。她低着头只管吃，发丝帘子一样把她和我隔开。你不吃啊？她突然这样问，头发后面的眼睛闪闪发光。</p>
<p>我们就这样认识了。</p>
<p>我叫白素贞，她说。</p>
<p>这名字听上去很耳熟，但我当时并没想到白蛇娘娘，更没想到我们会成为夫妻。看样子，她不过二十二三岁，而我，再过几天就满三十九了。她说她是来旅游的，没有同伴，就一个人。这让我感到亲切。在这个陌生的地界里，我孤独，她也是。我们两个陌生的人，有了一条共同的通道，那条通道里散发出同样的气味儿。我们谈了很久，直到那支烛光在残蜡里蹦一下，又蹦一下，警告说它马上就要熄灭了。</p>
<p>第二天，我一大早起床，到黑龙江边，照了几张雾锁江流的照片，便往田野里去。当地人把田野叫大地，哪怕只是一小块田，也叫大地。这是东北辽阔的疆土赋予了他们修辞的辽阔。大地空了，蓝莓已经下树，大豆早已收割，只有一些像害着病的山丁子，蔫蔫地挂在枝条上，供雀鸟们吃。我是南方人，一个南方人对季节慢条斯理的应对，就这样轻易错过了北方的秋天。没有庄稼的秋天，便少了姿态，显得单薄。从完成任务的角度讲，我是白跑了。但既然来了，我该去最北点看看。没走几步，是一尊雕像，底座上文字漫漶，大意是说，某年某月某日黑龙江发大水，淹了北极村，一俄罗斯上尉为救中国百姓，牺牲在波涛里。正准备离开，雕像后转出来一个人。是她，白素贞。依然是那件红色羽绒服，脖子上缠了白围巾。早啊！我说。她不回我的问候，只扶住雕像的鼻子感叹：好帅！之后望着对岸的俄罗斯。江雾低垂，视线稍稍爬一点坡，就能爬到俄罗斯的土地，那边有积木似的村庄，有缓缓移动的物体，是羊，或者是人，或者是人赶着羊。我沿着马路朝前走。马路上晒着燕麦，昨夜下过雨雪，燕麦上搭了层薄膜。有辆车停在路边，我刚靠近，车门猛然推开：要进屋看看纪念品吗？是个女人，她的屋就在马路里侧。我搖摇手，车门又砰的一声关上了。我向右拐上栈道。栈道两旁，狭叶荨麻和蚊子草扫着裤腿。我只穿着单裤，晨霜仿佛将我的单裤剥去，只剩了两条光腿，草叶每扫一下，我的腿上就被寒气割一刀。</p>
<p>你昨天不是说要去看庄稼吗？白素贞的声音从背后追来。</p>
<p>说不清为什么，我知道她会追来。我站下等她，说，你没看见那边？那边的大地上，有个辨不出年龄的男人在往一匹马背上放东西，有铺盖、沙发、脸盆，还有拆下的帐篷。他是庄稼看守人，现在庄稼收了，他该回家去了。白素贞走到我身边，撇撇嘴：庄稼根本不能成为季节的标志，树才是，庄稼播种有早有迟，而树一直长在那里。</p>
<p>那时候她就提到了树。</p>
<p>她是一个没有目的的人，这一点我很快就发现了。我走，她也走，我停，她也停，于是我们一同走，一同停。只有一次例外，当我停在一块立着的石头前，她把石头扫了一眼，直直地往前去了。那石头上用油彩写着几个字：“我找到北了！”我为这石头照了张相，跟她去了更远处。远处的土塄下，有个回水凼，回水凼里生着杂木，杂木半个身子没于寒水，露出的部分，枝条细瘦，面容苍老，我想它们是被冻老的。树跟人一样，最怕的有两样东西，一是饿，二是冷，所以才用饥寒交迫这样的词语，来形容极致的困境。它们长到那里去，不知道是主动的选择，还是被动地接受，可仔细想想，世间万物，又有多少主动呢？这么一想，我就怜悯那些树了，以至于不愿再多看两眼，就撤身回转。她跟着我回转。走到那块站立的石头前，她问：你需要在这里照张相吗？我帮你照。我说我不需要，我只为石头照一张就好了，这样可以帮助我记忆，便于回去写文章，还可以拿它向领导交差，表明我确实到过这些地方。她古怪地笑了一下。我说你站过去，我为你照一张。她脸一沉：我才不照！那样子像是我得罪了她。随后她又鄙夷地说，留给那些自以为找到北的人来照吧。</p>
<p>幸好我没让她给我照。</p>
<p>可是我为什么不可以照呢？为什么要以她的标准为标准呢？</p>
<p>对自己的不满，破坏了我的心情。然而我怎么也没想到，这种不满将一直持续。</p>
<p>隐隐地，我想摆脱她。</p>
<p>但我走，她也走，我停，她也停。午饭后，当我租车出北极村，已坐上副驾，她背着双肩包飞跑过来，敲着窗子。我把窗子摇下二指宽，她歪着头说，如果你不嫌挤。</p>
<p>后排是空的，本来就不挤。</p>
<p>她兴致勃勃地，上车就讲趣闻，说大兴安岭的豆荚，出苗后一个晚上就牵藤，牵了藤立即就得搭架子，否则第二天就到处乱窜；搭架子的同时，花就开了。它清楚自己的时间不多，不抓紧来不及，植物比人更知道自己的天命。因这缘故，外地种子不能进东北，它们懒洋洋的，还没长成，就被突降的霜期斩了头。我不喜欢那种急急慌慌，她说，我喜欢石头，也喜欢树，石头和树都是缓慢的生命。</p>
<p>车行至一条黑土隆起的大沟旁，她问我要不要下去看看，说这里叫胭脂沟，并给我讲胭脂沟的来历。司机也跟着鼓动我。这一带是他家乡，他热爱他的家乡。司机把车停了，我跟她去往林木深处，她弯腰把野草刨开，竟刨出矮林似的墓碑。这是妓女坟，她说，百多年前，大批淘金者来到胭脂沟，那时候还不叫胭脂沟，叫老金沟，从老金沟淘出的金子，拿去孝敬老佛爷，为老佛爷买上等胭脂，老佛爷感动于那么苦寒之地的人也还想着她，就把老金沟赐名胭脂沟。淘金者都是青壮男人，他们到了胭脂沟，妓女便尾随而至，有中国的，也有俄罗斯的。她在碑上找名字：叶卡捷琳娜，二十一岁；李珍，十八岁；施粉菊，十九岁；任天英，十六岁。还找了许多。碑上的年龄，像一个个感叹号。她们用二十一岁、十九岁、十八岁、十六岁甚至十四岁，来撩动这个世界的悲伤，又用悲伤向世界挑战。她跑开几步，摘来几朵顽强的野花，献在一个连姓氏也没有、只叫了丫丫的墓碑前，自语似的说：做一个妓女，其实蛮好的。妓女太神圣了。她们用污点来诠释神圣。没有污点的神圣不是神圣。又说：妓女大多人生短暂，是因为妓女的命被男人领走了。男人领走了她们的命，可男人并不知道，妓女也不让男人知道，这是妓女的佛性。</p>
<p>这样的话，比如林的墓碑还让我震惊。</p>
<p>我要去海拉尔，须从漠河至加格达奇，再在加格达奇转车。我说我，就是说我们。在加格达奇下车时，是凌晨三点半，去海拉尔的车要早上六点过才开。只能等。冷啊，每一丝风都是杀人风，都能把我肢解。南方的风，与阳光和潮湿为伴，北方的风却是单独存在的，世界上的南方和北方，也不是以纬度划定，而是以风为界。我后悔没多带些衣服，也没去铺子里买，现在想买也没地方。候车厅里不到十个人，其中四个是工作人员。有个背着旅行包的男子，串脸胡乱哄哄的，断了一条腿，大部分时间躲在厕所里抽烟。其实候车厅里也有人抽烟，并没人管，但他偏要躲进厕所去抽，有时笃笃地敲着拐杖，出来接半杯开水。另一个五十多岁的男人，老是对着工作人员笑，不管工作人员在交谈中说没说他，不管说的话值不值得笑，他都笑。这是一个卑微的人，混迹在车站里，打发他的一生。一个女安检员把吃剩一半的苹果给他，他点头哈腰地接过，用门牙轻轻刮，好长时间舍不得吃下去，之后躺在长椅上睡觉，也把苹果放在胸口。</p>
<p>白素贞一直盯住那个人，见他睡了，她说：做一个乞丐，其实蛮好的，乞丐是四方游走的散佛。她说她喜欢从桥底下穿过，桥下两侧，往往打着地铺，聚着乞丐。散佛们惯以桥底为家，这表明他们随时准备上路，同时又是对路的拒绝。有次她看见一个半老乞丐，背靠墩，龇牙咧嘴地在那里撸管。那真是惊心动魄，她说，我想不到乞丐也会撸管，我还以为乞丐的全部使命，就是要吃要喝。可见人的许多使命是被树枝一样剔掉的，比如你——她伸出右手的食指，指着我困倦的眼睛，你以为你的使命是采写从南到北奔跑的秋天，而你心目中的秋天只是田野和庄稼，是庄稼的收割方式，最多再加一点菜蔬啊果子啊湖光山色啊什么的，不知道有一种秋天是用二十一岁写的，是用十六岁甚至十四岁写的。说罢嘻嘻笑。</p>
<p>我和她在北极村认识，但故事的开始，是在莫日格勒河。这我后面会说到。有开始就有结束，正如每一次拥抱注定要松开。我们开始于一条河流，结束于一条河流。</p>
<p>然而，快艇在清溪河上劈波斩浪，驶向我后来命名的清溪岛时，我从没想过那是我们结束的地方。我只把它当成一个驿站，睡上一晚，再换马前行。当然，也可能是后退。可见到那间空无一人的房子，我为什么会来那么大的激情，急迫地要将它变成“我们”的房子，而今已很难说清。我只记得，白素贞喊话，问是否有人，问第一声，我多么希望听到应答，那样，清溪岛就不是我们的，房子也不是我们的，我们就是岛上的客人，客人总不可能住十天半月还不走，更不可能一住三年多——如果白素贞活着，谁知道会不会住上三十年？这让我心里发紧。踏上荒岛的第一步，我就渴望离开了。可是，她问了第二声、第三声，依然无人应答，我又突然感觉获得了巨大的解放。我身上原本挂着沉甸甸的人事，现在都可以扔掉了。不是扔掉，是根本就不存在了。天地刚刚从混沌中分离，世界还是崭新的，我和白素贞，是世上最初的居民，没有同类，没有伤害，没有竞争，而同类、伤害和竞争，正是烦恼的根源，所以，我们也没有烦恼。我们将成为创造者，从此刻起，我们做的每一件事，都具有为野蛮和文明立定边界的意义。正因如此，我把除去杂草也当成伟业。</p>
<p>白素贞的话使我清醒过来，她说怒江边有户人家养着一挂瀑布，她把纷繁的人世又打捞出来。好在我没去过怒江，加上屋中央的杏树转移了话题，我的心思又回到了现场。</p>
<p>白素贞对杏树说，我们会想办法的。她为它想的办法，就是在屋顶开个洞，让它承接阳光和雨水。屋顶铺着石片瓦。这种瓦只在少数山区才有，其实就是像瓦一样的石片，也做了瓦的用途。我砍来两根枯死的桤木树，用藤条绑成楼梯，爬上屋頂，将两片瓦移开。瓦比油漆还黑，并以沉实来宣示自己是石头，不是泥土或别的什么。黑瓦与同样发黑的栗木椽子，粘得很紧，要用了力才能掰开，可几只草鞋虫，竟在我掰开的同时，就在虚虚的阳光里四散奔逃。它们像是不需要空间，只需要黑暗。白素贞在下面喊，亮了！她看见的是天亮了，而我看见的是地亮了，是地上的她亮了。我在天上看着地上的她，有了一种顿悟：古往今来，天上的神仙总是偷偷下凡，可见地上比天上更美。</p>
<p>地上美就美在有白素贞这样的女人。</p>
<p>她是我的女人，我不能让天上的神仙把她带走。</p>
<p>可她还是被带走了，仅仅在三年半过后。遗憾的是，我蹲在屋顶上时，并不知道这个结局。我当时还在想，相对于她，我现在就在天上，如果要把她带走，也是我，而不是别的任何人，包括神仙。这想法太不吉利了。对她不吉利，对我本人也不吉利。最不吉利的地方，是我把自己当成了神仙。我不愿做神仙，只愿做人，哪怕像许仙那样的人。</p>
<p>那天夜里，白素贞比我先睡，等我闭上眼睛，整个世界就往下沉。河水的吼声像是来自另外的星球，半岛上的鬼怪和神灵，在属于他们的时间里悄然忙碌。我感觉自己也在往下沉，沉入无底的深渊。深渊是帮人了断和忘却的，可事实上，我与深渊的联系，从来也没像此刻这样紧密。我踏入了山城灯火辉煌的街道，街道直通滨江路，滨江路外是长江，阔大的江面，映照出另一座城，我同时置身于两座城市。走过一段滨江路，便进入巷子，锣锅巷，巷子两旁，是凸起的高楼，我住在右边这幢的六楼，上到三楼时，萨克斯的声音从对面楼里浮荡过来。那该是一首欢快的曲子，可听起来却有站在新坟前的忧伤。我知道是谁在吹，我认识他，他叫王林，前不久才跟妻子撒了手。他跟妻子很相爱，但还是撒了手。是因为他父亲。他父亲已经七十岁，六年前，他母亲去世后，父亲不知从什么地方带回一个二十多岁的女人，一口气生了两个儿子。无论在哪种场合聚会，父亲都当众搂着小妻子，后来还搂着两个小儿子，玩自拍。小妻子喜欢唱歌，父亲陪她唱，而偏偏小妻子唱的都是高音，父亲也跟着飙高音。父亲飙出的高音里，带着腥味儿，腥味儿来自腹腔，是被他使劲儿挣出来的；除了腥味儿，好像还有肉渣。太可怜了，王林的妻子说。她觉得自己没那么坚强，能天天背负着同情心生活，就跟丈夫离了，搬到了城市的另一边，从此与王家彻底断绝了关系。王林十三岁就吹萨克斯，吹到现在，已是炉火纯青。能把一首曲子从水吹成冰，从阳光吹成月色，在这座城市里并不多见。我继续上楼，听见四楼的一对夫妻在厉声争吵，看见五楼九号门前，站着个已经秃顶、穿着正装提着礼品等待开门的人。到六楼，我的门关着，邻居的门开着，男人站在屋当中，情绪激动地跟人通电话，他妻子比他还激动，站在他面前，为他竖大拇指。而我的门始终关着，我打不开我的门。时光在楼道里流逝，我在楼道里变老。</p>
<p>白昼降临。</p>
<p>当我睁开眼睛，真的以为是白昼降临。那不过是闪电。我只见过城市的闪电，城市的闪电快捷，迅猛，带着刺探、惊惧和方向不明的厌倦，而荒野的闪电如史前生物，深知未来史书对它们的记载，都源于人类贫乏的想象，因而肆无忌惮，随心所欲地只是玩儿，唰！起了；唰！又收了。起和收，几乎就在同时。在它收去之后，黑暗更深。它那么照一下，就是让你看见黑暗的深度。你在亮与黑的两极游走，没有中间地带。可当你慢慢适应，它便接连不断，唰唰唰，形成光的河，从九天垂注。</p>
<p>杏树身着白衣，瑟缩着，像个正给父母送葬的孤儿。可它父母还在呢。至少，它母亲还在呢。我在屋顶开了天眼后，白素贞从三十米外的一口潭边，端来一盆水，清洗杏树的叶子，边洗边说，妈妈为你洗脸。白素贞是它的母亲，它母亲活着，这时候却穿了孝服。它或许呼喊过，没听到回应，就以为妈妈死了，跟着妈妈的那个人也死了。我推白素贞，说，杏树叫你呢。她潜伏在睡眠底层，出不来。我使劲推她，说，要下雨了！她伸了一下腿，翻过身又睡。她的光屁股顶在我的肚子上，有一种不真实的温暖。我想，必须赶在下雨之前，去把揭开的瓦还原，可杏树不正需要雨水吗？</p>
<p>我总是遭遇两难的处境。取舍都是在一念之间，我还是应该爬到屋顶上去。雨神看见了我的想法，抢在我之前，炸雷声起，天空粉碎，盛在天空里的水，瀑布似的往下砸。</p>
<p>后半夜再没能睡觉，白素贞举着我们从旧货市场淘来的马灯，我举着锄头，在卧榻和杏树之间掏沟。沟一直掏到门外。门外的斜坡，呈扇面形与河流相接。早上，雨小了片刻，可那只是技法拙劣的引诱。有引诱，就有上当，不管是多么拙劣的引诱。我正准备对白素贞说，这地方住不得，赶紧离开吧。但话没出口，天又垮了，垮了一层又垮一层。我站到屋外去，望见河水近了，对岸远了。那时候，我就预感到出不去。</p>
<p>如果我是一滴雨，就能从汪洋中逃离。我站在雨里，也真像一滴雨。可当我意识到这一点，立即退回了屋子。如果没入汪洋，我该逃向哪里？我有远方的城，有城里的事业，但那是过去的事情了。要确认那时候的朱家田就是现在的朱家田，我没有信心。</p>
<p>信心被摧毁，是在信心被确立的那一刻。</p>
<p>那一刻就发生在海拉尔的莫日格勒河。</p>
<p>去海拉爾是段艰难的里程。还没在加格达奇上车，我就知道自己感冒了。对有些人而言，感冒无非就是擤擤鼻涕，对我却是大病。咳，不是用嗓子，是用整个身体。上车就饿得慌。我得重感冒的显著病象，还不是咳，是饿。坚持两个多钟头，不见卖早点的，便去餐车买。白素贞坐在我旁边，打着瞌睡，我想是不是应该叫上她？当然，应该叫上。她却不去，说给我带些来。餐车里除了方便面，啥也没有。师傅说到海拉尔要交班，所以没吃的。是他要交班，可他分明说的是：到海拉尔你要交班。他加了个你字，这让我觉得晦气。我向谁交班？为什么交班？心里堵，方便面也懒得吃了。回到座位，白素贞睁了一下眼睛，见我两手空空，又把眼睛闭上了。我头晕目眩，想睡又睡不着，便望着窗外。</p>
<p>近处是平畴，远处是起伏的丘陵。平畴和丘陵都有个共同的名字，叫寂寞。没完没了的寂寞。如果没有歪在身边的这个人，我不会这样寂寞的。有一种寂寞是不光彩的，比如我此刻的寂寞。我就不想自己，只看窗外单调得让人发狂的景致。我相信，到某一个时候，平畴和丘陵要么调换位置，要么都变成汪洋，可那个时候是多么遥远，它们要忍受多么漫长的寂寞。白素贞说，石头和树木是缓慢的生命，那么天空和大地呢？人等不起这样的缓慢，许多时候，人只能成为大兴安岭的豆荚。我想着这些，就如半年后到清溪岛的第一夜，在沉重的天宇间听见了忧伤的萨克斯。但在车上的忧伤是安宁的，我甚至要说，是华丽的。这是真正的忧伤，安宁而华丽。真正的忧伤是人一生的奢侈。</p>
<p>在我们对面，坐着三个摄影人，都是年过六旬的老人，坚持用胶卷拍照，这次外出，各照了五十多个胶卷，只是过安检麻烦，要解释半天，才允许那些宝贝不去照X光，也就是不让它们在瞬间就化为空白和废物。三人大谈真正的摄影，必须用胶卷，接着鄙薄他们共同的熟人，说那些人用数码相机，甚至用手机，也梦想出作品。说别人的坏话能刺激荷尔蒙，有个头发花白的老头子，自然而然把话题过渡到房事，说他现在还像二三十年前，可他老婆上四十九岁过后，就对那玩意儿彻底厌倦了，他要跟她做，她不做，他就把手一摊，老婆问，啥呀？他说，钱。老婆说啥钱呀？他说，嫖娼费！他把嫖娼费几个字，说得格外大声，且每个字都拖得很长，像是在对一个切齿痛恨的人宣判。老婆惜钱，答应跟他做。但对她而言，那实在是件苦累活，怕苦怕累的时候，只好把钱给他。</p>
<p>老头子说到这里，白素贞醒来，很有兴趣地盯住他。忌妒，我猛然间就感觉到了。这种情绪可笑至极。对面的人说得更加起劲，说的是物价，说以前嫖一次，只要十块，后来涨到二十、三十、一百，现在竟要三四百，这还是普通价。他的同伴呵呵笑，说你别去高档地方嘛，你就在公园里找，公园里的妓女，坐在木椅上，跷着二郎腿，把鞋底亮出来，鞋底上就用粉笔标着价，最高也超不过四十块。她们自己有住处，虽是暗了些，窄了些，脏了些，可你要的又不是干净宽敞，你要的只是阴暗潮湿，你甚至也不要人长得漂亮，到了我们这年纪，凡是年轻的，都是漂亮的。接着又说：其实她们在公园里就能帮你解决，有的摆个擦鞋摊在那里，你坐在她面前的椅子上，她一只手拿着鞋刷装样子，另一只手就帮你解决了；如果在背角的地方，还可以用嘴帮你解决，只是价钱相对高些，但也高不过五十块。那老头子，瞪圆双眼，像突然开窍，点着头说：像我这么密集，怕只有想这办法了。我玩相机花钱，玩女人又花钱，钱都被我花了，我老婆跟我过了一辈子苦日子。话虽如此，却是骄傲的口气。白素贞往我身边偎了一下，花瓣似的嘴凑到我耳边：他在吹牛。我敢担保，对面并没听见她说什么，但都静了下来，直到我们在海拉尔下车，对面一直很安静。</p>
<p>凭烙印识别骏马，我对白素贞的怀疑更深了。</p>
<p>到海拉尔天已黑。一路上，每到一个目的地，差不多都是黑夜。海拉尔是我调查的重点之一，因此得住下来。我对白素贞有了疏远，尽管跟她一同下了火车，一同上了出租，一同进了市区，但我并不关心她住哪里。或许，她这么从北到南地跟着我，只是偶然的同路，她是要去某个城市做她的生意。很可能，她去北极村也是为了做生意。</p>
<p>感冒持续加重，在出租车上，我就支持不住了。我对司机说，直接把我送到医院。然后对白素贞说，你要在哪里下，给师傅讲。司机却很通人情：你们是住宾馆吧？我先把你们送到宾馆，再送你去医院，你放了行李，去医院也方便些。于是他把我们拉到了“星期天宾馆”。我从房间下来时，见大堂经理在给司机数钱，二十块。送了客人来，每开一个房间，司机得十块回扣。他把钱迅速揣进裤兜，过来说，去蒙医院，那是海拉尔最好的医院，你烧得起火，眼珠都烧成炭了。他送我去的是呼伦贝尔市人民医院，不知道为什么要叫成蒙医院。病人到了医院，就想立即用药，可当时正流行一种传染病，若携带那种病菌，需隔离治疗；医生慢条斯理地抽血，慢条斯理地拿去化验。结果只是感冒。病人不多，躺在床上输液，护士给我盖了被子，我说，冷，护士再给我盖一床，我说，冷，护士又给我盖一床。输完液快十点了，打车回到宾馆，白素贞等在大堂里。她说，我进房间上趟厕所下来，你就走了，又不知你去的哪里，给你短信你不回，打你电话又不接。我们留过电话吗？我都忘了。我说，没人怪你。说得气冲冲的。这分明就是怪了，这为我们的以后埋下了伏笔。</p>
<p>真想喝碗绿豆稀饭，想得心痛。</p>
<p>如果是在家里——我是说以前的家里，不需我出声，妻子就会把绿豆稀饭端到我的床前。但我早就没有妻子了，我的妻子成了我的前妻，就跟王林一样。我和我前妻的故事，我不想多说，反正网络上才能见到的八卦，在我们身上变成了事实：为了女儿，我们想去一所好学校旁边再买套房子，办了假离婚，房子买好，住进新房的，却是她和另一个男人。那个男人我是多么陌生啊，而她却是那样熟悉，她不仅知道他的名字，还当着众人为他拍肩膀、系纽扣……我不说了，这故事太卑微了，从某种角度讲，比加格达奇火车站的那个乞丐还卑微，那乞丐卑微得实诚，而我们，却是用了心计去卑微。不去说那些事了。我现在只想喝碗绿豆稀饭。我不知道对绿豆稀饭的想念，是不是因为想念前妻的缘故。在我清醒的时候，我会迅速把这想念掐断，还骂自己没出息，可问题是我现在不清醒。</p>
<p>白素贞把我送到房间门口，我开了门，没跟她道别，就把门闭了。我往床上一扑，艰难地从裤兜里抠出手机，给前妻打电话。我说，我要死了，我住在海拉尔星期天宾馆，我死了你要晓得到哪里收尸。而今想来，我除了没出息，还很无耻，为什么打这个电话？她有什么义务为你收尸？她在那边哇啦哇啦的，是在说，你又出去采访吗？你赶紧去医院，自己去不了医院就赶紧拨打120，诸如此类。但我把手机挂了，而且关了。</p>
<p>房间里的一切，被我呼出的气流烧成深紫色，且飞速旋转。我想起火车上的餐车师傅说，你到海拉尔要交班，看来果真要“交班”了。人在这时候，是不是都要回顾自己失败的人生？我马上就上四十岁，还这般碌碌无为。在我十多岁的时候，看到二十多岁的人，心想，他们那么老了，啥事没做出来，还在那里高高兴兴的，太可悲了，我二十多岁的时候，又这样鄙薄三十多岁的人，到如今，才明白了自己也是他们中的一员，甚至比他们还不如，他们至少还可以高兴，而我，连家都没有了。我只有住处，没有家。至于事业，我无非是个安分守己的记者，我对杂志社的全部贡献，恐怕也就只剩下安分守己。至于采写的那些稿件，我去和别人去，并没啥区别，说真的，也没有人关心。尽管包括我在内的采编人员，都相信人活世间，不是流血，就是流汗，总之得流一点儿什么，因而工作起来都很认真，把标点符號也很当一回事，但读者就如关了龙头的残水，一滴，一滴，眼看就断了，或者说已经断了。这成了我人生的写照。我在想，等我到了六七十岁的时候，难道也只能像那个红头花色的老头子，向一帮同样老和更老的老头子，虚构自己房事的英勇？悲凉如草，那些草长在我的周围，一根一根地摇动。我蹬掉鞋子，和衣钻进被窝，钻进悲凉的草丛。</p>
<p>是昨晚送我们来的出租车司机把我叫醒的。昨晚我跟他约好，今明两天包他的车，去呼伦贝尔草原。不过我把这事完全忘了。他打不通电话，就直接上房间敲门。白素贞站在他身后，看样子，她早就起来了，很可能也敲过门，只是不像司机敲得这般理直气壮。</p>
<p>我让他们去楼下等着。</p>
<p>洗脸漱口之前，我就打开了手机。我是在等前妻的电话。但是没有电话。她是我妻子的时候，如果遇到昨晚那种事，她会急死的，跟我联系不上，她肯定要查询到海拉尔星期天宾馆的总台号码，让服务员送我去医院；不仅如此，她还会通夜不眠，电话不离手，一遍接一遍地给我拨，只要我开机，第一时间就会响铃。但她不是我的妻子了，这铁一样的事实，我该承认。她有了自己的新丈夫，有了另外关心的男人，我又算什么？而且从情形判断，我们还是夫妻的时候，她就跟那个左脸上长颗黑痣的男人有了不浅的瓜葛。老天怜惜我，不愿让我一直被蒙骗，才鼓动我为了买套房，主动提出跟她离婚。当时正打击假离婚，我的前后左右都是眼睛，为躲避那些眼睛，我和她长达七个月不见面。在这两百多天里，我憧憬着跟她的未来，而她的未来里却没有我。她成了别人的女人。昨天夜里，她能够哇啦哇啦地叫我去医院，已经难为她了。</p>
<p>但我还不死心，从卫生间出来，又查看短信。只有白素贞昨晚留的三条，第一条：你在哪儿？第二条：老天，请告诉我医院的名字。第三条：你的心真硬。</p>
<p>或许是的。昨晚，我不该不跟她道一声别，就把门关了。</p>
<p>旅途让人孤单，生病更让人孤单，而有她在身边，我不应该这样孤单。</p>
<p>收拾完毕，我下楼去。饿得快要虚脱，不如说已经虚脱。我的躯体还留在宾馆的床上，跟他们走的是我的魂。司机姓冯，也没吃早饭，我请他们吃。饿成那样，两个水饺下去，喝半碗热汤，却又撑得不行。坐上车，出了被伊敏河分割、正大兴土木的城市，一路向北，往金帐汗方向走。我又是坐在副驾，白素贞坐后排。她一言不发。包括吃饭的时候，她也一言不发。她像在承担某种罪愆，比如分明知道我病了，却没照顾我；尽管既发过短信，也打过电话，但不管怎样，没照顾我却是事实。其实这不关她什么事。我们只是萍水相逢的两个人，一同走了这么远的路，也并不证明她就对我负有责任。</p>
<p>天气晴朗，阳光耀眼，风在阳光里吹，把阳光和风自己，都吹成树的形状。路两旁站满杨树，叶子被风翻卷过来，现出满树的白，像叶子正面是树的衣服，背面是它的肉。她也是这样白。我是说白素贞。这从她的脸和手就能看出来。冯师傅不仅尽着一个司机的职责，还当起了导游，详尽介绍海拉尔的民风民俗，可我听不清他说什么。我的脑子像团糨糊，在糨糊里搅动的，只有她。我已经不去想她为什么跟着我，我生怕她不跟着我。如果到了海拉尔，她真如我想象的那样，猫到一个地方做生意去了，而她的客人，却是那个红头花色的老头子……不过，这些与我有什么相干？我把心思收回来，像专注地在听冯师傅说话的样子，还牛头不对马嘴地插言。出城不久，一条蛇行曲水横躺在草原上，看不见河床，水和草原一样低平。冯师傅说，这是天下第一曲水，叫莫日格勒河，下车看看吧。</p>
<p>刚下车，白素贞就弯了腰，在地上寻。她寻到的是块小石片，她手一挥，把石片投进了曲水。水花与水分离，在阳光里浸一下，又合二为一。冯师傅把我们领到一排水柳底下，讲莫日格勒河拐了多少道弯，每一道弯上有些什么传说。白素贞和我并肩而立。冯师傅讲累了，便在风里躲来躲去，费力地点烟，直躲到十米开外，也没点着。这时候，白素贞细声问我，你知道我为什么扔片石头到水里吗？我盯住她，摇摇头。因为我爱你，她说。</p>
<p>这就是她的逻辑。</p>
<p>不要逻辑，或者打破逻辑，是最强大的逻辑。</p>
<p>所有的逻辑都有着共同的目标，就是说服人。但白素贞的话并没有说服我，反而让我难过。前妻是我妻子那几年，她说爱我的时候还少吗？我出差在外，她每天打数次电话，多数时候啥事没有，就是说爱我。再说王林的妻子，跟他办了离婚手续，两人去餐厅吃最后一顿散伙饭，还是眼泪婆娑地说爱他。但白素贞除了嘴，还有眼神，她的嘴没说服我，眼神把我说服了。她的眼神比她的语言更可靠。那是比莫日格勒河更加曲折的眼神。她用石片在河里激起的浪花，现在停留在她的眼睛里，当她把那句话说出口，那朵浪花才带着被阳光浸热的温度，融入她的水中。我的烧退了，感冒好了。真的，好了。我感觉自己像脱了头套，卸了盔甲，浑身通泰。而往常，即使远不及这次严重，都是无论怎样吃药，怎样输液，不满一个星期，就不会好。可是，怎么讲呢，吃过亏的人疑心重，我依然觉得，她那样说，包括她的眼神，都只是一种补偿。至于感冒好得快，只是因为我没了依赖。以前有妻子依赖，就赖着不好，现在没有依赖了，完全靠自己，即使没好也当成好了。</p>
<p>我不愿对白素贞有太多回应。</p>
<p>幸亏冯师傅是个话痨，见啥说啥。他说海拉尔牧区之外也有农区，农区主产大麦、小麦、油菜和土豆，偶尔也种玉米，但气温低，不能成熟，都是青收，用来喂奶牛，用青收的玉米喂奶牛，下的奶稠得能当饭吃，而且特别香，只是太奢侈了。海拉尔田地少，玩不起这样的奢侈。今年七八月，遭过两场冰雹，好多庄稼包括茄子和白菜，都打成了泥；前些日子的一场霜冻，再加一场雪，又把向日葵冻死了。在这样的地方，本来就不该种向日葵，可还是种，向日葵喜庆，还知道围着太阳扭脖子，让人感觉它不是植物，是动物，人们种它，就是养一只动物。说了农区又说牧区。冯师傅连声感叹草场的衰退，说过度放牧并非罪魁祸首，机器打草才是，机器伤根。分明知道，可现在的人喜欢多和快，因此离不了机器，人被机器控制了。草原那边采矿挖煤，掘泥刨土，改天换地，大风一吹，满天焦黄。焦黄的东西混在雨里，雨落下来，草喝了，很快被毒死，就像一盆汤里加了各种腐蚀剂。草场退化，贵了牛羊，现在不到想吃肉想得流口水，都不敢随便买肉吃。</p>
<p>冯师傅正说到这里，前方来了一个庞大车队，一辆接一辆的大车，拉了满车草捆，隆隆地驶向远方。那个远方是韩国。有的拉着芥菜，腌泡菜用的，目的地也是韩国。</p>
<p>离马路不甚远的草甸里，停着辆白色大篷车。冯师傅把车开过去。大篷车里住着个烂了眼睛的男人，是从鄂尔多斯来的羊倌，春夏秋冬，只要不是暴风天气，只要雪没把草盖得羊用蹄子踢不出来，他都得把羊赶出去放牧。干草太少了。好一点儿的干草都送到国外卖钱去了，连那些结了草籽的也送走了，送去低价出售。以前的羊倌是骑马放牧，现在有骑马的，也有骑摩托的。大篷车里的羊倌，眼睛就是被马背和摩托上的风咬烂的。我们下车跟他搭话，他不理。在他看来，我们太柔弱，承受不起他那些生活的硬度。</p>
<p>白素贞却走到大篷车旁，攀住悬梯，似乎想爬上去。车厢两旁，堆放着杂物和锅碗瓢盆，当中横着床铺，垫的盖的，都辨不出颜色。羊倌坐在铺盖上吸烟，烂眼睛里射出恶狠狠的光芒。是攫取的光芒。他离开家乡，离开女人，孤身来到异地，成天跟羊打交道，跟雨雪、烈风、星空和旷野打交道，这样一个鲜活、年轻、美丽的女人突然出现在面前，连想象一下也来不及，只有攫取。我感觉到那眼神里匕首般的寒意，白素贞却坦然承迎，就像流水面对一把刀子。流水等待切割，仿佛就是为了验证切割的无效。可她不知道，每一次切割，水里都会留下刀子的投影。刀子的投影在我心里形成实实在在的伤口。为什么会这样？就因为她说她爱我吗？几十年来，除了曾经的妻子说爱我，别的好些女人也说过这话，她们这样说，并不是表白，而是润滑剂，让寻不出意义的日子变得勉强可以应付。甚至更离谱，更过分。我曾看过一部韩国电影，一个恶棍在街上强吻一个女学生，被女学生扇了耳光，他便把女学生抢到红灯区，迫使她在他自己开的妓院里卖淫。他在房间墙上钻了个洞，偷看嫖客强奸她。她的身体是条瘦弱的鱼，这条鱼没有河流，他的目光成为她的河流。他嗜血，并以嗜血的方式爱她。她等着男朋友来解救她，可等来的是一个接一个的夜晚，一个接一个的嫖客。她要活下去，只能接受不习惯的河流。接受了，就慢慢习惯了。习惯了，就觉得是好的。那惡棍如愿以偿。他带着她，以大篷车为家，四处流浪，衣食无着的时候，就揽一个饥渴着的男人，让那男人去车上，跟她做生意，他则蹲在车下抽烟，然后收钱。她做生意感到委屈时，他就跟她做爱，疯狂到暴虐。他们就这样，以堕落为食，活了一辈子，爱了一辈子。</p>
<p>爱有一万种方式，而我只知道一种，且只承认我知道的那种。</p>
<p>我说：走吧！</p>
<p>是的，我又想到了那种互动。美与丑的互动。美丽的女人往往钟情于恶男和丑男，就是受那种互动的蛊惑。我说过，那是天地间严守的秘密，所以很难被理解。白素贞不仅美，还以自己的美，去触动生活里最严酷的伤疤。她似乎隐约期盼着在严酷中撕裂。这是艳丽着就在凋谢的美，嗜血的美，废墟的美。我不是她互动的对象。</p>
<p>冯师傅就和那个带我们出北极村的司机一样，对自己的家乡，即使说不上热爱，也有天然的自尊，他先给我们说了那么多家乡的不好，现在想挽回来。离开大篷车后，他说，呼伦贝尔草原虽然遭到破坏，但毕竟还是中国保存最完好的草原，这草原上的白蘑菇，是天下最好的蘑菇，要是没吃过，就不知道什么是山珍野味；说春夏时节，地上百花开，天上百鸟唱，唱得最好听的，是百灵鸟和娜娜儿；说他们海拉尔人，从不拿别人东西，把东西放在外面，就跟放在家里一样。说着这些的同时，他带我们参观了建在野外的反法西斯纪念馆，去敖包山上看了白塔，接着又去一户牧民家。这家主人叫巴特尔，巴特尔养了一百多匹马、五十多头牛和两千多只羊，是大户，他独自坐在白房子里，首如飞蓬，也没洗脸；可能洗过，只是看起来像没洗。白房子旁边，是用木栅栏围起来的羊圈，羊圈里没有羊，只有羊粪，那是他的燃料。羊在附近放牧。巴特尔给我们烧了奶茶喝过，出来指着最近的羊群，说那是群公羊，他们叫爬子，爬子要跟母羊分开放，不然那些家伙想东想西，就要掉膘，到春天的某个时候，才将它们一起赶进母羊群。那种场面，让人联想到一座城市被占领。爬子们悬垂的睾丸，每动一步，都沉沉地晃荡，相隔老远，也能用眼睛掂出睾丸的沉。它在眼睛里的重量比羊还重。臊味儿扑鼻而来。巴特尔呵呵笑，说母羊产崽那些天，他接羊羔就像接天上的雨水。</p>
<p>冯师傅要上厕所，巴特尔领他去。这时候，白素贞背对着我，看太阳底下白浪般移动的羊群。而我，心思又回到大篷车旁。我说了那声“走吧”，冯师傅便钻进了驾驶室，可白素贞依然攀住悬梯，很留恋的样子。我应该像冯师傅那样，钻进车里去。但我没有。我等着她。其实是等一种危险。羊倌，白素贞，我，形成一个三角，他们形成钝角，跟我形成锐角。我要保护白素贞，而事实上，她可能并不需要我的保护，还可能，她已成为羊倌的同盟。羊倌寒光四射的目光，沿三角形的一条边，嗖嗖嗖地朝我射来。我怯了一下，但立即意识到不应该怯，便向那目光迎过去，谁知它已到了另一条边，那条边连着白素贞。我已经不存在了，只有他俩的互动。白素贞成了那部电影里渴望河流的鱼，而我不是她的河流。我朝冯师傅的车走去。但我的背后长着眼睛。我想的是，如果我上了车，白素贞还不动，我就断然地让冯师傅开走。好在她动了，我刚拉开车门，她就过来了，走得慢腾腾的，走几步还停下来，撅了屁股看地上，像是地上有非常值得一看的东西，其实就是被雪咬过被羊踢过被人踏过的黄草，再就是羊粪，以及冻成固体的羊粪的气息。车子启动的瞬间，我望了一眼大篷车里的人。他的腰塌下去了，目光里的寒气收了，而且突然间长出了许多皱纹，每一根皱纹都很悲伤。他就是一个被野风吹烂了眼睛的羊倌，他将独自留在这里，承受辛劳、风寒和孤独。</p>
<p>白素贞伤害了我，也伤害了他。我当时就是这样想的，现在还是这样想。</p>
<p>我甚至想，白素贞假装看羊群，其实是在挂念那辆大篷车，可同时又觉得对不起我。</p>
<p>我不知道我想得对不对。很可能是对的。否则，下面的事情就不会发生：当冯师傅和巴特尔隐到房屋背后，白素贞猛然转过身，近乎哀伤地恳求，你打我一巴掌好吗？</p>
<p>我承认，这完全暗合了我的欲望。</p>
<p>但我只是哼了一声，说，莫名其妙，我又不是恶棍。</p>
<p>求你了，打我，打我哪里都行！</p>
<p>我的欲望在退潮，她发现了，抓起我的手，重重地拍在她的脸上。</p>
<p>这构成了我们的仪式：打她，然后拥抱她，亲吻她，再然后，在对死亡的言说中做爱。做爱的过程中，还可能应她的哀求，不停地打她，手越下越重。打起来不过瘾，就掐她脖子。掐脖子还不过瘾，就用指甲或牙齿，恶毒地欺负她的乳头。她害怕养育，开始就怕，婚后照样怕。有一次，她以严肃到冷酷的口气对我说，朱家田你要是让我怀上了，哼！说这话的时候，我们已经是夫妻了。其实她应该知道，我也不需要她生孩子。我是个平凡的人，且知道自己的平凡，因此没有繁衍的渴望；即使有，也无非是本能，从没上升到意识。</p>
<p>何况我已经有一个女儿了，我的女儿十三岁了。我是说，白素贞死在半岛上时，我的女儿就满十三岁了。十三岁的女儿已是个姑娘，情窦初开，她对她的男同学或者男老师，也会有朦胧的抑或是清晰的冲动，甚至有了爱情。平凡的爱情。她父亲是平凡的，她多半也只能拥有一个平凡的人生，包括爱情。</p>
<p>当然，她母亲不平凡，她母亲开了家小超市，这不重要，重要的是她能删繁就简，遵从自己的意愿生活，单凭这一点，就非同一般。我们离婚的时候，因为说好了是假离婚，就没谈女儿归谁抚养，但由她带着，当假的变成真的，还是由她带着。这是她主动要求的，她说家田，就让我带吧，你经常出差，照管不了她，再说女儿慢慢长大，你一个男人家，带她也不方便。说到这里她停了一会儿，是在等我表态。我没表态。于是她又说：你将来也是要结婚的，说真的，我怕她后妈对她不好。我记得很清楚，那次约见，是个星期天，浓雾从江面升起，弥漫开，把整座城市潮乎乎地罩住，我在锣锅巷那套房子里等她时，一再告诫自己，无论谈到什么话题，都要冷静、大度，像个君子和绅士那样跟她了结。事实证明我完全装不下去。当她说到“她后妈”这句话时，我再也装不下去。我说周琴——这是我前妻的名字，我本来不该说出她的名字，但回忆起那天的情景，我又忍不住愤怒了——我说周琴，你的话说完没有？说完了你就滚吧。她坐在那里不动，抿著嘴。当那嘴唇启开，话又出来了，声音比开始时响：家田，你是男人，我是女人，我知道男人，你知道女人，我们都知道男人和女人，都承认男人的心胸比女人的宽，天底下的继母，大多数确实比不上继父……昭国你是见过的，他怎样待我们女儿的，你也是见过的。说到这里她又停下了。</p>
<p>是的，我见过。当时我们在长江边的露天茶园，她的新丈夫黎昭国抽着烟，怕熏了孩子，就站起来抽，嘴巴噘到天上，不厌其烦地吐烟圈给我们女儿看。要说，那家伙真有本事，能把烟圈吐成兔子、雀鸟、鸡鸭、小狗，还能一次吐两只小狗，相互追逐打闹。女儿乐不可支，嗓子都笑哑了。然而，就算他能吐成一座黄金宫殿，也只有连血带骨的亲情，才知道什么是好。我不需要周琴来提醒，我朝她挥了挥手，说，你走。</p>
<p>她跟后来的白素贞一样，把我吃得牢牢的，关于女儿的抚养权，只听我口气，就知道我是答应了她。其实早就答应了。她提出让我跟她新丈夫见面，且带着女儿，我就明白她的意思，是让我实地考察一下。我同意见面，表明已顺从了她的意思。但我们约见的那个星期天，她走得让我憋屈。我以为她还不会走。她至少要给我一个解释才会走。我要的解释是：和我離婚，是不是她的预谋。离婚是我提出来的，这没错，但回想一下那天的经过，就发现这证明不了什么：她听了我假离婚的话，没答言，反身进了厨房；她正准备炒花生米，油已下锅，是我在客厅喊她，她才出来的，我说了想法，油已烧辣，她不答言就进厨房去，在情理之中。她关了厨房的门，接着打开了抽油烟机，呼噜呼噜地在里面闹腾了好一阵，才又回到客厅，跟我并排坐在沙发上。事有凑巧，电视里正播报山城新闻，说的就是分片入学的事，我们默默地看了大约半分钟，她说，你真那样想？我说又是限房令又是分片入学，有啥办法呢，锣锅巷周边的学校……她说，嗯。我说，我去写个协议？她说，嗯。我把协议写好，让她看。离婚的理由，我说的是感情不和。这是最虚妄又最本质的理由，因此是放之四海而皆准的理由。她盯住那句话，似乎想说什么。她说了，说的是：嗯。就把字签了。那天接下来的时间，她很兴奋。我当时把她的兴奋理解为可以让我们女儿进个好学校，不至于输在起跑线上，过后想起这事，我就脸红，就为自己心痛。她的兴奋是顺水推舟的兴奋。</p>
<p>当然，究竟是不是这样，我也没有十足的把握。</p>
<p>我需要她一个解释。她没有解释，我叫她走，她果然就走了。</p>
<p>她连愤怒的权利也不给我。</p>
<p>她只把一个事实扔给我。</p>
<p>既然是事实，为什么还要她的解释？</p>
<p>不说这些了。我说过不说的，结果又说了这么多。</p>
<p>我是在说白素贞怕我让她怀孕，而我没有那种渴望。我有一个女儿已经足够。女儿刚进新学校那段时间，我每天跑很远的路，去学校门口，躲到一棵黄桷树背后看她——看他们把她接走。每次去接她，都是周琴和她丈夫一同去，女儿走中间，他们走两边，一人牵住女儿的一只手。我就看着他们这样把女儿接走。我至今不清楚那个名叫黎昭国的人是干啥的，包括他之前是否有过婚姻，是否也有孩子，我都不清楚，但看得出来，他是真心实意喜欢我们的女儿。知道了这一点，以后我就去得少了，以至于干脆不去了。</p>
<p>儿女是要养的，养才能出感情，我没养她，没伴随她的成长，又少于见面，感情就会被大片大片的空白稀释掉。开始，女儿还经常给我打电话，我自然也经常给她打，后来她的电话少了，我的电话也少了。我并不需要再给她抚养费，买新房的钱，远远多于买我住的那套旧房的，将我应该支付的抚养费除掉，周琴还应该补我一笔，我以怒气冲天的坚持没要那笔钱，是因为我觉得，在我们做夫妻的时候，她挣的本来就比我多，多很多，尽管我动不动就出差很辛苦，但她日复一日在超市里经营，打理，只要不是忙得起火，三顿饭期间她都把事务交给请来的小妹儿，回家为我做吃的，她比我更辛苦，我要那笔钱于心不安。因为不给女儿抚养费，我和女儿在经济上的联系也断了。她忘掉我，只把黎昭国叫爸爸，不把我叫爸爸，甚至渐渐不知道有我这个爸爸，我也不该有任何怨言。</p>
<p>但毕竟，女儿不是一件东西，说给别人就给别人，我做不到。我能够做到的，是尽量不去想她。她不会单独存在，我一想她，就想到了她是怎样生出来的。这是在我伤口上撒辣椒面。我不去想她，更不和她联系。到半岛以后，我跟白素贞把手机都扔了，想联系也没法子了。我和我的女儿，只剩下遥远的生理上的联系，但这已经足够。每当她像流星一样从我脑海里划过，我就知道，自己身体的一部分，是在半岛之外的，是在我祖祖辈辈生活的那座城市里，于是我就觉得，自己不应该再奢望什么。</p>
<p>我现在把半岛和半岛上的白素贞，当成自己最大的奢望。</p>
<p>我们在半岛上开荒。对此，白素贞表现出极大的热情，仿佛我们真是世界的创造者。野草长在那里，长了多少年？不知道。在我们的想象里，野草跟河水一样长久，都是这世上最古老的居民，然而，当扒开薄薄的一层土，却发现土里有木屑，有铁钉，有瓦片，不是石片瓦，是窑烧出来的，隐隐泛红。这是人类加工的痕迹。在不算久远的过去，这里很可能是一个村庄。野草先于村庄，然后村庄除灭了野草，再然后，村庄消失，野草又来。</p>
<p>我参加工作不久正当意气风发的时候，曾被派到清溪河采访，从源头走到它与嘉陵江的汇合处，一路上都听说，河岸有个秘密的村子，住进那村子里的，都是麻风病人。谁也说不清村子的具体位置。会不会就是这里？我这样猜想，但没对白素贞说。我应该学会隐藏一些东西了，我对她说得太多了。最不该说的，就是这座半岛的存在。当年，我坐着小木船，逆流而上，发现了这座半岛。那时候它就是荒芜的，茅草深密，荆棘丛生，林木蔽天，有几棵高树片叶不存，已经枯死。我向船夫打听它的名字，船夫说没有名字。我又问这么好一个地方，为什么不开发？那时候，开发这个词正热得发烫。我说，在上面修几幢客舍，开农家乐，绝对能在节假日把河上两座县城的人吸引过来。这些话并不表明我有经济头脑，只表明我比荒河人家更能追赶时髦。我的平庸也是这样来的。船夫没回我。那是个沉默的人，数十年的水上生涯，使他不惯于开言。沉默如刀，在他脸上刻下深长的沟壑。他是觉得我异想天开因而懒得回话也未可知。但我把这座半岛记下了，并在跟白素贞结婚半年后讲给她听。</p>
<p>我至今无法说清，在那个黄昏如雨的日子，我想起半岛，提起半岛，是不是因为自己对它有了想法？直到白素贞缠住我，说我们为什么要在人群里混？为什么不去那荒岛上找些意思？哪怕饿死呢！我才知道自己失言了。如果认她的理由，她的理由就很强大，不认，就啥也不是。我在认与不认之间。这种状态最糟糕。这意味着挣扎。当一个人在沼泽里挣扎得累了，犹豫着是不是还要继续挣扎的时候，沼泽自会帮你做出裁决。</p>
<p>她在荒岛上找到的“意思”，首先是它的荒凉，接着是那间木屋，那棵杏树，随后就是被草根缠裹的木屑、铁钉和残瓦。去的第二天午后，她提起一笼巴根草，费劲地把瓦碴掰掉，问我，你认为世上最大的神秘是什么？我说是你。她跺跺脚，我是认真问你。我说我也是认真答你。还是研究生呢，她歪着鼻子说，还当那么多年记者呢，结果肚子里就只有那么点儿油腔滑调。她是說到点子上了。安分守己和油腔滑调，成为我的A面和B面，A面是我，B面也是我。她只有一面，若说是有两面，A面是神秘，B面也是神秘，从这个意义上讲，我并不是在敷衍她。但她不认，她说，世上最大的神秘，不是未知，而是出现过又被遮蔽的事物，是低处而不是高处，立在高处的房屋，永远没有埋在土里的残瓦神秘。</p>
<p>我心里服她，但嘴上不服，我说，再这么挖下去，说不定还会挖出人骨头呢。</p>
<p>话是不能随便讲的，有些话讲了就跟着来。我话音刚落，她果然挖出一根骨头，足有一尺长，草根包不住，露出头尾，草像是狗，把骨头含住。草根白得触目惊心，比骨头还白，而且胖，感觉是虫子，不是草根。白素贞如获至宝，用竹签小心翼翼地把泥土挑去，再将交缠卷曲的草根，很有耐心地理伸展。她双手握住解放出来的骨头，说：人活着时被人事捆绑，死去后被草根捆绑，可见人就这么个命。她把骨头拿去水边——离我们住处不远的地方，有好几口水潭，一潭水里有鱼，另几潭水里没有鱼，我们就把有鱼的那潭水做了饮水，并给它取了个名字，叫人鱼潭——白素贞正是走向人鱼潭。她要去把那根骨头洗干净。我一下子想到了麻风病。但我不能说，我发现，她对排除在人群之外的，不管是人还是物，有种特别的痴迷，如果我说了，她会把那根骨头视为至亲，因此我忍住了没说。我说的是：那水是我们喝的，不能让死者喝，死者为大，你要洗，就拿到河里去。</p>
<p>她觉得有道理，就向河边去了。</p>
<p>当她许久之后出现在我面前时，睫毛湿润，似乎哭过。这是个阴沉沉的天气，风凌乱地吹，她披散至腹的头发，一忽儿把脸遮住，一忽儿又露出来。我说，你为它哭啦？她两手抱在胸前，骨头插在双乳之间，一端顶住下巴，像她拾回的一截藕。她不回答。我说，那还不一定是根人骨头呢。她这才说：难道这有什么区别吗？</p>
<p>我没想到她会把骨头带到床上去。当天晚上，俩人刚钻进被窝，她就在里面拱来拱去，不停地在我身上比画。我感觉到一种凉，那种凉在我躯体上一截一截地丈量，每丈量一处，那地方就生出电流，麻，还有皮肤灼烧的痛。凉和热，就这样殊途同归。我以为她又在试验她的新花样，她总是想尽办法，用她身上的任何一处来贴我，遇到她之前，我不知道用身体的不同部位去贴一个人，会产生完全不同的感觉。白天太过劳累，我没精力管她，只沉浸在那种感觉里。有时候，麻和痛，竟是这样的让人享受。直到她把我的手臂拉出被子，借着烧在屋外的火光（刚去半岛时，怕有狼，我们夜里在屋外烧火），我才看见她是用那节骨头在量我。火光从壁缝漏进来，随风摇曳，如漂浮的水草，可火光往骨头上一碰，就吐出幽绿幽绿的气泡，像吞吐自如的眼珠。我涌起一阵战栗，坐起身，把她和它打开。这有啥呀？她万分不解地说，我只是看看它属于身上的哪一部分。那你为啥不在自己身上弄？她愣了一下，然后笑了，几分愧疚几分撒娇地说，我怕在自己身上看不清楚。我懒得理她，躺下去睡了。她果然就在自己身上比来比去。我很快进入梦境，她忙到什么时候才睡的，我不知道。</p>
<p>你太爱嫌弃了，她说。</p>
<p>这样的话她早就说过，我们在从北到南的旅途中她就说过。</p>
<p>那次在呼伦贝尔草原，我们在牧民家住了一夜。这家牧民的主人，叫宝音巴特尔。巴特尔是英雄的意思，草原人忘不了他们祖先的神勇，取名巴特尔，一为祭奠，一为期许。我猜想，如果谁有那么大的嗓子，站在草原的中心喊一声巴特尔，会有一万个巴特尔答应，会有一万个英雄迎风而立。宝音巴特尔跟前面那个巴特尔一样，修了定居的白房子，宽敞得足以住下五十个人，但他知道我们来自城市，定想体验帐篷生活，就在屋外相挨着搭了两顶帐篷。地上满是牛羊粪，气味绵密。睡之前，我们坐在外面望天。星星把天挤得装不下，只好拼命延伸，延伸到无穷无尽。白素贞抱着膝盖，跟我坐得很近，可我感觉她离得很远，跟天上的星星一样远。她似乎完全忘记了在莫日格勒河边说过的话。冯师傅抽着烟，说，看那颗流星，呵。又说，那颗星是红的呢，呵。他这么有一句没一句的，呵呵呵的。我知道，他是对我和白素贞的关系有了疑惑。如果我们是夫妻，或情侣，昨天夜里我去医院，她怎么不跟着？为什么住宾馆又要开两间房？他拉我们去星期天宾馆时，根本没想到自己会得二十块回扣。如果我们只是普通的同事——在敖包山上，我对他说过我跟白素贞是同事，单位又怎么会派一男一女到这么远的地方出差？他或许在想，我们昨天可能是闹了别扭，今天在高天之下，厚土之上，正是情侣的好时光，于是悄悄地溜进了帐篷，且把拉链拉上。这让我不自在起来。并非是因为与白素贞单独相处，而是被人觉得我们应该单独相处。我对白素贞说，睡吧，外面冷。她只看天，不看我，说，你想睡就去睡，我再坐会儿。我没动，说，夜深了，看豺狗子来了。宝音巴特尔交代过，草原上有豺狗子，上个月，他家的一头牛犊就被豺狗子掏空了肚肠，嘱咐我们一定把帐篷拉严实，还在白房子外墙接了百瓦的电灯，通夜照明。白素贞依然不看我，说，豺狗子又不欺负女人。这话听起来怪怪的，像我在欺负她一样，像我比豺狗子都不如一样。又干坐一会儿，我起身，钻进了冯师傅的帐篷。冯师傅分明没睡着，可装出熟睡的样子。装得再像，我也能感觉到他骤然升起的安详。没过多久，我听见了白素贞进帐篷的声音，还有锁拉链的声音。除了这两种声音，她几乎是无声无息的。</p>
<p>第二天起来，她问我，你怎么一夜没睡着？</p>
<p>气味太冲人了，我说。</p>
<p>她阴着眼睛：你太爱嫌弃了。</p>
<p>我很想反问她，你不是也没睡着吗？不然怎么知道我没睡着？</p>
<p>从草原回到海拉尔城，我们又住在星期天宾馆。我的房间打不开，到大堂重新刷卡，结果她也在那里，她的门也打不开。我对她说：我下一站去齐齐哈尔，你呢？这是我第一次主动问她的行程。她冷冷地说，你要是让我去，我就去。从这时候起，她就吃定我了。她知道我对她有了依赖。的确是的。多年的外出采访，让我尝够了孤独的滋味儿。这次，我从漠河到广州，纵跨30个纬度，有一年，我去川西甘孜州采访，虽然空间上没这次遥远，时间上却更遥远，花了将近两个月，满一个月后，我简直要疯了，但我不跟谁说一句话，我是出来采访的，本应该多问多听，但就是不想说。孤独的意义，不是让人话多，而是让人沉默。我只跟我的拉杆箱说话，它是我唯一的伴侣，即便在荒郊野外，只有鹰飞，不见人影，更不会有窃贼和抢匪，我坐下歇息时，也把拉杆箱搂在怀里。这次有她，幸亏有她，否则我的感冒不会好得那样快，而且就气温而言，我是从冬天走到秋天，再从秋天走到夏天，也就是说，我要跨越三个季节，尽管事实并不如此，但在感觉上，那是多么漫长的时日。</p>
<p>然而，一个小我十多岁的女人，一个表面熟悉实则完全陌生的女人，怎么可以这样吃定我。我说，齐齐哈尔又不是我的，去不去是你的事。她说，你什么时候走？我说明天。我也是，她挑衅地扬一下头，发丝从鼻尖上分流开，露出白亮的脸。我吃下一颗定心丸，却做出淡然的口气，请她一同去吃饭。这些天来，如果不是我包了车，请司机吃饭的时候搭着把她叫上，我是不叫她吃饭的，她也不叫我，我们各吃各的。这是我第一次单独请她。</p>
<p>对我的邀请，她很高兴。是不加掩饰的高兴。她就这样，时时比照见我的小来。说不清从哪天起，我的生活中充满了掩饰，本来是东边的话，却非要拿到西边去说。她问我请她吃啥，我说由你点。她两手握住，举在噘起的嘴唇底下，说，人家不知道吃啥嘛。我说，就吃冯师傅说的白蘑菇，现在虽然没有新鲜的，可晾晒后的蘑菇更香。她嘻嘻笑着，耸了耸肩，说现在太早了，我们转转路好不好？还不到下午五点，吃夜饭的确早了点儿。</p>
<p>俩人去房间放了行李，出了宾馆，右转至胜利市场方向。是路人指点的，那个热情和善的老人大概没听懂我的话，那条大街没什么吃的，胜利市场就是个卖衣物杂货的地方。走到市场门口，她说，你不买件外套？这也是她第一次关心我穿得太少。我说不了，我的感冒已经好了，相对于北极村，这里又是南方，暖和得我都有点儿发热。然后左拐，走上另一条大街，这条街上有一家接一家的酒楼，我朝酒楼里张望，她却拉我走，说还早呢，你饿了吗？我说不饿。走到中段，见前方房屋低矮，全不是这边的气象，我说好啦，再走就吃不到白蘑菇啦。她说怎么会呢，白蘑菇是他们的土产品哪。又是差不多半小时后，到了一个大众饭馆门前，她按着肚子叫：唉哟，饿得不行了，吃吧。这种地方，我们那里叫“苍蝇饭馆”，临近暮秋的海拉尔，倒是没见苍蝇，但人的气味盖过了饭菜的气味，墙壁黑不溜秋，地板和桌面流汤滴水，用过的脏纸扔得到处是。我是请她，怎能这样不讲究？可她已经进去了。</p>
<p>油腻腻的墙角有个空位，她去那里坐下，且开始点菜。自然，没有白蘑菇。即使有，太贵的话，她也不会点。她点的全是家常菜。点完菜，回头看我。我想起她说我爱嫌弃的话，便装得笑眯眯的，只是说，是你自己选的地方啊。紧挨着她的，是个满脸雀斑的妇人，妇人扭过脖子瞄我一眼，将半碗米饭倒进萝卜汤，几口刨下去，走了，我便坐了。</p>
<p>还没开吃，门口响起一个昂然的声音：两块钱的米饭！是个乱发脏脸的中年男人，拿着顶铁灰色的圆帽。跑堂的漠然地瞅瞅，舀来一大碗，递给他，把他装在帽子里的两元钱取走了。没有位置，他就站着。他说，把萝卜汤给我舀点儿。跑堂的说，我们这里只有萝卜加汤，没有萝卜汤，你要萝卜加汤，就是五块钱一份。那人说，我只有两块。跑堂的说，那还要什么萝卜汤？那人杵在那里，然后分辩说，你不给我汤，一碗干饭，怎么吃？跑堂的说，要吃就吃，不吃就算了。他说，加点儿汤。跑堂的不理他。他说，加点儿汤。就这么干巴巴的一句，不停地重复，本是求情，听上去却像命令。跑堂的恼了，快步走过来，将两元钱扔进他的帽子，夺过他的碗，回身，啪，倒进了蒸锅。那人脸上有了一层红，红从黑肉里透出来，变成黑红，接着一串鼻涕挂下来。他用袖子擦着鼻涕，驼着肩，步态不稳地朝门外走，同时，将圆帽里的钱捏在手里，用帽子断断续续地拍打着弯曲的腿部。</p>
<p>白素贞看着我。我摸出十块钱，叫她去给他。她没拿，出去了。</p>
<p>透过攒动的人头，我看见她拦在那人面前，跟他说着什么。几分钟后她回来了。她说：我给他钱，他不要，叫他来一同吃，他不干，还骂我。我知道这种人，骂我，是自尊心提醒他起码应该做的事，但要是你真心对他好，强拉他来吃，他立刻就会感觉到温暖，立刻就会谦卑到坑里去。但是我又不能那样做，有你在这里……你太爱嫌弃了。</p>
<p>然后她轻声说：你这么爱嫌弃，我都不敢给你讲我自己了。</p>
<p>就这么轻轻一句，在我心里投下一枚炮弹。</p>
<p>也正是对炮弹的感觉：期待它爆炸，又害怕它爆炸。它迟迟没有爆炸。我要去排爆吗？不，最好别去碰。就这样，我们去了齐齐哈尔。我是带着任务的，每到一个地方，走哪儿，不走哪儿，都以完成任务为准。她无所谓，在她心目中，似乎没有一个地方不值得走，因而走哪里都是好的。我们去了小民镇，接着去大民镇，这两地是齐齐哈尔大棚经济示范区。大棚之外也种玉米，正在收获，一个农妇将玉米秆砍倒，席地而坐，把棒子扳下来，用根三角形竹签将头子一挑，三两下，棒子的衣服就剥掉了。剥出后放進垄沟，用拖拉机运回家。若要运往外地，便用统一规格的绿袋子装了，码在马路边，等候车队一齐南发。这让我想起一件事，是听父亲讲的：20世纪70年代初，四川遭遇特大旱灾，庄稼绝收，便靠东北的玉米接济，拆开每个包装袋，里面都有张字条：送给四川懒汉。有的不会写懒字，或者是故意，少了竖心旁，懒汉变成了赖汉。四川饥民拿着这字条，朝东北方向鞠个躬，再把字条张贴在显眼处，一时间，乡村里的人舍猪圈，城市里的道旁树、电线杆和公交车，都贴满了那样的字条，先是激励自己，后来激励的意味少了，变成了自嘲，招呼对方，叫一声：懒汉（或者赖汉）！这成了他们统一的名字，也成了血脉里的记忆。我把这事讲给白素贞听，白素贞笑，笑得很欢乐。我们站在地边，风吹过来，伏在地上的玉米叶，也抬起半个身子，哗啦哗啦地笑。笑过后，白素贞说：其实懒汉是可敬的，懒汉从不觉得时间不够用，他们在一个地方待半天、一天，也绝不认为是在浪费时间，因此时间在他们那里没有权威。时间对皇帝都有权威，但对懒汉没有。她伸出右手的食指，点一下我的下唇说：你不配称为懒汉。</p>
<p>我的胡茬把我自己扎痛了。</p>
<p>而今回忆起来，那应该是我们第一次肌肤相触，结果却是我自己扎痛了自己。</p>
<p>你有那么多焦虑，她接着说，怎么能叫懒汉。</p>
<p>她能看出我的焦虑？我觉得自己已经很放松了。快四十岁的人，再蠢笨，再执着，也大概知道了从早到晚地忙，并不一定能忙出个气象，倒不如敛了翅膀，让心回到身体。何况这是在异地，还不是在异地的城里，是在乡野；城市催人追逐功名利禄，并因此焦虑，乡野却给你宽博，叫你放下。——或许，焦虑已深入我的骨髓，成了无药可治的病？</p>
<p>但我并不赞同她。她说的懒和我说的懒，不是一回事。</p>
<p>而且，她是否又知道我的另一种焦虑？我把一个身份不明的女人带来带去，带到何时才是终了？难道要一直把她带到广州，然后从广州带回山城？</p>
<p>她说我在宝音巴特尔的帐篷里一夜没睡，其实我是睡过一会儿的，我还做了个梦，在梦里，前妻跟我通电话，说女儿做了个梦，把自己哭醒了，女儿梦见，我，也就是她生理上的爸爸，变成了一只猫，被人用胶水粘了，贴在墙上，她想把爸爸救下来，可贴得太高，够不着，她站到凳子上去，墙也跟凳子一起升高。我在梦里想这个电话，越想越阴沉。那个把我贴到墙上去的人，会不会就睡在另一顶帐篷里？梦和现实，就像两杯倒在一起的牛奶。我醒来后，就跟在梦里一样，直到伸手碰到冯师傅毛茸茸的腿，才清醒了些。我只有在做梦的时候，才会在女儿的梦里出现了。前妻也不会给我电话了。我一直开着手机，一直等她的电话，可等来的，是头儿问我的进展，然后说刊物经费如何紧张，再说家田你辛苦了，在外面要注意安全。后面的都是套话，要我知道刊物的难处，节约开支才是重点。理解了头儿的意思，我有些难过，我在那家杂志社干了十几年，它的绿肥红瘦不仅与我息息相关，还跟我完全是一体的。不管多远的路，我都是买硬座；不管是我单独吃饭，还是请司机和白素贞同吃，基本上是进小馆子，便宜不说，还拿不到发票。头儿更让我难过的是：他的电话不是我盼望的。当你扯心扯肺盼一个人的消息，除了你盼的那个人，别的任何人都让你烦。不过，烦过了，我又感念着头儿。在那座城市里，到底还有人想到我，不管是出于什么原因。当然，父母会想我，但那是理所当然的想念。我要的是另一种想念。另一种想念已经不会给我了。</p>
<p>白素贞又在说话，她说，你不高兴哪？</p>
<p>我说没有啊。</p>
<p>她用肩头轻轻撞了我一下，弯腰摘下一片半青半黄的玉米叶，问我，喜欢《聊斋》吗？我点点头。她说那里面有个故事，一个狐狸想娶人家的女儿，人家不愿意，狐狸生了气，带兵杀来，却被人打败，狐狸遗下大刀，亮如霜雪，捡起来一看，却是玉米叶子。我说不是玉米叶子，是高粱叶子。她说讨厌，能用高粱叶做大刀，还不能用玉米叶做大刀吗？说着，把玉米叶撕成条条，编成辫子。我心里一动。九天之下，有那么多人，只有这个人离我最近。可这个人是我的什么人呢？我不知她的来历，也不知她的去向。</p>
<p>我再一次问自己：要不要去排爆？</p>
<p>排爆的意思，就是让炮弹爆炸。她爆炸了，就没有她了。</p>
<p>没有她……我不敢去想。人的心跟胃是一样的，空了就要东西填。是她填了我的空。</p>
<p>随她去吧，我想，她愿意这么跟着我，就让她跟着好了。</p>
<p>我发誓不再焦虑，至少不再因为她焦虑。我领着她，行走在齐齐哈尔的大地上。齐齐哈尔是达斡尔语，边疆的意思，这个命名，让人对一个民族和它昔日的故事浮想联翩。但那已经过去了，迁徙也好，征战也好，都过去了。过去的事，不管有意无意，都会被遮蔽，或多或少。白素贞说，出现过又被遮蔽的事物是最神秘的，未知并不神秘。即使我变成猫，且被粘到墙上，也属于未知，属于算不上神秘的那部分，我实在不该去多想。</p>
<p>到了齐齐哈尔，当然要去扎龙。那片乌裕尔河下游的湿地，奔涌着浩大秋声。我要采写的，无非也就是秋景、秋意、秋收和秋声。至于白素贞说的二十一岁的秋天，十八岁、十六岁抑或十四岁的秋天，那是另一种地理，是埋在记忆底层、最好彻底忘却的地理。从高大的白杨和低矮的葡萄园穿過，不久就听到溪水潺湲，接着是河吼。那不是溪水，也不是河，是芦苇尖儿秋声的合唱。紧跟着，便望见白花花的芦苇的海，叶子已变黄，再经几朝风，叶便掉光，只剩了秆，待湿地结冰，便将秆割下，用于盖房、造纸、制装饰挂件，或打成帘子、扎成捆，出口日本，听说日本人做寿司要用到它。芦苇如同动物界的牛。上午十点过，放飞丹顶鹤。丹顶鹤头上的红，像枚印章。它们听从哨音飞行几圈，就被引到水边草地，一管理员提着铁皮桶，桶里装了蠕动的小鱼，管理员用漏瓢舀了，唤一声：“嘚儿——”然后撒出去，丹顶鹤便去啄食。小鱼蹦跳着，不让啄，它的生命，就在三两下蹦跳中短暂延续。人也如那些小鱼，在生活里蹦跶，但最终要被吃掉，不被丹顶鹤吃掉，也被光阴吃掉。这其中似乎没什么悲哀，连惆怅也说不上。但白素贞不这样看，她说鱼怎么会不悲哀呢？对生命没有思考的生命，一定觉得生命重要，每分每秒都重要，只有对生命思考过，才会把生命看轻。</p>
<p>头上淋下一串水滴，是管理员用长长的竹竿挑了水草，撂到干坡上，让丹顶鹤吃。它们吃了鱼，还要吃水草，就像人吃了荤还要吃素。吃饱了，它们就跟游人混在一起，其中一只火气特别大，谁有招惹它的举动，甚至意向，它就叼谁，迈着长腿追，还扇着翅膀追。不过它追的都是年轻女人。看来，那家伙要么对年轻女人特别恨，要么是个色鬼。被追的女人奓开手跑，夸张地尖叫着，可要是它不追自己去追了别人，又站在那里失望着。</p>
<p>白素贞静静地盯住它和她们。她的情绪似乎很低落。</p>
<p>回城的时候，她说：万物都跟人学坏了，都有了戏剧型人格，都在表演。表演很坏，比坏本身还坏。如果是表演善良，比恶毒还坏；如果是表演温情，比残忍还坏。这时候她望着路边墙上的一则广告，是出售银狐的广告。你知道银狐吗？她问我，却不要我回答，说，银狐就是北极狐，养在这里，它们要受罪了，气候不适宜嘛。接着又问：人为什么养银狐？依然不要我回答，自个儿断然地下了结论：为了扒它们的皮。</p>
<p>我悚然一惊。</p>
<p>可你为什么把一根骨头放进被窝？</p>
<p>为了长久，她说。</p>
<p>当我体会到“长久”的意思，就想到了齐齐哈尔的银狐。这种联想是沒有逻辑的。我跟她一样，学会了不要逻辑。尽管人都是要死的，但死亡并不能成为生命的目的。对此，她不置可否，只是我行我素，把那根骨头放在枕头边，睡下了，就放进被窝。她像是爱上了它。但她不承认。她说，是你不爱我了，就觉得我爱上了别人。说着“别人”的时候，她把骨头举在眼前。白沙沙的月光从天眼泼下来，把杏树叶子打得啪啪响，月光便从叶片上溅开，溅得满屋都是。我们有多久没做爱了？她幽怨地说，眼睛依然看的是那根骨头。你去跟它做爱好了！我翻过身躺下，闭上眼睛。眼睛一闭，月光就溅不到我了。</p>
<p>好一阵过去，她一动不动。</p>
<p>半岛上的鬼魂，半岛背后的山魈，半岛前方的河流，还有河流的吼声，都一动不动。万物变成了固体。正是这时候，我的焦虑和小肚鸡肠，显得是多么渺小和可怜。我曾看一部片子，讲人类消失后的地球，说几小时后，全世界的灯就会熄灭；三天后，大多数地铁会被水淹；十天后，关在家里的宠物将因饥饿和缺水死去；一个月后，核电站的冷却水蒸发殆尽，从而导致核爆，数以百万计的动物会患上癌症；一年后，天空将有绚烂流星，那是人类发射的卫星纷纷坠落；二十五年后，植被将覆盖马路和广场，侥幸逃生的大型犬将与狼交配，但有一些城市会变成沙漠；三百年后，钢制建筑将崩塌，沼泽蔓延，海洋里的哺乳动物会无比开心；五百年后，所有现代人造建筑会成为废墟；一万年后，人类存在的证据只剩美国总统山、中国长城和埃及金字塔；五千万年后，塑料瓶和玻璃碎片成为人类文明的最后守护者；一亿年后，塑料和玻璃也不复存在；三亿年后，地球可能出现新的智慧生物，但他们并不知道曾经有一种生物叫人。此外我还看过一部片子，讲生命消失后的景象，那将使一切发生改变，包括地球；地球上将布满干尸，然后植被褪去，衣衫除尽，变成现在金星的模样，“看上去从来没有过生命”……当我周围的一切静寂下来，我就想到了那两部片子。</p>
<p>我不知道自己还有什么放不下的。</p>
<p>我说，还不睡？</p>
<p>声音响如雷鸣，把我自己吓了一跳。我使劲揉耳朵，揉得切割似的痛，才又听到了月光泼溅的声音，河吼也从远处传来。河啊，你为什么要日夜奔流，你的远方是江海，但江海不一定是你的家，更不一定是你的归宿。十多年的游走，每见到一条河流，我都这样问，但没有一条河回答我。这时候我问夜里的清溪河，清溪河也不回答我。她同样不回答我。她依然一动不动，且没有任何声息。我翻过身，摸她。我首先摸到的是那根骨头，然后才是她。她跟骨头是一样的温度。她体质并不弱，但特别怕冷，在别人那里是夏天，在她那里就是秋天。她总是跑到季节的前面，或者后面。分明怕冷，可她睡觉时喜欢一丝不挂。这时候，她胸脯以上裸露着，我把被子拉上去，为她盖了。她掀掉，说，我不值得你珍惜。这样的赌气，在我们结婚之前就开始了。今天夜里还能说出个理由，而许多时候是说不出理由的，本来兴高采烈，脸色突然就变了，变脸之前，说话的声音已经变了。我们之间，仿佛横亘着坚硬之物，我们相互靠近，却被它碰了额头。都很清楚那坚硬之物与对方无关，却要怪罪到对方身上，于是赌气，于是吵。每次吵架都是重复，连程序也一样：自怜、攻击、和好。自怜是退，可对于相爱着的人，那却是最凶猛的攻击，因此真正攻击对方的时候，已经走在和好的路上了。但此时此刻，她的退才刚刚开始。她说我算什么呢，我无非是你从路上捡来的，就像捡个垃圾，捡起来是为了扔掉。她说你本来就爱嫌弃，品德又很高尚，我自己作为垃圾掉在地上，你嫌我碍眼，怕脏了你的脚，也怕脏了别人的脚，就把我捡起来扔进垃圾桶。她说你把我扔进垃圾桶，好像是让我归位，给了我一个家，我该感谢你才对，可你的意图你自己清楚，你就是不想让我去到处脏。她在退的时候，已经开始了攻击。</p>
<p>我希望她继续说下去，可她不说了。</p>
<p>她不说，我就得说，否则事情会变得严重起来。对此，凡谈过恋爱或有过婚姻的人，相信都有刻骨铭心的教训。我说你这不要良心的！说着抱住她的腿，把她往被窝里一扯。做爱，是我们和好的方式——唯一的方式。做爱让世界只剩下一张床，别的都不存在，包括回忆、憧憬和想象。她立即变得那样温柔，饥渴的、攫取的、全身心奉献的温柔。她说，你，才，不，要，良。心字没吐出来，吞下去了。心字的主笔“乚”，是一把刀，这把刀把她刺伤了。她流出了眼泪。她的眼泪是浑浊的。或许是月光太白，让她的眼泪看起来浑浊。她体内存水很少，包括眼泪。我为她擦泪时，她伸手去抓那根骨头。骨头在她的腰弯处，我把她手臂括起来，她抓不着，几番努力，终于放弃。放弃后说：我说个事，你别生气。我说你说。她说这事说出来，不符合你的原则，你的原则是可以想，可以做，但不能说，或者可以说，却不想，更不做。我说，你说。她就说了。她跟她外婆感情最好，她外婆去世的时候，她正在念书，外婆已下葬，父亲才打电话告诉她，她没哭，只是心里空，当天晚上，她去校外参加一个party，玩得很疯，把外婆去世的事全忘了；一个四十岁左右的男人勾引她，跟她跳舞时脸贴得很紧，接着又把身子贴得很紧，他把她顶住了，但她没回避，聚会没结束，就跟他走了。她跟他玩得很疯，尽管那是她的第一次。直到和那个连姓氏都不知道的男人分开，她的整个身体才变成泥石流，才知道外婆去世对自己的打击有多深重。最爱的人死了，她说，你最渴望的事就是做爱，而且想一直做一直做，永远不要停下来，朱家田你不要怪我，这绝对不是我一个人的经验。我说，哦。啪的一声扇在她脸上。月光吓坏了，忙往一边躲，她的脸呈一团阴影。你打人，她带着哭腔说，然后十根指头钢筋似的抠住我的肩胛，打我！快打我！她哀求着。月光躲得远远的，但我能感觉她的眼神和鼻息一样灼热。</p>
<p>人的倾向分为两种，无论从哪种角度。比如不是施虐就是受虐。我似乎属于后者。她也是。后者占多数。后者在承受的过程中，把自己偷偷地放到了道德的高地，可见道德有多么重要，连宣称自己不讲道德的人，道德在他们那里也很重要。正因如此，我暂时的施虐在她的受虐面前，迅速地一败涂地。不过我也乐于享受背叛自己的快感，骑在她身上，左右开弓。结果发现，打人比挖地更累，所以打人不值得提倡。我趴下去，接着打，手拐几次碰到那根骨头。她借那根骨头，让我跟她一样疯，一样充满攫取的欲望。</p>
<p>后来，挖出的骨头越来越多，并且还挖出一个骷髅。骷髅的嘴里长着一窝兰草，将兰草拔去，就见那嘴大张着，像在呼喊。白素贞问我，你猜他在喊什么？我说是他还是她，我分辨不出来。她说不管是他还是她。我说是在叫活着的人好好活吗。她说，你真是个好人。这话从她嘴里出来，并不是褒扬，她对好人不信任，还说好人手上没污点，但也没东西。</p>
<p>那你说他在喊什么？我问她。</p>
<p>她沉下眼帘，叹息了一声，没回答。</p>
<p>老实说，我怕她回答。在许多方面，她的想法与我背道而驰。其实是与我所代表的平庸背道而驰。平庸，有时比虚伪更可怕。</p>
<p>我把挖出来的骨头拢到一块儿。它们都带着泥土。包括白素贞放在床上的那根，虽去大河里认真清洗过，骨缝里依然带着泥土，掏不出，也刷不掉。我就此问她，你外婆死后，是放在家里的吗？当然这是故意问，她告诉过我，每次回到故乡，她都要去外婆坟前坐几个时辰；他们那里的坟有寝门，分内外两层，内层埋棺，是要闭的，外层不闭，大概是方便雨雪天气也能祭奠，她就坐在外层的寝门前，跟里面的外婆默默地说话。她没看出我是故意问，说，怎么可能放在家里？死者入土为安。话刚出口，她瞅我一眼，脸即刻红了，像犯了错误的小学生，然后去我们规划的菜园百米之外，紧靠山根的地方，刨坑。坑刨好，她把骨头堆往那边搬运，搬运完毕，进了小屋，将床上的那根也送过去，一起埋了。</p>
<p>他们或许是仇人呢，却让他们住一间屋。做完那件事，她怅然地说。说不清为啥，我立马想到了法海和白蛇。我说没关系，仇人身上不光是仇恨，仇人提醒你的爱在哪里，还帮你挖掘身上的潜力。她没言声，不知道是不是认可了我的话，但此后再没为此纠缠。</p>
<p>我们每开出一块荒地，就撒上菜籽，埋了骨头的次日清早，菜籽便发了芽，像那两者间有什么联系。然后，我们迎来半岛的第一个春天。在一口潭边，我们挖了个半亩见方的水田，尽管没犁，也能存水，将谷种撒进去，秧苗很快就生起来了，青幽幽地长到两拃深。白素贞挽起裤腿下田，将秧苗拔出，再一行行栽插。田水由浑变清，倒映着蓝天和细细的苗影，苗影在天地之间，见风就长，把水里的天盖了。自从来到半岛，我们从没见过青蛙，但水田里有了白胰子，从白胰子里钻出蝌蚪，当蝌蚪掉了尾巴，蛙鸣声就从稻秧升起，白天稀疏，夜晚生动。我们真的成了世界的创造者，成了这座半岛上重新孕育出的智慧生物。</p>
<p>这种虚幻的感觉如果能够延续，像白素贞所说在某种情景下做爱一样，能一直做一直做，该有多好。遗憾的是，世间没什么能够“一直”。白素贞死了，所有梦境都被戳破。“实指望做夫妻天长地久”，白蛇娘娘这样悲吟；她悲，是因为“实指望”成了被烏云遮透的天上月，被太阳炙烤的瓦上霜。白蛇娘娘和许仙的故事，到了我和白素贞这里，调换了角色。白素贞睡在杏树下，我睡在床榻上，相距不到十步，但死和生，构成了最遥远的距离。不管承认与否，我和她是分开了。多年前我读过一首诗，诗中说，当我们相互分离时，也离开了我们一起去过的所有地方。诗人列出的地方包括：被忽视的郊区，被烟熏的房舍，过了一夜的镇子，发出恶臭的亚洲旅店，从雅典到德尔斐的道路，小小的山区教堂。诗人说，当我们相互分离时，我们也离开了它们。可诗人记得，“我们”在郊区住了一个月，在亚洲旅店正午的暑热中抽烟和做爱，在山区教堂里，油灯穿过整个夏夜。诗人跟我一样，渴望永久，做爱后的短暂安眠，感觉也是“睡了一千零一夜”。他把时间拉长，却强化了幻灭的深度。分离，才是他们两人的真理，也是我和白素贞的真理。白素贞死后，我靠住她不会呼吸的身体，就想到了这首诗，也回忆起我和她走过的地方。那些地方将被她带走——已经被她带走，因此我的回忆如同对往生的回忆。</p>
<p>那年秋天，我和她离开齐齐哈尔，去锡林浩特，接着去通辽。通辽盛产粮食，也盛产伟男杰女，孝庄皇后、僧格林沁、嘎达梅林皆生于此。在通辽稍作逗留，便去北京。北京太大，太大的地方不能用眼睛看，只能用鼻子闻，用皮肤感觉。华北平原秋正当时，北京人正忙于“抓秋膘”，胡同和餐馆里飘出羊膻味儿。从北京至烟台的车上，不知是因为连日奔波的疲惫，还是各怀心事，我和白素贞昏沉沉的，都没说话。当许多人掏出电话，向家人或朋友报告自己的归来，请他们去车站接，或相约去哪里喝酒，我才清醒了些，才知道又在车上度过了一个夜晚。窗外晨曦微露，但月亮还挂在剪影般的柳梢头。月亮和那些电话，让我怅惘。人人都在回家，而我的旅途，似乎没有终点。瞄一眼身边的人，她闭着眼睛，皱着眉头。皱眉头的动作证明她没睡着。是她，拉远了我回家的路，尽管我在事实上没有家。</p>
<p>我想简化行程，去了烟台，就直奔栖霞。那是著名的苹果园区。果园里搭着铁架子，也不知做何用途。他们把收获苹果，说成苹果“下来”：将军下来了，红富士还没下来。像苹果长着腿，它们自己爬上去，待够了，就下来了。在山东，以将军命名的特别多，苹果叫将军苹果，烟叫将军烟，想必，与这块土地上在革命年代出过不少将军有关。栖霞城区乱得很，也脏，卖水果的反而不多，多的是鞋店，满街都是。人言，喜欢囤积鞋子的人，前生定受过腿伤，这里一马平川，又不像我住的山城，腿受伤比不受伤还难，怎么也喜欢鞋子？或许，他们的前生在山城，而我的前生在这里。这么一想，当我看到栖霞城外的白洋河里，污水推动垃圾艰涩流动，就不再只是厌恶了。一座城市的品质，就看它是否对得住植物、动物与河流，人们对不住白洋河，这个“人们”，也包含我在其中了。</p>
<p>我得承认，这是白素贞教给我的。</p>
<p>她说我爱嫌弃。嫌弃意味着置身事外。</p>
<p>但我们已经很久没说过一句话。两个相跟着的人，半个钟头没说话，就可以称为很久，而我和她至少有几个钟头没说话。意识到这一点，我感觉到，她已洞察了我简化行程的意图，便主动与我拉开距离。她总是主动的。她要离开我了。要去补救吗？可我心里装得满满的，盛不下她。把我装满的，是前妻，还有女儿。前妻与我早已相互分离，怎么没有离开我们一起去过的地方？别的地方可以离开，那个家却没法离开，我不应该住在那里，我失算了。我正想着这次回去后立即把锣锅巷的那套房子卖掉，耳边却响起她的声音——白素贞的声音。我饿了，她说。好，我们吃饭去。我的语气是从没有过的柔和，声音却来自远处，我自己都能听出来。从河边走到街上，她说，回烟台吃算了。要坐一个多小时车呢，你不是饿了吗？她斜脸望着别处。如果我态度肯定，不管是在栖霞还是回烟台吃饭，都能做一个决断，我们的未来恐怕是另一个样子。许多人的未来，都由一个微不足道的细节造就，我知道这一点，但我还是把决定权给了她，问她到底是怎么想的。回烟台，她说。车站在白洋河的那一边，过桥的时候，我就后悔了。其实是我的腿在后悔。我想歇一歇，若在栖霞吃饭，就能歇上一会儿了。但我的腿成了我的心，我的腿在跟着她走，她控制了我的腿。</p>
<p>在烟台火车站附近，俩人吃了一大盘水饺，还要了份油炸带鱼。我去结账的时候，却被告知已经付过账。我过来问她，你怎么……她在整理双肩包绞起来的背带，细声说：对自己爱的男人，我不喜欢花他的钱，我花你的钱花得太多了。</p>
<p>这是她第二次表白。</p>
<p>然而，她这表白一点儿也没给我安慰和快乐。除了我心里堵，没法把自己腾空之外，还因为，从另外一角度去理解她的话，就是：对自己不爱的男人，她是要钱的。</p>
<p>一个中年农民背着手，在夕阳下看青葱葱的玉米地。</p>
<p>一个年轻女人在河汊畔割红苕藤。</p>
<p>——这是烟台留给我的最后印象。</p>
<p>一个妇人包着白头巾，在晨光里走。</p>
<p>一个老人拉着一只羊，在墙根下走。</p>
<p>收割过而且打理过的庄稼地，白晃晃地袒露在天空底下。</p>
<p>——这是安徽留给我的最初印象。</p>
<p>但我们并没下车，我的计划是从郑州转车去合肥。俩人的车票都是她出钱买的，她坚决这样。而且买的是卧铺。她似乎要把花过我的钱加倍还回来。莫非郑州是她的最后一站？这样也好，我对自己说，这样也好。暗自说了几声好，就把自己说饿了。是心饿。我不再想我的前妻。前妻、前夫这样的词语，本身就很荒诞，妻就是妻，夫就是夫，没什么前妻前夫。我不想前妻，连女儿也不想了。只想她。她睡中鋪，我睡下铺。我对面是一对四十多岁的男女，一看就不是夫妻，因为彼此都有很强的身体上的渴求。男人躺着，把腿架在女人怀里，女人搂着那条腿。男人时不时捏女人的肩背，并且把手从腋下伸过来，摸女人的胸。四十多岁的夫妻不会这样的，尤其是在公共场合。那男人生得漂亮，女人也漂亮，不过，毕竟上了些岁数，只能从女人脸上打捞漂亮的旧影。男人刮着铮亮的光头，裸着上身，脖子上戴一圈粗大的银项链，说话声音带劲儿，吃东西很能吃，吃后满身发红。</p>
<p>铁轨的声音在夜色里流淌，使夜色变得无限深远。那是从梦里穿越的声音，把梦分割，驱赶着梦的碎片，飘向更远的远方。我害怕自己的梦被驱赶，便醒着。躺在我头上的人醒着吗？我起了身看她，她脸朝里，头发微微抖动，有一绺掉在床栏外，我捋上去，让它躺在她身边。许多个日子过去了，我还经常想起握住那绺头发时的感觉。女人的头发是女人的另一副身体，我握住她的另一副身体，让自己清凉，也让自己战栗。</p>
<p>窗外墨黑，偶有一盏路灯，照一下就还给荒野，像亮一下就炸裂的灯泡，比亮之前黑得更稠，更有压迫感。我离开床铺，走到车厢接头处，那里有灯一直照着。刚站定，就有个小个子男人过来抽烟，并且给我一支。我本来不抽烟，但也接过来点上了。他像黎昭国那样，把嘴噘到天上吐烟圈，只是吐不成兔子雀鸟鸡鸭小狗，但七八个烟圈环环相扣，也算他的本事。这么表演了一番，他突然说：我都四十七岁了。是吗？倒看不出来。这是实话。他理着寸头，不仔细看他的脸，简直像个中学生。我这一辈子，他说，举个简单的例子，干过记者、行政干部、IT、商人，现在嘛，说白了，我是游走江湖的医生。“举个简单的例子”“说白了”，都是他的口头禅。他说话时挺着牙帮，像在嚼骨头，且把日常道理说得像是自己的发现。医生是干啥的？治病救人的；我为啥当医生？说白了，因为我良心未泯。又一个不要逻辑的家伙。中国我全走过，他说，举个简单的例子，我走哪里都是给人治病，我给中央首长——具体是谁，兄弟，我只能保密，你别怪我不耿直——治过病，给李连杰、张曼玉、谢霆锋治过病，去年钟南山把我请去，让我帮他配制治疗心血管病的药方。我行医，病人有钱就给，没钱拉倒。我这是从东北回来，去东北是给人治病，下一站到洛阳，说白了，还是给人治病。举个简单的例子，我游走四方的路费，都是病人给的，车票也是他们买的。说到这里，他望着我，目光炯炯有神，可我知道，这是一个孤独的人。我问他鼻炎怎么治，我女儿有鼻炎。鼻炎这东西，他说，中医西医都治不好，说白了，只有我治得好！你花两块钱就能治好：辛夷二十克，苍耳三十克，和在一起捣碎，天天闻，闻十二天半就好了。两味药的确用于治鼻炎，但这只是普通的方子，想把鼻炎治住，远不是他说的那样简单。可也只有在说到药物时，他才显出平和与稳沉。我本想再问几句鼻炎的事，但他已经转移话题，说他从小习武，是武林中人。我有些头疼，身体像悬浮着，就说我过去睡了，他猛然噤了声，眼神暗淡下去。我刚起步，他逮住我的衣袖，说兄弟，我姓姚。我点点头，走了。</p>
<p>我没睡，坐在床铺旁边廊道的小凳上，望着窗外块状的黑和偶然的亮。</p>
<p>很久很久，也不见他过来，只不断响起他用打火机点烟的声音。</p>
<p>我不知道一个人是什么原因，变成了他这个样子。</p>
<p>也不知道是什么原因，变成了我这个样子。</p>
<p>在郑州下车，我的全部心思，都用在白素贞的步态上。人的步态就是人的心情。跟往天也没什么特别的。我都已经做好她离开我的准备了。出站后，我说，我有个朋友在这里，我要去看他。需多少时间？她问。一两个钟头肯定要的。我等你。我愣住了。我都已经做好她离开我的准备了。何必呢，一起去不好吗？此言一出，那些准备就土崩瓦解。她不言声。我给朋友打电话，说我到了郑州，朋友很高兴，要来车站接我，我不要他接，他便指点我坐8路公交，到群英路站下。挂了电话，我对她说，走。她却走到广场边，坐到一块圆石头上。我又劝她，她干脆坐到地上，靠住石头。我再劝，她冒火了，说你咋这么讨厌？脸色凶狠。去他娘的！我在心里这样说。不是骂她，是骂我自己。我不该对一个萍水相逢脾气怪异的女人负责任，我没那么坚强。吹萨克斯的王林，他前妻（又是前妻）因为公公跟小妻子玩自拍飙高音，就觉得自己没有那份坚强去忍耐，而我并不比她更坚强。</p>
<p>郑州的这位朋友已有六年不见，六年前见他时，他精力充沛，爱说笑话，现在头发全白了，尽管戴着帽子，还是遮不住发尖上奔流的岁月。见面第一句话，他说：家田，我老了。虽不伤感，却让听者惊心。他比我年长九岁，而九岁是眨几下眼睛就过了的，我也快老了。我们在他家附近的餐馆喝酒。一路上，我没喝过酒，闻到酒香，接连打了几个喷嚏。打喷嚏是有人想你。谁会想我呢？……她独自坐在火车站，让我心神不宁。</p>
<p>朋友跟这座城市同姓，是个颇有成就的作家，先前见面，最主要的话题就是听他谈创作，这次也不例外。他说生活是作家的命，也只有跟作家的命运联系起来的生活，才对写作有效。他反感某些作家吆喝着去体验别人的生活，却心安理得地丢下自己的生活。我很有兴致地听他说，但一个孤单的身影总是从头脑里闪过。我不应该这样。我和她没有关系。照昨夜那个江湖医生的口气是：说白了，没有关系。真正与我有关系的，是面前这位郑大哥。我强迫自己不去想她，跟郑大哥碰杯。几杯下肚，我也说开了。我说的是自己失败的婚姻。郑大哥是第一次听我说，非常惊讶，因为他有年去山城，见过周琴，说周琴是他眼里最贤淑的女人。而今，贤淑女人是稀有物种，何况山城那地界，女人跟男人很难分清，说话很冲，因此周琴的贤淑显得尤其另类和珍贵。他还说周琴是从古代过来的女子。唉，听了我的话，他叹息着说，或许，人只有时代，没有古代，既然如此，你就得认。他就这样安慰着我。我愿意他安慰。每个人都只愿意接受朋友的安慰。我正是从中发现，在那座生活了将近四十年的城市里，我没有一个朋友。我的朋友都在远方，包括郑大哥。</p>
<p>他没有一句责备周琴的话，但口气上是责备的，这让我难过。不管是谁，责备周琴都让我难过。我说不怪周琴，离婚是我提出的，是我的卑微让我有了今天的下场。郑大哥听后，眼睛湿润。他的眼睛很大，大得如果有风吹，他身上首先感觉到风的肯定是眼睛。他说家田，有首歌你是知道的，叫《心太软》。你就是心太软。要说卑微，世间有几个人不卑微？我们稍不小心就被骗了，这是不是卑微？不跟陌生人说话，是不是卑微？连小孩子在上下学的路上，怕遇见坏人，也有人教他们要侧着身子走，走三步就回一下头，是不是卑微？想想吧，我们的子孙就用那种姿势走路，用那种姿势面对世界，该是何等惊心动魄的卑微。</p>
<p>两个大男人，或者说两个老男人，泪流满面。流出的液体要补回来，酒就越喝越猛，脑腔里燃着酒精灯，烧得缺氧。他偏偏倒倒站起来，结了账，又请我去他家。我们肩膀搭着肩膀，出了餐馆。我完全回忆不起他家的样子，也想不起在他家遇见过什么人，又是怎样离开他家，回了火车站。我只记得，当我走上车站广场，白素贞横在我面前时，我猛吃一惊，酒也跟着醒了大半。我看了看表，已经过去四个多钟头。我还没吃饭，她噘着嘴，委屈地说，你不要良心，把人家丢这么长时间。情不自禁地，我搂住了她的腰。</p>
<p>这一搂，就像一个犹豫着是不是要下水的人，终于跳了下去。从此，你的方向就是河流的方向，一种很自然的方向。男人和女人，最自然的方向就是从相识到结婚。然而，带她回山城之前，我从没告诉过她我的过去，我只对她说过我现在是单身。直到在山城下了火车，坐在出租车上，沿南岸滨江路拐进锣锅巷，爬上六楼，进了那间屋子，她看到放在客厅电视柜上的照片，我的过去才在她心里丰富起来。那是一家三口的合影，五寸黑白照，装在镜框里。她拿在手上，笑眯眯地左看右看，然后说，蛮漂亮的嘛。</p>
<p>我知道她夸的并不是我女儿，照片上的女儿只有四个月大，无所谓漂亮不漂亮。即使女儿真是个漂亮姑娘，她也不是夸她。我把镜框从她手上拿走，本想放到某个角落里去，但那样做可能弄巧成拙，就放回原位了。你先洗？我问。你的家我还没看清呢，她说，我坐都不敢坐，哪敢洗？家里有三间卧室，一个饭厅，一个书房，我去把卧室、书房、饭厅、厨房和两个卫生间的灯都打开，让她看。她却站在电视机前，迟迟不动。而我，下意识里竟也担心她看。我觉得周琴就在卧室里。不只在卧室，还在每一个房间里，甚至在书架、橱柜、衣柜、抽屉、笔筒……里。家里的每寸空间，都充满了周琴，她正盯住这个新来的女人。这个女人跟她一样漂亮，但比她年轻，比她时髦，比她有活力——在她眼里，或许是邪恶的活力。而这个新来的女人，也正以同样的目光注视着她，作为后来者，谦卑、拘谨和怯懦，都一览无余地写在脸上。这是不公平的。我是说对白素贞不公平。我又把镜框拿上手，指着我左边的女人说，这个，早成了别人的女人；又指着女人怀里的孩子说，这个，从伦理上说是我的女儿，但一直跟着她妈妈。白素贞伸出一根指头，点在孩子脸上，往右边拖拉，如同鼠标把一个字往右边拖拉。她在想象中把那个“字”拉到我的腿上，停下不动。我不知道她在干什么。可她保持那种姿势长达半分钟，才说：孩子还是婴儿的时候，夫妻合影，只能由母亲抱着，如果父亲抱着，就怪模怪样，你说这是为什么？我不想回答她这古怪的问题，只说，我跟她早就不是夫妻了。</p>
<p>五天后，我和白素贞成了夫妻。要形容这种感觉，我只能说是满含悲哀的新奇。上天造出一男一女，让他们繁衍人类，已暗示了男女的对应关系；上天和人类订立了诸多盟约，一男配一女，是盟约之一。我跟周琴结婚，就从没想过要分开，更没想过与她分开后，还会和另一个女人結为夫妻。但这一切都变成了事实。</p>
<p>我说过，依照事实生活，才是我的本分。初婚那些天，我有空就领着白素贞逛街，熟人朝我跷大拇指，喊一声“好福气”，是我需要的肯定。我装模作样问白素贞青蛇在哪里，其实并非张狂，而是一种自我肯定。所谓生活，是在肯定下生活，否则生活就成了苦役。然而，当生活需要不断肯定的时候，已经显示了它的脆弱。我怎么也没想到毛病首先出在白素贞的口音。她说的是普通话。在我和她从北到南的途中，我也说普通话，和我交流的外地人，都是说普通话，因而白素贞的普通话就跟鸟会飞一样自然。但到了山城就不一样了。山城火锅飘出的牛油味儿里，也浸透了四川方音。在作为抗战大后方的年代，山城接纳着各地流亡者，抗战胜利后，有的离开了，有的留了下来，但几代人过去，流亡者的后辈早把四川话融进血液，他们知道，一个说普通话或外地方言的人，在本地方言的汪洋大海里，不融入，就很容易被蒸发。白素贞与我那些熟人见面，她的普通话与所有人都隔着一层。这个人，是跟我们不一样的人，朱家田和她在一起，怎么习惯？单位上的几个同事，中午闲聊时，甚至猜想我和白素贞做爱时的对话：白素贞用普通话说，我还要！朱家田用四川话说，够了噻，你咋吃饱了还不晓得放碗啰！连头儿也参与其中。</p>
<p>但头儿终于严肃起来。这天他把我叫进办公室，隔着宽大的写字台，问我：你老婆是哪里人？我说山东。这是胡诌。我不愿意别人知道她的来历。头儿意味深长地盯我一眼，像是看出了我在胡诌，说：这个不重要……我听到一些反映，说她是你从采访途中带回来的？这话我从没对人讲过，白素贞更不可能讲，头儿是听谁反映？可见世间事，要让人不知，除非己莫为。我只好承认。头儿满意地点着头，像是某件要紧的工作有了重大突破。他再没别的话要问，让我过去了。当天，财务就来找我，说我出差的发票超支。她指出的超支项目，是我从郑州以下坐的是卧铺。确实是，白素贞请我坐了卧铺，我也请她坐。按规定，我们出差是可以坐硬卧的，我请白素贞是私人掏钱，又没报双份，怎么就超支了？何况我到过的许多地方都没有餐饮发票。</p>
<p>但我没有分辩，只说把超支的部分扣除就是。我知道自己犯了一个错误，带回了一个不说四川方言而说普通話的女人。这个女人不仅说普通话，还年轻漂亮。</p>
<p>我以为这事就这样过了，不知道超支还是其次，更严重的在于工作期间谈情说爱。他们没用谈情说爱这个词，说的是乱搞男女关系。很显然，是朱家田勾引了白素贞，否则一个花朵似的女人不会跟着他走。那段时间，迷奸这个词很流行，是因为某男星迷奸了众多女星的消息在网上流布，词语造就事实，而不是事实造就词语，所以朱家田很可能是迷奸了白素贞，把生米煮成熟饭，而且连锅端，是快吃还是慢咽，都由他说了算。果真如此，就越出职业操守，牵涉到法律了。法律是道德的底线，朱家田连底线也没有了。</p>
<p>当然，没有谁去报案，只是大家都跟我有了距离。</p>
<p>这些事，我都没给白素贞说，但她时时处处能感觉到。如果在街上遇到我的同事，这个同事曾经也当着她的面夸过我“好福气”，现在却招呼也不怎么打了；即使打声招呼，也是淡淡的，且不正眼看她，像是看不起她，又像是怕她，怕她是毒蛇。白蛇娘娘不是毒蛇，只有法海认为她是毒蛇，以致让许仙身上也沾了妖气。但白蛇娘娘毕竟是蛇，“端阳节错饮了那雄黄美酒”，终于现了原形。可是白素贞不是蛇。</p>
<p>我曾对她讲，我会随时出差，她高兴得很，说你出差，我就跟着你。这也正是我的想法。她不仅能消除我旅途的寂寞，还能拓展我的思路，比如这次，我在写到大兴安岭的豆荚时，用了她的语言；我还特别写到胭脂沟的妓女坟，那些二十一岁、十八岁乃至十四岁的秋天，是她指示给我的。记得在有段板桥道上，两边是衰草，道上是死蝉，走几步就躺着一只，我捡起几只来，对它们说：秋天来了，你们就死了。白素贞接言，说，自然界的秋天可以预知，人世的秋天不可预知，这是人的幸，也是人的不幸。或许正因为知道这幸的轻和不幸的重，她避重就轻，把我们未来的生活想象得很浪漫。她说我以后跟你走，住宾馆时就可以夜夜同床了。还说，我也要像他们那样。她说的“他们”，指的是去郑州的火车上遇见的那对漂亮男女，看来，她当时也注意到两人的一举一动。我说，那明显不是夫妻。她很诧异，问我凭什么说人家不是夫妻。我说了理由，她越发诧异：难道我上四十岁后，你就不跟我那样吗？我说你上四十岁，我就五十多了。她眼里掠过惶恐的暗影，不是嫌我老，是害怕我自以为老：你五十岁过后就不跟我那样吗？我要你八十岁都跟我那样！她一直盼着我出差，出差到八十岁，甚至一百岁，让我们当着人的面，在飞驰的铁床上，我把腿伸进她怀里，从背后捏她肩背，还把手从她腋下伸过去。但我还没满四十岁，就没有谁安排我出差了。那段时间，能出差的都派出去了，计划中还有去新疆阿尔泰地区采访，我想应该派我吧，照样没有。我去问头儿，头儿说，请当地一位作家帮忙采写，今后要尽量请当地人写，这样，即使除掉给人家的稿费，也能节约一大笔开支。头儿的话我懂了。在杂志社，我成了多余的人。</p>
<p>但我还是每天去上班。作为记者，每天坐在办公室里，就相当于本该坐办公室的人每天出去乱跑一样。却又不一样。后者是主动的，而我，是从头到脚的被动。</p>
<p>整个白天，白素贞就待在家里。她想象的路上的生活，在秋天里枯萎、凋零，如那些死蝉。而在家待的时间越长，她越是感觉到，我以前跟周琴过的日子，早就像白布浸入染缸。周琴的名字，她已从我母亲口中得知。父母离我有两站路，自从周琴再嫁，我是不大去看父母了，他们老是安慰我，不知道过多的安慰是一种伤害。跟白素贞回山城的次日，我带她去了父母家，父母除了惊异，看不出别的态度。我说了白素贞的家世，以及我怎样跟她认识，还有我马上就要跟她结婚（除了马上跟她结婚是真的，别的都是胡编乱造），照样看不出父母有什么态度。吃饭的时候，母亲殷勤地劝白素贞夹菜，小白，吃，母亲说。但有好几次，她都把小白叫成了周琴。白素贞猛然间就明白了周琴是谁，朝我挤眼睛，而她自己的眼神却黯淡下去，也不像刚进屋时那样嘴巴甜甜地跟父母说话。趁母亲进厨房拿醋，我跟进去，悄声说：妈，你咋把她叫成周琴？母亲怔怔地望着我。母亲的神情让我一下子懂了：是她舍不下先前的儿媳。她不仅像喜欢自己女儿一样喜欢先前的儿媳，先前的儿媳还带着她的孙女，因此与她血肉相连。孙女以前还经常来看她，现在来得非常少了。母亲在安慰我的时候，也是在安慰她自己。回到饭厅，母亲不敢叫白素贞夹菜了。可她是母亲，在餐桌上照顾家人吃喝，既是她的快乐，也是她的责任，她终于又把筷子在盛了糖醋鱼的碟子上磕，说：你咋不吃呀周琴？白素贞彻底沉默了。母亲也彻底沉默了。</p>
<p>这天以后，白素贞再不愿到父母家去，我们结婚，我也只是告诉了姐姐；告诉一声而已，并没叫她来吃饭。我只请了几个同事。同事们那时候还在夸我“好福气”，除了说我娶了个白蛇娘娘，还说：人的艳福也是上天注定的，你看家田长得啥样？泡泡眼，圆鼻头，可人家结两个婆娘都是美人坯子！他们把“两个”两个字，说得很重。有人还问白素贞，你的前任叫周琴，你知道吗？白素贞愣了一下（是为“前任”这称呼愣的），说不知道。这么说来，你也没见过她啰？白素贞强装笑脸，说，人家是美人坯子，我又不是，我哪有福分见啊。问的人脸一垮，做出严肃到骨的样子，指着我说：这就是你家田的不对了，你应该让她姐妹俩认识，还要经常见面！我大老表你是认得的吧？结过四个婆娘，每个周末，都把前三个请到家里，进屋就各发一千块钱，让四个婆娘凑一桌打麻将。满桌大笑。笑声当中，挨个回忆以前单位上带家属过年的时候，他们跟周琴和周琴跟他们开的玩笑。白素贞故意吃了块辣椒，把眼泪遮掩住。</p>
<p>我理解她的感觉。往后的日子里，跟她说话就格外小心地避开一些词，比如我不说周一周二之类，而是说成星期一星期二。这种回避简直成了我的强迫症。对楼的王林吹萨克斯，我以前听到的就是萨克斯的声音，现在却要产生联想，由萨克斯想到小提琴，想到钢琴，想到胡琴，总之离不了一个“琴”字，因此连萨克斯这个词我也要回避。</p>
<p>有天刚吃过晚饭，王林吹出的乐声，像迷了路似的闯进我们的屋子，白素贞说，是谁在吹萨克斯？天天吹，怪忧伤的。我装着没听见她的话，扯一张餐巾纸，把鱼骨头往垃圾桶里赶，她却轻轻哼起了歌词：“那段快乐的时光，不能长久，我是多么想知道它们去了哪儿……”那首曲子叫《昨日重现》。她唱几句就停了，看着我。我没看她，但我知道她在看我。我感受到了目光的重量。这让我越发心虚，她收碗筷的时候，我到底把电视柜上那张合影藏了起来。她没有过问。一直没过问。但明显也没忘掉它。我希望她忘掉，忘掉那张合影，也忘掉我的全部过去，于是又接连换了许多家具，甚至把天然气灶也换了。但没有用。我发现她在一天天憔悴，一点点被抽空，而我自己同样如此，便又想到早就想过的事：换房子。</p>
<p>我以为她会高兴的，结果她说，我不习惯跟满城四川话生活在一起。</p>
<p>尽管意外，但她也点醒了我。既然在单位上成了多余人，为什么非要在那棵树上吊死？既然与山城有千丝万缕的联系，而那些联系又总是给你伤害，为什么不可以去别的城市？</p>
<p>我跟她商量，没想到她还是摇头。</p>
<p>我以为她是担心我牵挂父母，对她说，爸妈有姐姐一家人照顾，我完全可以放心。这是实话，姐姐姐夫都是孝子，我经常出差，少于照顾父母，父母家的劳力活儿，包括通下水道，都是姐夫包了，他比我更像他们的儿子。但白素贞想的不是这个。要说挂念父母，她就不挂念吗？她并不是石头缝里蹦出来的。她摇过了头，说：人是时间的动物，不是空间的动物。这意思是，不要说去别的城市，就是去国外，也没有意义。</p>
<p>我说不出什么来了，转脸望着窗外的黄昏。</p>
<p>在城市里很难看到黄昏，可是这天我看到了，我看着黄昏细雨似的飘落，使满世界水汽淋漓，我的脑子里，便清晰无比地浮现出清溪河上的那座半岛。</p>
<p>当白素贞缠住我，说要去那荒岛，而且连饿死也在所不惜，我才越发明白了，她要逃避的，不是四川话，而是人，普天下的人，包括父母和所有亲人。某种撕裂能给人快意，但得准备好去承受。我没有那种准备。我说，既然人是时间的动物，去荒岛不也一样吗？她说不一样，亲爱的不一样，到那荒岛上，我们可以重新创造时间！</p>
<p>我给单位上写了辞职信，并不需要批准，批不批都是那么回事，然后我偷偷给姐姐打了个电话——按白素贞的意思，谁也不要告诉，这样才走得干净——我对姐姐说，我跟白素贞要去国外发展，如果发展得顺利，就一直待在那里，不顺，很快就回来。姐姐说，国外是啥子意思？我说就是国外啊，具体哪个国家还没定。姐姐说，为啥子突然想起了？我说我一直就有这想法。姐姐说，跟爸妈商量没有？我说就是怕他们不同意，才要叫你转告，你别忙转告，过两天再给他们说。姐姐说，这么快？证明签证已拿到手了，为啥子不告诉我是哪个国家？我说哎呀姐姐，你放心嘛，只是我离开后，爸妈就全部扔给你和姐夫了。姐姐沉默了一会儿，问，周琴晓得不？为啥要让她晓得？你女儿在她手里呀！我心烦意乱，又是哎呀哎呀几声，推说自己现在忙得很，把电话挂了。</p>
<p>但姐姐又打过来了，这回她带着哭腔，说弟弟，我知道你心里不好过，自从出了周琴那事，我就知道你心里不好过。这不是多事嘛，我现在有了年轻漂亮的白素贞，我有什么不好过的！我说姐姐，哎呀姐姐……就这样吧，過两天我走之前再跟你联系。</p>
<p>事实上我们当天就走了，歇在清溪河下游的县城里。</p>
<p>次日早上，就包快艇去了半岛。</p>
<p>白素贞说，我们可以重新创造时间，但要创造时间，首先得毁灭时间。当我们在半岛登岸，站在青草茸茸的岸上，她要我做的第一件事，是扔掉手表。以往为出差看时间方便，我一直戴手表。我把表摘下来，她说我帮你扔，接过去，手臂抡了几圈，投进了烟波。仿佛是滑进了烟波里，连一点水花也没激起；它与水面相触的瞬间，便是我和白素贞与时间的告别。她要做的第二件事，是俩人都扔掉手机。手机应该属于空间，不属于时间，手机和网络让世界变小，让人群拥挤，但并不因为手机的出现，一天就变成了四十八小时，或者变成了十二小时。我说，这个也要扔？我确实是舍不得。对父母、姐姐和女儿的挂念，在这一刻锥心刺骨。白素贞上齿咬着下唇，来我裤兜里掏，掏出来，在手上颠了三下，颠第四下的时候，她没有接，手机就没入脚下的水里去了。我们站的地方是个齐塄坎，水深与河心差不了多少。她把我的手机淹死了。在我的手机里，装载着我的亲人，她把我的亲人淹死了；装载着我远方的朋友，她把我的朋友淹死了；装载着数百个（或许有上千个）因工作和各种机缘联系过的人，那是我活动的世界，她把我的世界淹死了。而今想来，我对白素贞的愤怒，那时候就埋下了种子。扔掉我的手机，她把自己的手机掏出来，没有颠，直接抛入了水中。</p>
<p>一切都如此了……</p>
<p>我们本来是有机会成为创造者的，我们种的粮食，不仅够吃，还能喂半岛和后山上的动物。她打理土地很有一套，知道时令，知道种子和土地的脾气，她把半岛的春天和夏天，侍弄得花红果绿，秋天将尽，粮食归仓。小屋里没有粮仓，我将枯树锯开，做成几个大箱子，盛土豆、红薯、玉米和稻谷；我们用最古老的方法，将稻谷在石窝里舂成米，半岛上有好几个石窝，大部分是天然的，只有一个留着錾子的纹路，也留着先民生活过的痕迹。每收一种粮食和蔬菜，我们都不收尽，留些给雀鸟、松鼠、老鼠、野兔、果子狸……半岛上的所有动物，都是我们的邻居。第二年冬天，下了很大的雪，雪从山顶盖下来，把半岛也盖了，雪花飘进小屋，屋里一直生着火，雪花还没落到杏树枝上就化了，小沟里蠕动着细细的水流。在这样的时候，鸟找不到吃的，饿得喳喳哭。我撮了几大盅米，倒在小屋外面紧靠板壁的地方，那里没有积雪。鸟们开始不敢来吃，但饥饿胜过一切，终于有一只落在米堆旁边，接着是两只、三只、上百只，啄米的声音如雨打河塬。一个星期后，鸟不再有任何畏惧，刚把米撮出去，它们就呼儿唤女地飞来了。也是那年冬天，门前来了只猴子，满身雪尘地蹲在那里，连眼皮上也是雪，眼睛眨巴着，似乎想把雪抖掉，但雪长着牙齿。白素贞首先看见了它。啊，一个乞讨的老人！她这样说着，起身向它招手，让它进来烤火，它不进来，白素贞去墙角打开箱子，捧出玉米棒子，还没递到面前，它就一把抓过，嘴里含一个，腋下夹两个，一拐一拐地飞奔而去。但它只来了这一次，之后再没有出现，白素贞朝着山野呼唤，但回应她的只有她自己的呼唤声，她伤心得很，以致吃不下饭。我安慰她说：你在加格达奇说，乞讨者是四方游走的散佛，它怎么会固定来一个地方？她想想也是，慢慢释然了。</p>
<p>当又一个春天来临，我们发现飞鸟和走兽多了起来，清晨和黄昏，雀鸟闹林，盖过河吼。只要不在田土里劳作，我们就手拉手去河沿，看那些载着人世的快艇来来去去，快艇跑过山弯，水浪才荡过来，啪！打在岸边。岸边的草特别青，长得也特别快，这景象使我恍然明白：河水奔流，是为了哺育生命；河水弯弯曲曲地奔流，是为了哺育更多的生命。</p>
<p>这是我们的美好时代。我们本来是有机会成为创造者的。</p>
<p>但我们都准备不足——不仅是我，还有她。在人世里，有些人令我们喜欢，有些人令我们厌烦，但我们知道，喜欢也好，厌烦也罢，再长也长不过一世，而到了这荒岛，前面是河，后面是山，风吹不走，日晒不干，朱家田和白素贞，在山河面前譬如朝露，完全不能与之形成互动。我们失败于开始之前。于是，那些装在手机里被淹死的人，又一个个从心里复活。但那是我们的禁忌，不能说，一旦说出口，往日时光将重返荒岛，我们的全部努力将化为乌有。</p>
<p>但总得说点儿什么。白素贞就说了。她说的是小屋的建造者。谁建的？为什么建？他在里面住了多长时间？后来为什么不在了？是死了还是离开了？我们最先挖出的那根白骨，是不是他的？……她把那个人想象成一个男人。不是满身力气又心灵手巧的男人，是建不成这样的屋子的。她说那个男人是个黑瘦大汉，长了乱草似的胡须，仿佛她见过他一样。那段时间，她天天念叨他，如同曾经对那根骨头的迷恋。有天下午，她走向半岛深处，林木和杂草，让她消失于我的视线之外，我锄完一畦菜地，她也没回来。她是踏着星光回来的。我问她干啥去了。找他，她說。嫉妒。这种糟糕的情绪，再一次控制了我。找到了吗？她不言声，只从她曾在旅途中背过的双肩包里，摸出一把紫色珠子，用根黑毛线在那里一颗一颗地穿。为什么不说话？串了十来颗，她这样问我，然后说：小时候，我没什么玩的，就穿珠子，穿好了，拎着一头提起，珠子啪啪啪掉到地上，捡起来再穿；我还是个孩子的时候，就成了寂寞的寡妇。我心头一阵凛冽。你丈夫死了吗？问这句话时，我心里想的“丈夫”不是我，而是她在岛上寻找的人。珠子从她手上滑脱，掉到泥地上。掉得无声无息。</p>
<p>她一屁股坐到我身边，托起我的下巴：我说过我要比你先死，你也同意了的，你要为你的不负责任道歉！说罢来解我的纽扣。做爱，是她让我道歉的方式，最重要的方式。</p>
<p>那天夜里，我们做了三次，每一次她都让我打她。天亮后，她去水潭边照，回来的时候一脸苦相，说：你把人家打得太狠了，比在武夷山那次打得还狠。</p>
<p>我说过，那一年，我们离开郑州就去了合肥。我在郑州搂了白素贞的腰，彻底酒醒后，心绪却很黯淡。到合肥的时间是凌晨四点左右，得在车上抓紧睡一会儿，我说我头痛，她说那睡吧。晚上九点多钟，我就爬到上铺躺下了。为什么去搂人家的腰呢？这是什么意思呢？男不摸头女不摸腰，女人的心是长在腰上的，怎么能随便摸呢？我想着这件事，好不容易才迷糊过去。刚睡着，一名警察将我的床板敲得砰砰响，是要检查证件。我知道他是例行公事，本不该朝他发火，但就是控制不住，坚决不给他。他也火了，说我一直在等你啊。我说，你凭啥要查我？凭啥要把我的身份证弄到你们那个机器上去扫？他说：我按规定办事，为了你的安全，也为了大家的安全，我就凭这个！他像是在背书。他五十多岁年纪，已经秃顶，从上铺望下去，只见泛红的头皮。他尽职尽责地做了一辈子小警察，怪不容易的。但让我发火的不止这件事：还有将近两个钟头才到合肥，乘务员就把我叫醒，说换票。这弄得我再不敢睡。我猜想乘务员那时候正百无聊赖，想多几个醒着的人陪她。不敢睡，躺在床上又难受，想坐又直不起腰，只好下来。白素贞睡在下铺，换票后依然躺着，我坐在她床上，她蜷了一下身子，脸贴住我的背，手伸过来，抱住我。女人的这种姿势，已说明了男女互动的实质。我只能让她抱。有什么办法呢，你都搂了人家的腰了。我说，你再睡会儿，到时候我叫你。她说你也躺下来。我没躺。她使劲扳我，我还是没躺。我说床太硬了，坐着舒服一点儿。她没过分坚持，贴住我睡。几分钟后，中铺一个女子起来上厕所，回来时走错了地方，爬到别人的铺上去了。我看到她走错了，但又拿不准她是不是故意的。她爬上去后，把别人弄醒，才连声道歉，然后下来，上了自己的铺。她的铺上已躺着一个男的，看来是她相好，趁她上厕所时溜到她的铺位上了。两人便睡在了一起。白素贞看到这一幕了吗？……</p>
<p>出站后，离天亮已经不远，我们在广场上坐着吹风。从郑州往南，身上就像裹了层薄膜。晨光把夜灯挤走，我们就去找吃的，向一个环卫工人打听早餐店，她不辞辛劳地把我们带到一条又脏又乱的巷道里，估计是她亲戚或熟人开的，稀粥入口那味儿，老是提醒你：“兄弟，这是多日的剩饭！”小笼包子的肉馅，酸不拉叽，不知道是什么做的。只能不去想，瞎着心往肚里吞。然后带着行李，去完成我的任务。我不要看城市，要看田野，但乘22路车去郊外，走了很远的路，也看不到田野。一直坐到终点，才见马路外有零星的土地，显然已被征用，还没来得及修楼或干别的，农人便偷空种了棉花，红的白的棉桃，提心吊胆地挂着。棉田外的乱草丛中，牵着瓜藤，一个头搭白毛巾的老妇，用棒子将乱草分开，竟露出一个长条形的海南瓜，妇人惊异欢悦的神情，不是因为找到了个南瓜，而是找到了她作为农人和庄稼永生的联系。</p>
<p>接着去六安，去武汉，去长沙。湘江恢宏浩大，流水泛着光芒。我们在湘江边站了一会儿，就赶回车站，买去南平的票。队伍一直排到门外。但滚动的电子显示屏说：因水害影响，去南平的铁路暂时停运。所有人都不信，包括我。电子显示屏可以告诉我们今天是星期二，但不可以告诉我们去南平的火车停运了，因为我们要去的正是南平。去别处的可以停运，去南平的不可以，正如去别处的人觉得去南平的可以停运，去他们要去的地方不可以停。队列里有了骚动，但没有人撤离。两个多钟头后，终于排到窗口。这时候才不得不信了。问售票员“暂时”是多久，她说她也不知道，她要听上面的通知，可能是一天，也可能是三五天。她说着这些话时，眼睛已望着我身后的人。我身后的人把我往一边挤，好像我要去的地方停运，就低人一等，就没资格在那里问这问那，他就有理由把我挤开。但我没让他得逞，我决定转车：从长沙到鹰潭，再从鹰潭到武夷山。我去南平，也主要是看南平的武夷山。</p>
<p>去鹰潭的车上无座，去武夷山的车上也无座，都是挤在过道里。过道里黑黝黝的，是人的阴影；当人与人之间没有缝隙，人就不存在，只有人的阴影。人的阴影把厕所门堵住，完全打不开。地上不时有水流动，也不知是什么水。一高个子的圆头男子，艰难地举着本书看，《国民党12名将被俘之谜》，汗水从脸上流下来，他用书刮掉，刮得噗的一声，又接着看。两个挤在门边的女子，热烈地讨论着日本人，门上布满水汽，她们便用指尖在门上画，画的是某个中文字日文该怎么写。一个买了锄头的男人，锄刃用报纸裹着，紧紧地搂在怀里。人们彼此在攀老乡。丧失了距离感，使每个人都很紧张，都想从心理上为自己找个靠山。突然传来大声呼喊：让一下！让一下！两个小伙子抬着一个昏迷过去的人，像碾倒一片蒿草似的冲撞过来，被抬的人二十余岁，脸色惨白，闭着眼睛，是发痧了。那个漂漂亮亮的女乘务员倒是很负责任，挤来挤去地提醒乘客注意安全，她明显刚刚参加工作，还有着职业的光荣感，也觉得自己的一举一动都被人注意，被人欣赏。</p>
<p>就这样，早上六点过，我们到了武夷山。</p>
<p>是转转就走还是休息一天？出站到了小小的广场上，白素贞问。</p>
<p>问话里已表达了她的愿望。我说，休息一天。</p>
<p>坐出租到市区，住进了悦宏宾馆。</p>
<p>往后的日子里，我经常想，如果不在武夷山住下，会有后来的事情吗？悦宏宾馆是我们一路上住的最好的宾馆，干净，舒适，如果它没那么干净舒适，会有后来的事情吗？</p>
<p>我洗了澡，想去街上逛逛，就出门来。这宾馆像是个戏园，我们住在二楼，廊道宽敞，可直视下面的大厅，很有些旧时旅店的感觉，加上武夷山空气清新，让我心旷神怡。是的，就是心旷神怡。我去敲隔壁的门，敲好几下都没动静，心想她是不是出去了？刚走到楼梯口，她却跑出来叫我。她的头发滴着水珠，前胸湿了一片。她说人家在洗澡嘛。我说你慢慢收拾，我出去走走。等我！她说完回房间去了。我看见她的后背也湿了一片。她再次出来时，换了身白色连衣裙；刚才是粉红T恤，亚麻嘻哈裤，显然是临时穿出来应答我的。头发并没吹，只是用浴巾绞干了，微微弯曲地散在她的身体上。武夷山的街道宁静安详，棕榈树下，不是竹器就是茶叶，不是茶叶就是孝母糕。我后来多次想，如果武夷山不是那样宁静呢？如果武夷山人经营的店子，也像别处一样张扬呢？我是在近乎无赖地找借口了。但也难说，事物之间，确实存在着无法估量的联系。而且偏偏就在那天夜里，在悦宏宾馆前面的广场上，有场歌舞表演，闹腾到十一点才散。从七点半到十一点这段时间里，发生了许许多多的事情。</p>
<p>我跟白素贞也是出去看表演的，但对一切表演，白素贞都没兴趣，甚至反感。她说，别傻乎乎的了，回房间吧。她嘴上强调的是傻乎乎，眼神强调的是回房间。那时候，我就感觉到今晚会有事情发生。这个跟我多日的女人，我不知道她的来路。我的脑子里，浮现出“白蛇”和“聊斋”，这两样东西都让我害怕。我在那里飞速地默念：白素贞是蛇、狐仙或鬼，哪一样更让我怕？结论是都怕，不过狐仙要好一点儿。然而，要是她既不是蛇，也不是狐仙和鬼，而是人呢？——似乎更让我怕。我从没忘记对她的疑惑，这疑惑从胭脂沟的妓女坟就开始了。我带着拒绝的渴望，跟她进了宾馆，上了二楼。</p>
<p>她住205，我住206，回我的房间，需從她门前过。她下楼时就把房卡捏在手里，就那么一直捏着，走到门口，比画一下就打开了。她望了我一眼，进去了。门敞着，像敞着的嘴，需要食物，而我就是那食物，要是我离开，就是没尽到食物的职责。于是我也进去了。她拿着水壶，到傍门的盥洗间接水，顺手把门关了。坐，她过来说。为显示自己并不是那样拘束，我偏不坐，做出很随意的样子。中午她在床上躺过的，这看得出来，恰恰因为躺过，才越发显出房间的整洁。女人似的整洁。水壶里哇啦哇啦地吵着架，吵一会儿就停了，是因为每一滴水都沸腾了。这多么像男女，吵啊闹的，可等到两人沸腾起来，一切问题就都解决了。这时候冒出这种比喻，是相当不洁也相当危险的。她倒了两杯开水，放在傍窗的茶几上，茶几两侧各有把椅子，我坐下了，她也坐下了。如果知道后面发生的事情，这样的开始是多么笨拙，但我们就是这样开始的。她屈着腰，低着头，抠指甲。我转过头看她，看到的是她的头，头发从中间分开，黑里露出隐隐的白线。一个声音对我说：你不可以抱她一下吗？你都搂过人家的腰了。另一个声音说：对你而言，这还是个陌生女人，你搂了一个陌生女人的腰就错了，再去抱她，而且是在房间里抱她，就错上加错！</p>
<p>我知道你在想什么，她突然抬起头说。</p>
<p>我笑了笑。那笑更像是吓出来的。</p>
<p>如果我是你，她说，我也会那样想。</p>
<p>她用这种以退为进的方式，断然下了结论。</p>
<p>其实我并没告诉她我的想法。</p>
<p>接着她开始讲自己。起句却不是说自己，而是说他——她丈夫，确切地说是前夫。他是为我才杀人的，她说。我屁股底下的椅子摇晃了一下。结果并没杀人，只把人不致命的地方捅了个窟窿。新婚不久的一天夜里，她和丈夫去吃大排档，三个醉汉挤到他们桌上来，傍她在长凳上坐了，请她喝酒。她说对不起，我不喝酒。而她面前放着一杯啤酒。其中一个端着那杯酒，往她乳房上淋，还把她往怀里抱。她挣扎着，看对面的丈夫。丈夫咬着牙，脸色铁青。她的乳房上有了一只手，接着是两只手，三只手。她尖叫着，引来众多目光。那些目光里有刚产生就在融化的愤怒，更多的却是怀着某种期待，用脆弱的良心包裹起来的期待。三个醉汉深谙这类目光，因此在他们眼里，除了她，根本就没有人，当然也没有她丈夫。她丈夫的牙帮松开了，嘴向两边咧，是一副快要哭出来的样子。他们捏着她湿漉漉的乳房，说些流里流气的荒唐话。正这时，坐在最边上的那位手机响了，他接听前挤眉弄眼的样子，就知道是个女人打来的。那女人叫他们去某个地方喝酒。他说我们正在喝呢，你来不来啊？江娃子又弄到个妹子，奶子爆大，比你的大三倍！说罢抽泣似的笑。那边定是在骂，他谄笑着，说好好好，马上来，你坏了江娃子的好事，你要亲自给他补上哦。收了电话，两人起身，抱住她的“江娃子”，很怜惜似的在她身上又摸了几把，说对不起啊，下回啊，下回我让你……说了半句，伸出舌头，舔了舔她的耳朵，才将她放下，跟随那俩人出门走了。她脑子里空空荡荡，直到门外喊杀人，才发现丈夫不在。丈夫拖了把尖刀，追出去捅了那个江娃子。丈夫被抓。他连正当防卫或者说防卫过当也算不上，因为他拿刀子捅人的时候，江娃子等人已停止了侵害。关在看守所里的丈夫，若移交检方，将提起公诉，面临判刑。但有人给她递信出来，说可以赎的，只要拿10万块钱。她跟丈夫都才大学毕业，都还没找到工作，双方父母也是只能过日子的人，少少的一点儿积蓄，都为他们筹办婚礼花掉了，哪能一下子找这么多钱？但她的想法很明确，而且只有这一个想法：绝不能让丈夫去坐牢。便四处求告，磨破嘴皮，终于借到八万。还差两万，却怎么也想不到办法了。她去看守所找领导，领导不松口，领导说你以为这是做生意呀？这是国法！别说差两万，差两块也不行！留给她的只有一条路，这条路就是犯罪。她犯的罪是当妓女。第一次，就接待了个醉汉，这让她心如刀割，还是把生了锈的钝刀子。但她这知道，这个醉汉不是她的仇人，而是她的客人。她不辞劳苦，夜以继日，快速凑够十万块，把丈夫赎了出来。然而，当丈夫知道钱的来路后，一脚就把她蹬了。她的事情已经传出去，父母也不愿认她，亲戚朋友更是离她远远的……</p>
<p>我拿不准她说的是不是真的。</p>
<p>我总觉得这是她听来的故事。一个并不高明的故事。</p>
<p>假的，我想。这想法刚产生，另一个声音又说：天底下的故事本来就大同小异。</p>
<p>如果我相信她，我的怀疑就被证实了。</p>
<p>不过纠结这些有什么意义呢，在此之前，我早已陷入了深渊。</p>
<p>且必须承认陷入深渊的事实。</p>
<p>沉默许久，我问她：你为什么要给我讲这些？</p>
<p>她撇开我的问话，自顾自地说：我本来是出来寻死的。我想办法还了别人的钱，就出来寻死。我跟他很相爱。虽然他不要我了，但我相信他还是爱我。我们是大学同学，大三就谈上了。可是，我突然之间发现他变了，我认识的那个他已经死了。</p>
<p>去他妈的“很相爱”。又一个自欺欺人的人。</p>
<p>我说，他死了，你就为他殉葬？</p>
<p>她默然，然后说：死之前，我想多走些地方。我也不知道走到哪里才是终点。</p>
<p>我很想问她，遇到我之前，你出来多久了？你凭什么为自己挣路费和生活费？</p>
<p>但我不想问了。这时候我才想起，住在北极村鹿祥园农家乐那天晚上，鹿祥园让他的侏儒儿子来为我烧炕，老是点不燃，看来是故意点不燃，故意不把炕烧热，让我去白素贞的炕上，这样既节约了柴火，又能抽头。我没去和白素贞睡，就睡了冷炕，并且一觉睡到天亮。鹿祥园比我先起床，那样子很不乐意，莫名其妙地朝家人发火。白素贞跑出来蹭我的出租车时，鹿祥园在后面大声挽留她。我还听见他在往这边追，如果车子启动慢一点儿，多半就追上了。我不欠他的钱，看来她也不欠他的钱，为什么要追？难道仅仅是舍不得一个客人？</p>
<p>我用不着再问她什么了。</p>
<p>而她却完全改变了模样和口吻，灿灿地笑着说：在北极村见到你，我突然就不想死了。</p>
<p>谎言。这是我唯一能想到的两个字。</p>
<p>我，朱家田，一个快满四十岁的男人，一个被女人抛弃的男人，没那么大的魅力。</p>
<p>下一站你就到广州了，是吗？</p>
<p>我说是的。</p>
<p>你到广州就结束你的旅程，是吗？</p>
<p>我说是的。</p>
<p>所以我把那些事情告诉你，免得你胡乱猜疑我。</p>
<p>停顿片刻，她又说：我没你想的那样坏……我想给你留个好印象。</p>
<p>霎时间，别的似乎都不重要了，我只揪住了“好印象”几个字。这是什么意思？是要跟我分开吗？我的心拧得干巴巴的，发痛。由此我忠告天下男人，如果你爱上了某个女人，同时又无法确定是否能跟她继续下去，就千万别让她看出来，否则你就被她控制了。你嫌控制你的事情还少吗？非要再加一个女人吗？我当时就是这样对自己说的，我说朱家田，你该站起来了，你可以友好地和她道别，然后走出去，下楼看表演也行，回房整理资料也行，总之你应该马上走出这个房间，明天一早，你就独自离开，像你无数次出差一样，自来自去，满身孤单，也满身轻快。然而，我的双腿被捆住了，或者说我没有双腿了。我就骂自己：你龟儿子究竟想怎样呢？她亲口承认做过妓女，而她却说她没有你想的那么坏，可见坏与不坏，她与你是完全不同的标准。你认的是事实，她认的是动机，她以为你不知道动机大多是骗人的把戏。她身上自带堕落。就像那部韩国电影里的女学生，自带堕落，那个恶棍的错误，只是发掘出了她的堕落。你不是恶棍，你承受不起嗜血的爱，也承受不起她的堕落。</p>
<p>可是我被绳索捆住了。被绳索捆住的人，越挣扎捆得越紧。外面的歌唱我全听不见，只听见屋子里的空气咝咝流动。那是流动的时光，提醒着我的失去。我要失去她了。是我自己让我失去她的。我对她的堕落感到恐惧，是因为对我自己感到恐惧。每个人都可能成为那部韩国电影里的女学生，包括我。然而，她真的堕落吗？如果她是堕落的，没必要这么长时间跟着我，跟着我的这些日子，她从没堕落过，她对大篷车里的那个男人，或许只是透析了他的孤独，是对孤独的感同身受，也是对孤独者的怜惜。我的嫉妒心曲解了她的同情心。她确实说过做一个妓女蛮好的，但誰知道那是不是无奈？她跟着我，即使不是因为爱我，也是从我身上嗅到了同类的气息，并因此对生命有了温暖和留恋，想找一个留恋的理由……</p>
<p>我想着这些事，站了起来。</p>
<p>但伸出去的却不是腿，而是手。我抓住她的肩，向上一拎。</p>
<p>嘴唇燃烧。身体燃烧。我们像两团交缠的火，因为痛苦翻滚到沙发上，又翻滚到床上。两个身体互相埋怨，互相倾诉，都说这是早就该发生的事情了，为什么等到今天才发生。两个身体上长满了嘴，但还嫌不够，还需要指尖，需要舌头。她说，吻我，吻我。她说，接吻才是亲密，做爱不是。至少，她的嘴唇是纯洁的。她的纯洁让我深深感动。我说，我要把你带回去，我要你成为我的老婆。说到这里我哭了，从里到外地哭。她舔着我的泪水，说打我，亲爱的你打我。这辈子，我从没打过人，可是今天我想打，她叫我打，我就打了。</p>
<p>啪啪啪。啪啪啪。这是属于我们两个人的歌舞。</p>
<p>这天夜里，我打肿了她的脸。同样是这天夜里，我们说到死亡，说到谁先死谁后死，说到她死在我前面，我要想办法把她埋到一个干净地方。</p>
<p>开始我就说，我怀疑白素贞是故意死的。这怀疑并非没有根据。那天夜里，长时间地吹着风，风从屋顶的天眼路过，不小心摔下来，碎了一地。杏树早掉光了叶子，风粉碎的声音，打得枝条嗖嗖而鸣。早上空气清澈，从壁缝进来的每一丝光芒，都像是空气本身的光芒，我们呼吸着空气，也呼吸着光芒。我们的身体内部，便在呼吸间一明一灭。正在我感觉“灭”下去的时候，她问我，你还想不想你的周琴？突然得就像头顶砸下一个花盆。那不是我的周琴！何必这么气冲冲的？管她是不是你的，我只问你还想不想她？那是我的伤口，她不该去戳的。然而我明白她也有伤口，我应该以其人之道还治其人之身。我问她想不想他，她装傻：“他”是谁？我说你心里清楚。她说我真不知道。我哼了一声：除非你的“他”太多。她的四肢绳子一样把我缠住，说朱家田你太小气了，我早告诉过你，我是纯洁的。她依然在装傻。两人暂时无话。一旦沉默下来，周琴就在我伤口上拱，把伤口扩展开。栖息在那伤口上的，不仅有周琴，还有我的父母、女儿、同事以及我的整个人世。我想她也一样，即使不再想“他”，也不可能不想与“他”有关和无关的人世。我们在各自的怀想里彼此怨恨。</p>
<p>可以想象，两人又以做爱来和解。怨恨有多深，做爱就有多疯。在这过程中，我想起父亲给我讲过的另一个故事，是我外公和他伙计们的故事。我外公讲给我母亲，我母亲讲给我父亲，我父亲讲给我。外公做纤夫那些年，苦得慌，为人拉水糖（他们把红糖叫水糖），水糖拍成很厚的方块，每块有上百斤，伙计们想偷吃，又不能砸，哪怕砸小小一只角，货主也能看出来，便想了个办法：用根竹筒，头子削尖，从水糖中间插进去，竹筒抽出来，将戳开的窟窿敷上，然后剖开竹筒，里面就全是糖。他们吃到了糖，但糖的伤口却不露痕迹。</p>
<p>我和白素贞，就以这样的方式处理伤口。</p>
<p>这种方式给我们带来极致的快乐，就像外公和他伙计们当年的快乐。</p>
<p>偷来的快乐。</p>
<p>第二天早上，半岛全是白的，并没下雪，是被风吹白了。我由此知道了风也有颜色，风的颜色就是白，它走到哪里，就把哪里染上它的白。我披衣起床，去门外望了一眼，又回到被窝里，说，半岛跟你一个姓了。她没睁眼，说，叫白清溪岛了？我说太麻烦，就叫白岛好了。她咧嘴笑笑，说这名字好听。又说：它姓了白，就是我的亲人了，在这里，我有亲人，你没有，这对你不公平。听了这话，我才铭心刻骨地体味到了她的孤独。我说你就是我的亲人，我不再需要别的亲人。她把脸埋在我的胸膛上，静静的。屋外万物的声音，先是窸窸窣窣传进来，之后越来越响。她说，有快艇跑过了。其实这里听不见快艇，是她心里有了快艇。我说，要不，我们今天去赶县城？她这才把眼睛睁开。我没看见她睁眼睛，是裸露的胸膛感觉到有她的睫毛划过。没钱啦！她说。我说以前带来的钱，还放在皮箱里，足够我们在县城里住几天；即使不够，驮一袋粮食去卖了，不就是钱吗？上游的县城叫川梁，下游的县城叫东轩，我们是从东轩坐快艇来的，这回我们去川梁。去川梁干什么？这倒把我问住了。见我不言，她说，我哪里也不去，我就这样躺在亲人的怀里。</p>
<p>这句意味深长的话，又被我轻轻地放过了。</p>
<p>阳光跟昨天一样明亮，也跟昨天一样冰凉，吃过早饭，我去锄地。冬天很快就会过去，我希望土地苏醒过来时，不至于觉得身体太沉重。她去了后山，捡干柴。我们从没砍过活着的树木，后山的枯枝足够我们做饭和取暖。我锄地的地方，离小屋大约六十米远，当我感觉身上发热，脱掉外套往地边桉树上挂的时候，看见她拖着一捆柴火回了屋子。紧接着，屋顶冒出炊烟。炊烟让我安详，是一无所想又被浑身充满的那种安详。是呀，真没必要去县城，人群只会让我们觉出自身的渺小，并因此焦虑、恐慌，生怕失去什么，而在这里，我们没什么可失去的，因此也就拥有一切。现在，又拥有了半岛新的命名：白岛。这名字不仅好听，还带着醇厚的暖意。白岛是白素贞的同宗，自然也就是我的同宗了。我用越来越灵巧的锄头，梳理着我同宗的亲人。曾经在这半岛上生活过的，包括那些麻风病患者，都是我的亲人。不远处的白骨冢，是我亲人的坟冢。自从来到这里，我从来就没有孤单过。</p>
<p>太阳当顶，她也没叫吃饭，而炊烟已经散淡下去。看来饭已经做熟，我可以收工了。我的身后，是一大片翻过的土地；怕它们受冻，我没锄得很细，块状泥土均匀地排列着，像是栽在地里的。将泥土栽进泥土，难道不是一种发明吗？难道不能证明我们是世界和时间的创造者吗？我满意地拍了拍手，将锄头往地上一挖，去桉树底下取衣服。这时候，一艘快艇被上游的山弯吐出来，尽管看不清船上的情景，但我分明感觉到有人在朝这边指指点点，他们会说什么呢？我自己替他们回答：看啦，半岛上有个男人，还有一个女人，那个男人和女人，是这条河上的神仙。但我说过我不想做神仙，我只想做人，做白素贞的男人。</p>
<p>可是，当我回到小屋，白素贞已经死了。</p>
<p>是吃蘑菇死的。</p>
<p>秋天里，我们捡了许多蘑菇，白素貞细心挑拣，将有毒的扔掉。她认识哪些蘑菇能吃，哪些不能吃。吃不过来，就将大部分晾干。湿的干的，我们都吃了很多，都没有任何问题。但是这天，她趁一个人在家，煮了一碗，吃掉了其中的大半。我有理由相信，这是她有意藏好的剧毒蘑菇，随时准备利用它来了结自己。她就像潜伏的特工。先是潜伏在人群里，然后潜伏在我的世界里，看来，两者都给了她伤害——一个特工也无法忍受的伤害。</p>
<p>我把她埋在杏树底下，将她的所有衣物都埋了，只留下了那件红色羽绒服，那是我们初次见面时她穿过的。</p>
<p>埋下她不久，春天来了，杏树开出艳丽的花朵。</p>
<p>这是它第一次开花。</p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>虚构文学创作练习04——两个人走出一座建筑</title>
    <url>/blog/2022/01/11/L019-%E8%99%9A%E6%9E%84%E6%96%87%E5%AD%A6%E5%88%9B%E4%BD%9C%E7%BB%83%E4%B9%A004%E2%80%94%E2%80%94%E4%B8%A4%E4%B8%AA%E4%BA%BA%E8%B5%B0%E5%87%BA%E4%B8%80%E5%BA%A7%E5%BB%BA%E7%AD%91/</url>
    <content><![CDATA[<p>小丑卸了妆，慢慢走出了小剧场那扇朽得摇摇欲坠的后门。怀里小心地护着他演出用的洋娃娃，使走姿显得有些怪异。出了门，便是一条小巷，偏僻得连满街涌动的垃圾都不愿光顾。时值隆冬，漫天的云在小镇上空压着，阴风吹了好几天，到这天夜里终于见了雪。零星几盏仿佛被遗忘此处的街灯，散发着昏黄的光线，依稀映着路面上的薄薄积雪。</p>
<span id="more"></span>
<p>此时雪下得正盛，雪花们在灯光下翩然起舞。小丑沿着这条巷子缓缓走着，靴子踩在薄薄的雪毯上，发出规律的嘎吱声。风虽小了些，却不见停，时有乱雪飘入眼睛。他不得不眯起双眼，脚步却愈发轻快了起来，不时搂着他的洋娃娃转上一圈，在雪中跳起舞来。模糊的视线中，洋娃娃金黄的发丝与空中银白色的丝线相互纠缠。</p>
<p>雨雪天总是显得很安静，尤其是在空荡荡的小巷里。小丑快速迈出两步，站定，优雅地抖落身上的雪，向前方浅鞠一躬。整理了下衣装，继续缓缓前行。</p>
<p>回到租住的老旧公寓，</p>
]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>虚构文学创作练习</tag>
      </tags>
  </entry>
  <entry>
    <title>《雪国》阅读笔记01——开幕</title>
    <url>/blog/2022/01/12/L020-%E3%80%8A%E9%9B%AA%E5%9B%BD%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B001%E2%80%94%E2%80%94%E5%BC%80%E5%B9%95/</url>
    <content><![CDATA[<blockquote>
<p>被《雪国》的写作风格所吸引，试图学习一下。</p>
</blockquote>
<span id="more"></span>
<p>开篇非常简单的两句话交代了时间和地点。"穿过...便是...停了下来"三个连续的状态给人一种时间上的连贯感。</p>
<p>第二段完成了外景到内景的切换。引出了场景中的主要元素：岛村，与火车这段情节的女主角：叶子姑娘。</p>
<p>顺序上，“一个姑娘从对面座位上站起”而不是“对面座位上的一个姑娘站起”，表达出了一种注意力随姑娘的动态转移的过程。先是注意到姑娘，才是座位，再是座位前的玻璃窗。同时，“对面”一词将读者的视角固定在了岛村所在的位置。</p>
<p>整句话几乎是一个第一人称的视角描写，甚至把“岛村”换成“我”也不会有太大的不妥之处。增强了第三人称下的代入感 。</p>
<p>这里领悟了一个提高代入感的技巧。作者必需要清楚笔下的世界是什么样子，但要选择性地向读者透露信息。第三人称下也要将信息限制在人物的认知范围内，通过人物来披露信息。尽可能少地行使作者的解说权。这里使用“岛村”和“一位姑娘”这样的称呼带来的就是一种微妙的信息差。结合之前描写中预设的方位，让我们不自主地代入到岛村的角度去看，去听，去思考。</p>
<p>“姑娘打开窗子”后若立即再写“姑娘探出身子”，连续两句话主语相同会有点啰嗦的感觉，合并成一句话又嫌同一句话里动作太多。这中间插入一句“冷空气袭进来。”就适当的打断了连续的描写，又符合注意力改变的规律。</p>
<p>接着用姑娘的动作将注意力引向窗外和站长先生的对话。站长登场，注意描写顺序：围巾、帽子、手拿提灯、踏着雪。是一个从上到下的视线移动。</p>
<p>对话中可以披露出人物相关的信息。在叶子和站长的对话中先后透露出了叶子的名字，有一个弟弟等基本信息，以及从这些信息与语气上对叶子的性格进行了侧写。</p>
<p>叶子起身、开窗、对话的系列动作以关窗捂脸结束。</p>
<p>此时叶子作为被观察的对象静止了下来，注意力自然回收。适时地对之前的对话中不便透露的信息进行补充。</p>
<p>最后交代男主角的岛村的心理活动，以“产生兴趣”和“增添了不少感伤”两个略带缺憾的状态结束了开头这一幕。</p>
<p>叙事节奏为远景，内景、对兴趣点（叶子姑娘）的观察，以及观察带来的影响（产生兴趣）。同过主角产生兴趣，调动得读者也对这一神秘的姑娘产生了兴趣。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析笔记（一）——基础知识</title>
    <url>/blog/2022/05/14/L021-%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>临近毕业才对数学产生了些许兴趣，了解了一下，高山仰止啊。。总之先爬一爬，爬这座山总比爬Celeste有意思嘛。慢慢来，夕阳红登山团（只有一个人也配叫团吗？），出发！</p>
<p>这篇记录了基础的符号与概念。</p>
</blockquote>
<span id="more"></span>
<h1 id="section"></h1>
<h2 id="基础符号">基础符号</h2>
<p>约定四个符号：</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="22.68ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10024.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1979,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2479,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3444.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3889.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4854.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5299.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(6265,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6709.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7154.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7599,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8043.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(8488.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9524.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>,...,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.344ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 1036.3 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>中最大的一个。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="22.327ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9868.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1823,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2323,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3288.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3733.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4698.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5143.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(6109,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6553.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6998.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7443,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7887.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(8332.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9368.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewBox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>,...,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.344ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 1036.3 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>中最小的一个。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="2.552ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1128 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>表示实数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>的整数部分，也就是不超过<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>的最大整数。</p>
<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.559ex" role="img" focusable="false" viewBox="0 -689 778 689"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="25FB" d="M71 0Q59 4 55 16V346L56 676Q64 686 70 689H709Q719 681 722 674V15Q719 10 709 1L390 0H71ZM682 40V649H95V40H682Z"></path></g></g></g></svg></mjx-container></span>表示证明完毕。</p>
<h2 id="集合与逻辑符号">集合与逻辑符号</h2>
<p>集合这一概念描述如下：一个集合是由确定的一些对象汇集的总体，组成集合的这些对象被称为集合的元素。</p>
<p>符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 667 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"></path></g></g></g></svg></mjx-container></span>表示一个元素是否属于一个集合，即元素是否在集合内。用法如下：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.262ex" xmlns="http://www.w3.org/2000/svg" width="23.574ex" height="5.656ex" role="img" focusable="false" viewBox="0 -1500 10419.6 2500"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,750)"><g data-mml-node="mtd" transform="translate(368,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(2558.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(3458.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">读</text></g><g data-mml-node="mi" transform="translate(4358.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">作</text></g><g data-mml-node="mi" transform="translate(5258.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(6158.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6730.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">属</text></g><g data-mml-node="mi" transform="translate(7630.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">于</text></g><g data-mml-node="mi" transform="translate(8530.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(9294.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-750)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"></path></g><g data-mml-node="mi" transform="translate(1712.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(2476.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(3376.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">读</text></g><g data-mml-node="mi" transform="translate(4276.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">作</text></g><g data-mml-node="mi" transform="translate(5176.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(6076.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6566.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">不</text></g><g data-mml-node="mi" transform="translate(7466.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">属</text></g><g data-mml-node="mi" transform="translate(8366.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">于</text></g><g data-mml-node="mi" transform="translate(9266.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(10030.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>如果一个集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>的任何元素都是用集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>的元素，那么我们就说<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>的子集合，记为：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.262ex" xmlns="http://www.w3.org/2000/svg" width="26.153ex" height="5.656ex" role="img" focusable="false" viewBox="0 -1500 11559.6 2500"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,750)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(2846.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(3746.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">读</text></g><g data-mml-node="mi" transform="translate(4646.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">作</text></g><g data-mml-node="mi" transform="translate(5546.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(6446.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(7210.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">包</text></g><g data-mml-node="mi" transform="translate(8110.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">含</text></g><g data-mml-node="mi" transform="translate(9010.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">于</text></g><g data-mml-node="mi" transform="translate(9910.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(10659.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-750)"><g data-mml-node="mtd" transform="translate(450,0)"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mi" transform="translate(2082.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(2846.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(3746.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">读</text></g><g data-mml-node="mi" transform="translate(4646.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">作</text></g><g data-mml-node="mi" transform="translate(5546.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(6446.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(7195.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">包</text></g><g data-mml-node="mi" transform="translate(8095.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">含</text></g><g data-mml-node="mi" transform="translate(8995.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(9759.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>如果集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>中的任何元素都是集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>中的元素，且集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>中的任何元素都是集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>中的元素（即<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="6.44ex" height="1.629ex" role="img" focusable="false" viewBox="0 -680 2846.6 720"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>且<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="6.44ex" height="1.629ex" role="img" focusable="false" viewBox="0 -680 2846.6 720"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2082.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>)，那么我们就说集合E与集合F相等，记为：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.44ex" height="1.724ex" role="img" focusable="false" viewBox="0 -680 2846.6 762"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span></p>
<p>如果集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>包含于集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>，且<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex" xmlns="http://www.w3.org/2000/svg" width="6.44ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 2846.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>，则称集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>真包含于集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>，集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>称为集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.695ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 749 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>的真子集。记为：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.643ex" xmlns="http://www.w3.org/2000/svg" width="6.44ex" height="6.416ex" role="img" focusable="false" viewBox="0 -1668 2846.6 2836"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,885)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="2ACB" d="M693 221Q693 214 680 201H524Q398 201 367 202T309 212Q236 230 180 280T98 398Q84 438 84 492T98 585Q126 663 193 716T346 781Q347 781 373 781T440 782T520 783H680Q682 780 686 776T691 770T693 763T680 743H526Q364 743 353 741Q279 730 221 687T138 578Q124 540 124 492T138 405Q163 340 221 297T353 243Q364 241 526 241H680Q682 238 686 234T691 228T693 221ZM82 -48T82 -41T95 -19H462L513 41L569 105Q574 110 582 110T596 104T602 90Q602 87 600 83Q600 77 555 30L515 -17L600 -19H682Q693 -30 693 -38T680 -59H480L415 -137L349 -213L515 -215H682Q693 -226 693 -233T680 -255H313L260 -317Q224 -360 212 -372T192 -385Q184 -385 179 -377T173 -362Q174 -361 218 -306L260 -255H178L93 -253L86 -248Q82 -243 82 -235Q82 -226 93 -215H195L295 -213L362 -137L426 -59H260L93 -57L86 -53Q82 -48 82 -41Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-783)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="2ACC" d="M82 759T82 763T83 769T89 776T95 783H251Q378 783 409 782T469 772Q540 753 596 703T678 585Q691 546 691 492T678 398Q649 320 581 267T426 203Q415 201 251 201H95Q82 214 82 221Q82 225 83 227T89 234T95 241H249Q411 241 422 243Q496 253 554 296T638 405Q651 444 651 492Q651 539 638 578Q613 643 555 686T422 741Q411 743 249 743H95Q82 759 82 763ZM82 -48T82 -41T95 -19H462L513 41L569 105Q574 110 582 110T596 104T602 90Q602 87 600 83Q600 77 555 30L515 -17L600 -19H682Q693 -30 693 -38T680 -59H480L415 -137L349 -213L515 -215H682Q693 -226 693 -233T680 -255H313L260 -317Q224 -360 212 -372T192 -385Q184 -385 179 -377T173 -362Q174 -361 218 -306L260 -255H178L93 -253L86 -248Q82 -243 82 -235Q82 -226 93 -215H195L295 -213L362 -137L426 -59H260L93 -57L86 -53Q82 -48 82 -41Z"></path></g><g data-mml-node="mi" transform="translate(2082.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>不含任何元素的集合称为空集，记作<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.328ex" role="img" focusable="false" viewBox="0 -587 778 587"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2205" d="M624 470Q624 468 639 446T668 382T683 291Q683 181 612 99T437 -1Q425 -2 387 -2T337 -1Q245 18 193 70L179 81L131 39Q96 8 89 3T75 -3Q55 -3 55 17Q55 24 61 30T111 73Q154 113 151 113Q151 114 140 130T115 177T95 241Q94 253 94 291T95 341Q112 431 173 495Q265 587 385 587Q410 587 437 581Q522 571 582 513L595 501L642 541Q689 586 695 586Q696 586 697 586T699 587Q706 587 713 583T720 568Q720 560 711 551T664 510Q651 499 642 490T628 475T624 470ZM564 477Q517 522 448 539Q428 546 375 546Q290 546 229 492T144 370Q133 332 133 279Q136 228 151 195Q157 179 168 160T184 141Q186 141 375 307T564 477ZM642 290Q642 318 637 343T625 386T611 416T598 436T593 444Q590 444 402 277T213 108Q213 104 231 89T293 55T392 37Q495 37 568 111T642 290Z"></path></g></g></g></svg></mjx-container></span>。空集是任何集合的子集。</p>
<p>一些常用的集合约定如下：</p>
<table>
<thead>
<tr class="header">
<th>集合</th>
<th>含义</th>
<th>集合</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span></td>
<td>全体自然数的集合</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="1.719ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 760 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span></td>
<td>全体复数的集合</td>
</tr>
<tr class="even">
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.636ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 723 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></mjx-container></span></td>
<td>全体整数的集合</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex" xmlns="http://www.w3.org/2000/svg" width="2.978ex" height="2.016ex" role="img" focusable="false" viewBox="0 -683 1316.1 891"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(716,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span></td>
<td>非负整数的集合</td>
</tr>
<tr class="odd">
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container></span></td>
<td>全体有理数的集合</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex" xmlns="http://www.w3.org/2000/svg" width="3.222ex" height="2.063ex" role="img" focusable="false" viewBox="0 -704 1424.1 912"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(824,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span></td>
<td>非负有理数的集合</td>
</tr>
<tr class="even">
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.593ex" role="img" focusable="false" viewBox="0 -683 759 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span></td>
<td>全体实数的集合</td>
<td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex" xmlns="http://www.w3.org/2000/svg" width="3.15ex" height="2.016ex" role="img" focusable="false" viewBox="0 -683 1392.1 891"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(792,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></svg></mjx-container></span></td>
<td>非负实数的集合</td>
</tr>
</tbody>
</table>
<p>这些集合间存在如下关系：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.262ex" xmlns="http://www.w3.org/2000/svg" width="20.939ex" height="5.656ex" role="img" focusable="false" viewBox="0 -1500 9255.2 2500"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,750)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2221.6,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(3222.3,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4278.1,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(5346.9,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6402.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7439.4,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8495.2,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-750)"><g data-mml-node="mtd" transform="translate(117.1,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2221.6,0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(716,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(3815.5,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4871.2,0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(824,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(6573.1,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(7628.9,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(792,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>可以通过罗列其元素或指出其元素应该满足的条件等办法来表示一个集合，如：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.262ex" xmlns="http://www.w3.org/2000/svg" width="14.111ex" height="5.656ex" role="img" focusable="false" viewBox="0 -1500 6237.1 2500"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,750)"><g data-mml-node="mtd" transform="translate(479.2,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(500,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1444.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1944.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2389.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2889.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3334,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3834,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4278.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(4778.7,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-750)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1349.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2294.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3053.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(3331.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4181.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(5237.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5737.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>还可以使用区间来表示实数集的一个子集：</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.656ex" xmlns="http://www.w3.org/2000/svg" width="26.115ex" height="12.443ex" role="img" focusable="false" viewBox="0 -3000 11542.9 5500"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,2250)"><g data-mml-node="mtd" transform="translate(111,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(807,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1251.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1680.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2236.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3292.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3792.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4642,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5586.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(6345.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6623.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7430.6,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(8486.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9336.1,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(10391.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(10820.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,750)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(918,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1362.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1791.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2458.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3514.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4014.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4864,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5808.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(6567.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6845.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7652.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(8708.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9558.1,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(10613.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(11042.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-750)"><g data-mml-node="mtd" transform="translate(55.5,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(807,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1251.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1680.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2347.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3403.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3903.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4753,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5697.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(6456.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6734.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7541.6,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(8597.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9447.1,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(10502.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(10931.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2250)"><g data-mml-node="mtd" transform="translate(55.5,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(918,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1362.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1791.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2347.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3403.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3903.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4753,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5697.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(6456.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6734.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7541.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(8597.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9447.1,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(10502.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(10931.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>上式从上至下分别称为闭区间、开区间、左闭右开区间、左开右闭区间。</p>
<p>设E与F是两个集合，由E的所有元素与F的所有元素合在一起组成的集合称为这两个集合的并集，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.938ex" height="1.588ex" role="img" focusable="false" viewBox="0 -680 2624.4 702"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(986.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(1875.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>。由E与F共同的元素组成的集合称为这两个集合的交集，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.938ex" height="1.588ex" role="img" focusable="false" viewBox="0 -680 2624.4 702"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(986.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(1875.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>。由属于E但不属于F的元素组成的集合称为这两个集合的差集，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.56ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2457.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(986.2,0)"><path data-c="2216" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path></g><g data-mml-node="mi" transform="translate(1708.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>。</p>
<p>符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.054ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.242ex" role="img" focusable="false" viewBox="0 -525 1000 549"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g></g></g></svg></mjx-container></span>表示蕴含关系。设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>为两个判断，如果<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>成立时<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>一定成立，则说<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>能够推出<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>，或者<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>蕴含<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>。记为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.248ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2761.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(2195.6,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span></p>
<p>例如</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="15.727ex" height="2.312ex" role="img" focusable="false" viewBox="0 -883.9 6951.2 1021.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2831.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="msup" transform="translate(4109.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5395.4,0)"><path data-c="2A7E" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM674 172Q692 172 694 154Q694 142 687 137Q685 135 395 -2L107 -138H101Q83 -136 83 -118Q83 -106 96 -100Q100 -98 380 35T665 170T674 172Z"></path></g><g data-mml-node="mn" transform="translate(6451.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></p>
<p>如果<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.248ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2761.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(2195.6,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>并且<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.248ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2761.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(843.8,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"></path></g><g data-mml-node="mi" transform="translate(2121.6,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>，我们说<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>等价，或说<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>互为充分必要条件，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="8.189ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 3619.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8,0)"><path data-c="27FA" d="M1438 514Q1438 525 1454 525Q1459 525 1462 525T1467 525T1471 524T1473 523T1475 520T1477 517T1480 512Q1517 438 1578 381T1689 300T1785 263Q1802 258 1802 250T1793 239T1756 228T1698 204Q1554 134 1480 -12Q1476 -21 1473 -22T1458 -24Q1438 -24 1438 -17Q1438 -13 1443 0Q1478 69 1529 123L1539 133H318L328 123Q379 69 414 0Q419 -13 419 -17Q419 -24 399 -24Q388 -24 385 -23T377 -12Q332 77 253 144T72 237Q62 240 59 242T56 250T59 257T70 262T89 268T119 278T160 296Q303 366 377 512Q382 522 385 523T401 525Q419 524 419 515Q419 510 414 500Q379 431 328 377L318 367H1539L1529 377Q1496 412 1467 458T1438 514ZM274 173H1583L1593 181Q1632 211 1710 250Q1709 251 1692 259T1647 283T1593 319L1583 327H930L927 328L602 327H274L264 319Q225 289 147 250Q148 249 165 241T210 217T264 181L274 173Z"></path></g><g data-mml-node="mi" transform="translate(3053.6,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container></span>。例如，对于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="5.777ex" height="1.636ex" role="img" focusable="false" viewBox="0 -683 2553.6 723"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span>，有</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="17.97ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 7942.7 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2683.3,0)"><path data-c="27FA" d="M1438 514Q1438 525 1454 525Q1459 525 1462 525T1467 525T1471 524T1473 523T1475 520T1477 517T1480 512Q1517 438 1578 381T1689 300T1785 263Q1802 258 1802 250T1793 239T1756 228T1698 204Q1554 134 1480 -12Q1476 -21 1473 -22T1458 -24Q1438 -24 1438 -17Q1438 -13 1443 0Q1478 69 1529 123L1539 133H318L328 123Q379 69 414 0Q419 -13 419 -17Q419 -24 399 -24Q388 -24 385 -23T377 -12Q332 77 253 144T72 237Q62 240 59 242T56 250T59 257T70 262T89 268T119 278T160 296Q303 366 377 512Q382 522 385 523T401 525Q419 524 419 515Q419 510 414 500Q379 431 328 377L318 367H1539L1529 377Q1496 412 1467 458T1438 514ZM274 173H1583L1593 181Q1632 211 1710 250Q1709 251 1692 259T1647 283T1593 319L1583 327H930L927 328L602 327H274L264 319Q225 289 147 250Q148 249 165 241T210 217T264 181L274 173Z"></path></g><g data-mml-node="mfrac" transform="translate(4819.1,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6108.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(7164.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></p>
<p>设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.502ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1990 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(640,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1029,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1601,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>是关于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>的一个判断，使用记号</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="36.975ex" height="3.507ex" role="img" focusable="false" viewBox="0 -1300 16343.1 1550"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="2203" d="M56 661T56 674T70 694H487Q497 686 500 679V15Q497 10 487 1L279 0H70Q56 7 56 20T70 40H460V327H84Q70 334 70 347T84 367H460V654H70Q56 661 56 674Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1794.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2739.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3503.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3892.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4281.6,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(4921.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5310.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5882.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6271.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6660.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7660.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">或</text></g><g data-mml-node="mi" transform="translate(8560.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">者</text></g><g data-mml-node="mstyle" transform="translate(9460.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(10460.6,0)"><path data-c="2203" d="M56 661T56 674T70 694H487Q497 686 500 679V15Q497 10 487 1L279 0H70Q56 7 56 20T70 40H460V327H84Q70 334 70 347T84 367H460V654H70Q56 661 56 674Z"></path></g><g data-mml-node="mi" transform="translate(11016.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(11866.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(12811.1,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mtext" transform="translate(13575.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13825.1,0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(14103.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(14353.1,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(14993.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(15382.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(15954.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>表示“存在<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="5.789ex" height="1.629ex" role="img" focusable="false" viewBox="0 -680 2558.6 720"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>使得<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.502ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1990 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(640,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1029,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1601,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>成立”，例如</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="24.293ex" height="3.127ex" role="img" focusable="false" viewBox="0 -1300 10737.6 1382"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2203" d="M56 661T56 674T70 694H487Q497 686 500 679V15Q497 10 487 1L279 0H70Q56 7 56 20T70 40H460V327H84Q70 334 70 347T84 367H460V654H70Q56 661 56 674Z"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1433.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2378.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3266.6,0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="msup" transform="translate(3544.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4803.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5803.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(6303.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7125.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8126,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(8903.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(9959.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></p>
<p>设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.335ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1916 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(566,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(955,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1527,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>是关于<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>的一个判断，使用记号</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="35.886ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15861.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1794.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2739.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3503.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3892.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4281.6,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(4847.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5236.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5808.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6197.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6586.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7586.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">或</text></g><g data-mml-node="mi" transform="translate(8486.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">者</text></g><g data-mml-node="mstyle" transform="translate(9386.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(10386.6,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(10952.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11341.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(11913.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12302.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12747.2,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(13303.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(14153,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(15097.8,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span></p>
<p>表示“对所有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="5.789ex" height="1.629ex" role="img" focusable="false" viewBox="0 -680 2558.6 720"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>都有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.335ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1916 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(566,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(955,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1527,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>成立”，例如</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.986ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 7507.7 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1794.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2739.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3498.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3887.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4276.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5562.9,0)"><path data-c="2A7E" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM674 172Q692 172 694 154Q694 142 687 137Q685 135 395 -2L107 -138H101Q83 -136 83 -118Q83 -106 96 -100Q100 -98 380 35T665 170T674 172Z"></path></g><g data-mml-node="mn" transform="translate(6618.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7118.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<h2 id="函数与映射">函数与映射</h2>
<p>映射的概念为：设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.873ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 828 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>都是集合，如果对<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.873ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 828 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g></svg></mjx-container></span>中的任一元素<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container></span>，有集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>中的唯一一个元素<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.124ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 497 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>与之对应，则称<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.873ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 828 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g></svg></mjx-container></span>的元素与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>的元素之间的对应关系<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>为一个映射。记作</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.251ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4531.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1383.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(2489.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3767.1,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span></p>
<p>按照对应关系，由D中元素<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container></span>决定的E中的唯一元素<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.124ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 497 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="3.995ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1766 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(1377,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。可以用记号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="5.635ex" height="2.081ex" role="img" focusable="false" viewBox="0 -704 2490.6 920"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(715.8,0)"><path data-c="21A6" d="M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z"></path></g><g data-mml-node="mi" transform="translate(1993.6,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>表示元素间的这种对应。例如，设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.608ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2920.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1105.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2161.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.463ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2856.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span>，而映射<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.24ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4526.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1383.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(2489.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3767.1,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span>定义为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.598ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4242.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3233.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>，则这映射规定了元素之间这样的对应关系</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.225ex" height="2.464ex" role="img" focusable="false" viewBox="0 -883.9 4519.7 1088.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1383.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2233.3,0)"><path data-c="21A6" d="M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z"></path></g><g data-mml-node="msup" transform="translate(3511.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.251ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4531.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1383.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(2489.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3767.1,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>是一个映射，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="1.71ex" role="img" focusable="false" viewBox="0 -716 2911.6 756"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g></svg></mjx-container></span>, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="6.463ex" height="1.636ex" role="img" focusable="false" viewBox="0 -683 2856.6 723"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>。我们把集合</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="26.543ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11731.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1689,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2355.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3411.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3911.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4461.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4850.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5422.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5811.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6089.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6939.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7884.1,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(8634.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(9134.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(9523.1,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10578.9,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(11342.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>叫做集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container></span>经过映射<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>的像集。并把集合</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="29.08ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 12853.6 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(636,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1589.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1978.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2737.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3404.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4460.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4960.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5532.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(5810.2,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(6360.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6749.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7321.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7988,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8932.8,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(9691.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(10191.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(10580.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11636.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(12464.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>叫做集合<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container></span>关于映射<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>的原像集。</p>
<p>不严谨但直观地说，一个集合A经过映射f而得到集合B。称B为A关于f的像集，A为B关于f的原像集。</p>
<p>设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.402ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 4597.6 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(550,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(2555.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3833.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span>是一个映射，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.272ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4540.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(754.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1310.6,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(2374.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3652.1,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span>也是一个映射，如果<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.673ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4275.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(1767,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2433.8,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3489.6,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container></span>，那么从<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.63ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 2488.6 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(715.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1660.6,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g></g></svg></mjx-container></span>开始，相继经过<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>和<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></span>的作用，就得到<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.835ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3021 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(866,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(1416,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1805,0)"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(2243,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2632,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。这样的对应关系</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.345ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5014.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(715.8,0)"><path data-c="21A6" d="M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z"></path></g><g data-mml-node="mi" transform="translate(1993.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(2470.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2859.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(3409.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3798.6,0)"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g><g data-mml-node="mo" transform="translate(4236.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4625.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>也是一个映射，称为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>的复合，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="4.46ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 1971.4 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(699.2,0)"><path data-c="2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"></path></g><g data-mml-node="mi" transform="translate(1421.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>。</p>
<p>对于映射<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>与<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></span>，两种顺序的复合映射<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="4.46ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 1971.4 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(772.2,0)"><path data-c="2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"></path></g><g data-mml-node="mi" transform="translate(1494.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></span>和<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="4.46ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 1971.4 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(699.2,0)"><path data-c="2218" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251ZM245 403Q188 403 142 361T96 250Q96 183 141 140T250 96Q284 96 313 109T354 135T375 160Q403 197 403 250Q403 313 360 358T245 403Z"></path></g><g data-mml-node="mi" transform="translate(1421.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container></span>不一定都有定义。</p>
<h2 id="连加符号sigma与连乘符号pi">连加符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 722 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g></g></g></svg></mjx-container></span>与连乘符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 750 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g></g></g></svg></mjx-container></span></h2>
<p>为了方便计算一连串的数相加或相乘，人们引入了连加符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 722 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g></g></g></svg></mjx-container></span>与连乘符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 750 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g></g></g></svg></mjx-container></span>： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -6.354ex" xmlns="http://www.w3.org/2000/svg" width="25.005ex" height="13.839ex" role="img" focusable="false" viewBox="0 -3308.5 11052 6116.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1745.9)"><g data-mml-node="mtd"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(1610.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2787.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3843.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(5073.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6074.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7082.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7860.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8305.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8750.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9194.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9972.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1562.5)"><g data-mml-node="mtd" transform="translate(1472.2,0)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="220F" d="M220 812Q220 813 218 819T214 829T208 840T199 853T185 866T166 878T140 887T107 893T66 896H56V950H1221V896H1211Q1080 896 1058 812V-311Q1076 -396 1211 -396H1221V-450H725V-396H735Q864 -396 888 -314Q889 -312 889 -311V896H388V292L389 -311Q405 -396 542 -396H552V-450H56V-396H66Q195 -396 219 -314Q220 -312 220 -311V812Z"></path></g><g data-mml-node="TeXAtom" transform="translate(65.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(426.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(1444.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2621.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3677.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(4685.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5694.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6138.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6583.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(7028.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></svg></mjx-container></span> 下面举出几个使用连加与连乘符号的例子</p>
<ul>
<li>例1. 阶乘可以表示为：</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="9.053ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 4001.2 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(1155.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(2211.6,0)"><g data-mml-node="mo"><path data-c="220F" d="M220 812Q220 813 218 819T214 829T208 840T199 853T185 866T166 878T140 887T107 893T66 896H56V950H1221V896H1211Q1080 896 1058 812V-311Q1076 -396 1211 -396H1221V-450H725V-396H735Q864 -396 888 -314Q889 -312 889 -311V896H388V292L389 -311Q405 -396 542 -396H552V-450H56V-396H66Q195 -396 219 -314Q220 -312 220 -311V812Z"></path></g><g data-mml-node="TeXAtom" transform="translate(65.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(426.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3656.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p>
<ul>
<li>例2. 二项式定理可以表示为：</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.014ex" xmlns="http://www.w3.org/2000/svg" width="43.019ex" height="6.549ex" role="img" focusable="false" viewBox="0 -1562.5 19014.4 2894.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1140.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2140.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="msup" transform="translate(2569.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3743.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(4799.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(124.5,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(6409.9,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mtable" transform="translate(736,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(94,0)"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1336,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="msup" transform="translate(8481.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,413) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="msup" transform="translate(9385.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mspace" transform="translate(11163,0)"></g><g data-mml-node="mo" transform="translate(11440.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(12496.5,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(14107.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mtable" transform="translate(736,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(39.5,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1336,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="msup" transform="translate(16179.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msup" transform="translate(18134,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,413) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>其中 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.387ex" xmlns="http://www.w3.org/2000/svg" width="31.05ex" height="11.905ex" role="img" focusable="false" viewBox="0 -2881 13723.9 5262"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1421)"><g data-mml-node="mtd"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mtable" transform="translate(736,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(39.5,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1336,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mo" transform="translate(2349.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3405.6,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1811.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2811.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3311.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3700.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4145.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4589.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5034.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5423.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6245.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7245.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(7989.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8989.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9489.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(4759.7,-686)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="10078.3" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-1421)"><g data-mml-node="mtd" transform="translate(4014.8,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1055.8,0)"><g data-mml-node="mrow" transform="translate(1880.2,676)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(799,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1188,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2010.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3010.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3531.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3920.4,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="4398.4" height="60" x="120" y="220"></rect></g></g></g></g></g></g></svg></mjx-container></span></p>
<ul>
<li>例3.</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.712ex" xmlns="http://www.w3.org/2000/svg" width="24.865ex" height="7.247ex" role="img" focusable="false" viewBox="0 -1562.5 10990.2 3203.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mn" transform="translate(1610.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2388.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(3444.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="munder"><g data-mml-node="mrow"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2222.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3000.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3445.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3889.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4334.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5112.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-507)"><path data-c="E152" d="M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z"></path><path data-c="E153" d="M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z" transform="translate(5162.4,0)"></path><g data-c="E156" transform="translate(2356.2,0)"><path data-c="E151" d="M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z"></path><path data-c="E150" d="M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z" transform="translate(450,0)"></path></g><svg width="2106.2" height="720" x="350" y="-300" viewBox="526.6 -300 2106.2 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(7.898,1)"></path></svg><svg width="2106.2" height="720" x="3156.2" y="-300" viewBox="526.6 -300 2106.2 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(7.898,1)"></path></svg></g></g></g><g data-mml-node="TeXAtom" transform="translate(2275.9,-1399.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">项</text></g></g></g><g data-mml-node="mo" transform="translate(9334.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(10390.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p>
<ul>
<li>例4. 计算</li>
</ul>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="17.792ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 7864.2 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1833,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(3014.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4015.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4404.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(5147.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6147.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(6647.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(7475.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>这个和式表示 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="41.734ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18446.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(1549.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2550.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(3488.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4100,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5100.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(5489.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(6650.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(7650.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(8589,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8978,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(9756,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10200.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10645.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(11090,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(11868,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(12257,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(13517.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(14518.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14907.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15729.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(16729.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(17229.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(18057.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 因而 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="23.159ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 10236.5 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1833,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(3014.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4015.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4404.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(5147.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6147.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(6647.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(7475.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8142,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(9197.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container></span> 可以发现我们已经尝过的数学知识中，连加比连乘更为常用。关于连加符号，有以下两个运算法则： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -6.354ex" xmlns="http://www.w3.org/2000/svg" width="28.157ex" height="13.839ex" role="img" focusable="false" viewBox="0 -3308.5 12445.6 6116.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1745.9)"><g data-mml-node="mtd"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1833,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2911.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(3911.4,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4667.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5334.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(6389.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(8000.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9078.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(10079,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(11689.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1562.5)"><g data-mml-node="mtd" transform="translate(2213.4,0)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1833,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="msub" transform="translate(2416,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3176,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3842.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4898.5,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="munderover" transform="translate(5648.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(7258.8,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></svg></mjx-container></span> 这是由于数的运算符合交换率、结合率以及乘法对加法的分配率。</p>
]]></content>
      <categories>
        <category>数学分析笔记</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>英语发音规则</title>
    <url>/blog/2022/06/12/L022-%E8%8B%B1%E8%AF%AD%E5%8F%91%E9%9F%B3%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<blockquote>
<p>告别Chinglish，从发音开始。</p>
</blockquote>
<h2 id="连读">连读</h2>
<p>英语中的单词，写是一个单词一个单词的写，读却不以单词为单位停顿。当遇到上一个单词尾音可与下一个单词的首音连起来时，就直接连着读。</p>
<h3 id="规则1辅音元音">规则1：辅音+元音</h3>
<p>前词尾音是辅音，而后词首音是元音时，拼起来读。类似将汉语中的xi'an （西安）读成xian（鲜）。</p>
<p>例句：</p>
<ol type="1">
<li>far-away It's not far~away from here.</li>
<li>in-an-hour I should be there in-an-hour.</li>
<li>later-on I'm going to see a movie later-on .</li>
<li>put-it-on Here's your sweater. Put-it-on.</li>
<li>stand-up Stand-up and stretch for a while.</li>
<li>take-care-of I'll always take care-of you .</li>
<li>take-it-easy Takeiteasy! Everything is going to be fine.</li>
<li>take-off Please fasten your seat belt. we will take-off shortly.</li>
<li>there-are There~are forty students in my class.</li>
<li>work-out I work-out every day to keep fit.</li>
<li>come-on！cheer-up！</li>
<li>keep-it-up！</li>
<li>never give-up！</li>
<li>I mean-it.</li>
<li>I've got-a lot-of work to do.</li>
<li>May I have-a cup-of milk?</li>
<li>What do you think-of-it？</li>
</ol>
<h3 id="规则2元音元音">规则2：元音+元音</h3>
<p>前词尾音与后词首音都是元音时，在两音间加入一个轻微的[j]或[w]音，拼读。</p>
<p><strong>[i:]或[eɪ]结尾的元音+[j]+元音</strong>：</p>
<ol type="1">
<li><p>see us -&gt; see [j] us</p>
<p>Come and see~us again soon.</p></li>
<li><p>be over -&gt; be [j] over</p>
<p>It will be~over soon.</p></li>
<li><p>be able -&gt; be [j] able</p>
<p>Will you be~able to come tomorrow?</p></li>
<li><p>say it -&gt; say [j] it</p>
<p>Could you say~it again please?</p></li>
<li><p>pay Ann -&gt; pay [j] Ann</p>
<p>Please pay~Ann her salary.</p></li>
</ol>
<p><strong>以[u:]或[əʊ]结尾的元音+[w]+元音</strong>：</p>
<ol type="1">
<li><p>do it -&gt; do [w] it</p>
<p>Don't do ~ it again.</p></li>
<li><p>go up -&gt; go [w] up</p>
<p>Let's go~upstairs and have dinner.</p></li>
<li><p>show up -&gt; show [w] us</p>
<p>Can you show~us something else.</p></li>
</ol>
<p>注：这种连音是很自然的现象，不必刻意去加中间的读音，它们会被自然地带出来。</p>
<h3 id="规则3省略h的连读">规则3：省略[h]的连读</h3>
<p>[h]这个音没啥尊严，连读时直接省略掉。</p>
<ol type="1">
<li>Does~he know?</li>
<li>What~happened?</li>
<li>Please give~him a hand!</li>
</ol>
<h2 id="略读">略读</h2>
<p>上节规则3介绍了一种省略音节的现象，称为略读。英文中略读也要讲一些武德，不是完全地不读被略掉的音，而是发音时点到为止，有口型不发音或轻微发音。</p>
<p>我们将[p] [b] [t] [d] [k] [g]几个音称为<strong>爆破音</strong>，这是一个重要概念。两个爆破音相邻，第一个音只形成阻碍，但不发生爆破，称为失爆；爆破音和其他辅音相邻，该爆破音不完全爆破。</p>
<h3 id="失爆爆破音爆破音">失爆：爆破音+爆破音</h3>
<p>前一个音形成一个阻碍，但不爆破，后一个音完全爆破。若后音在词尾，须轻化。</p>
<p>两个相同的爆破音相邻时，前一个音只做好发音准备而不发音，直接发第二个音。</p>
<p><strong>单词内失爆</strong></p>
<ol type="1">
<li>active = a(c)tive [k]+[t]</li>
<li>blackboard = blac(k)board [k] + [b]</li>
<li>dictation = di(k)tation [k] + [t]</li>
<li>football = foo(t)ball [t] + [b]</li>
<li>goodbye = goo(d)bye [d] + [b]</li>
</ol>
<p><strong>句子内失爆</strong></p>
<ol type="1">
<li>Stop talking! = Sto(p)-talking!</li>
<li>I don't care. = I don'(t)-care.</li>
<li>I had a bad cold. = I had a ba(d)-cold.</li>
</ol>
<h4 id="爆破音t和d鼻辅音m和n">爆破音[t]和[d]+鼻辅音[m]和[n]</h4>
<p>[t]和[d]形成阻碍，在句末通过鼻腔爆破：舌尖紧贴上齿龈，稍放开后立即贴回，气流从鼻腔冲出；在句中则不完全爆破。</p>
<p>在末：certain、frighten、Britain</p>
<p>在中：admire、admit、goodness</p>
<h4 id="爆破音t和d舌边音l">爆破音[t]和[d]+舌边音[l]</h4>
<p>爆破音[t]和[d]后面紧跟舌边音[l]，则必须由舌两边爆破，这种情况多发生在词尾。爆破音爆破音[t]和[d]后面紧跟清晰舌边[l]，则为不完全爆破。</p>
<p>词末：battle、gentle、little</p>
<p>词中：heartless、lately、badly、needless</p>
<h4 id="爆破音摩擦音破擦音失去爆破">爆破音+摩擦音/破擦音=失去爆破</h4>
<p>当爆破音后紧跟着摩擦音和破擦音时，该爆破音形成阻碍，但不完全爆破。</p>
<p>摩擦音：[f] [v] [θ] [ ð] [s] [ z] [ ʃ] [ ʒ ] [h] [r]</p>
<p>破擦音：[ts]-[dz],[tr]-[dr],[tʃ]-[dʒ]</p>
<p>例：advance、bookshop、helpful、lecture、object</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
</search>
